/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/animejs/lib/anime.es.js":
/*!**********************************************!*\
  !*** ./node_modules/animejs/lib/anime.es.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/*
 * anime.js v3.2.1
 * (c) 2020 Julian Garnier
 * Released under the MIT license
 * animejs.com
 */

// Defaults

var defaultInstanceSettings = {
  update: null,
  begin: null,
  loopBegin: null,
  changeBegin: null,
  change: null,
  changeComplete: null,
  loopComplete: null,
  complete: null,
  loop: 1,
  direction: 'normal',
  autoplay: true,
  timelineOffset: 0
};

var defaultTweenSettings = {
  duration: 1000,
  delay: 0,
  endDelay: 0,
  easing: 'easeOutElastic(1, .5)',
  round: 0
};

var validTransforms = ['translateX', 'translateY', 'translateZ', 'rotate', 'rotateX', 'rotateY', 'rotateZ', 'scale', 'scaleX', 'scaleY', 'scaleZ', 'skew', 'skewX', 'skewY', 'perspective', 'matrix', 'matrix3d'];

// Caching

var cache = {
  CSS: {},
  springs: {}
};

// Utils

function minMax(val, min, max) {
  return Math.min(Math.max(val, min), max);
}

function stringContains(str, text) {
  return str.indexOf(text) > -1;
}

function applyArguments(func, args) {
  return func.apply(null, args);
}

var is = {
  arr: function (a) { return Array.isArray(a); },
  obj: function (a) { return stringContains(Object.prototype.toString.call(a), 'Object'); },
  pth: function (a) { return is.obj(a) && a.hasOwnProperty('totalLength'); },
  svg: function (a) { return a instanceof SVGElement; },
  inp: function (a) { return a instanceof HTMLInputElement; },
  dom: function (a) { return a.nodeType || is.svg(a); },
  str: function (a) { return typeof a === 'string'; },
  fnc: function (a) { return typeof a === 'function'; },
  und: function (a) { return typeof a === 'undefined'; },
  nil: function (a) { return is.und(a) || a === null; },
  hex: function (a) { return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(a); },
  rgb: function (a) { return /^rgb/.test(a); },
  hsl: function (a) { return /^hsl/.test(a); },
  col: function (a) { return (is.hex(a) || is.rgb(a) || is.hsl(a)); },
  key: function (a) { return !defaultInstanceSettings.hasOwnProperty(a) && !defaultTweenSettings.hasOwnProperty(a) && a !== 'targets' && a !== 'keyframes'; },
};

// Easings

function parseEasingParameters(string) {
  var match = /\(([^)]+)\)/.exec(string);
  return match ? match[1].split(',').map(function (p) { return parseFloat(p); }) : [];
}

// Spring solver inspired by Webkit Copyright Â© 2016 Apple Inc. All rights reserved. https://webkit.org/demos/spring/spring.js

function spring(string, duration) {

  var params = parseEasingParameters(string);
  var mass = minMax(is.und(params[0]) ? 1 : params[0], .1, 100);
  var stiffness = minMax(is.und(params[1]) ? 100 : params[1], .1, 100);
  var damping = minMax(is.und(params[2]) ? 10 : params[2], .1, 100);
  var velocity =  minMax(is.und(params[3]) ? 0 : params[3], .1, 100);
  var w0 = Math.sqrt(stiffness / mass);
  var zeta = damping / (2 * Math.sqrt(stiffness * mass));
  var wd = zeta < 1 ? w0 * Math.sqrt(1 - zeta * zeta) : 0;
  var a = 1;
  var b = zeta < 1 ? (zeta * w0 + -velocity) / wd : -velocity + w0;

  function solver(t) {
    var progress = duration ? (duration * t) / 1000 : t;
    if (zeta < 1) {
      progress = Math.exp(-progress * zeta * w0) * (a * Math.cos(wd * progress) + b * Math.sin(wd * progress));
    } else {
      progress = (a + b * progress) * Math.exp(-progress * w0);
    }
    if (t === 0 || t === 1) { return t; }
    return 1 - progress;
  }

  function getDuration() {
    var cached = cache.springs[string];
    if (cached) { return cached; }
    var frame = 1/6;
    var elapsed = 0;
    var rest = 0;
    while(true) {
      elapsed += frame;
      if (solver(elapsed) === 1) {
        rest++;
        if (rest >= 16) { break; }
      } else {
        rest = 0;
      }
    }
    var duration = elapsed * frame * 1000;
    cache.springs[string] = duration;
    return duration;
  }

  return duration ? solver : getDuration;

}

// Basic steps easing implementation https://developer.mozilla.org/fr/docs/Web/CSS/transition-timing-function

function steps(steps) {
  if ( steps === void 0 ) steps = 10;

  return function (t) { return Math.ceil((minMax(t, 0.000001, 1)) * steps) * (1 / steps); };
}

// BezierEasing https://github.com/gre/bezier-easing

var bezier = (function () {

  var kSplineTableSize = 11;
  var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);

  function A(aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1 }
  function B(aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1 }
  function C(aA1)      { return 3.0 * aA1 }

  function calcBezier(aT, aA1, aA2) { return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT }
  function getSlope(aT, aA1, aA2) { return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1) }

  function binarySubdivide(aX, aA, aB, mX1, mX2) {
    var currentX, currentT, i = 0;
    do {
      currentT = aA + (aB - aA) / 2.0;
      currentX = calcBezier(currentT, mX1, mX2) - aX;
      if (currentX > 0.0) { aB = currentT; } else { aA = currentT; }
    } while (Math.abs(currentX) > 0.0000001 && ++i < 10);
    return currentT;
  }

  function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
    for (var i = 0; i < 4; ++i) {
      var currentSlope = getSlope(aGuessT, mX1, mX2);
      if (currentSlope === 0.0) { return aGuessT; }
      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
      aGuessT -= currentX / currentSlope;
    }
    return aGuessT;
  }

  function bezier(mX1, mY1, mX2, mY2) {

    if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) { return; }
    var sampleValues = new Float32Array(kSplineTableSize);

    if (mX1 !== mY1 || mX2 !== mY2) {
      for (var i = 0; i < kSplineTableSize; ++i) {
        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
      }
    }

    function getTForX(aX) {

      var intervalStart = 0;
      var currentSample = 1;
      var lastSample = kSplineTableSize - 1;

      for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
        intervalStart += kSampleStepSize;
      }

      --currentSample;

      var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
      var guessForT = intervalStart + dist * kSampleStepSize;
      var initialSlope = getSlope(guessForT, mX1, mX2);

      if (initialSlope >= 0.001) {
        return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
      } else if (initialSlope === 0.0) {
        return guessForT;
      } else {
        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
      }

    }

    return function (x) {
      if (mX1 === mY1 && mX2 === mY2) { return x; }
      if (x === 0 || x === 1) { return x; }
      return calcBezier(getTForX(x), mY1, mY2);
    }

  }

  return bezier;

})();

var penner = (function () {

  // Based on jQuery UI's implemenation of easing equations from Robert Penner (http://www.robertpenner.com/easing)

  var eases = { linear: function () { return function (t) { return t; }; } };

  var functionEasings = {
    Sine: function () { return function (t) { return 1 - Math.cos(t * Math.PI / 2); }; },
    Circ: function () { return function (t) { return 1 - Math.sqrt(1 - t * t); }; },
    Back: function () { return function (t) { return t * t * (3 * t - 2); }; },
    Bounce: function () { return function (t) {
      var pow2, b = 4;
      while (t < (( pow2 = Math.pow(2, --b)) - 1) / 11) {}
      return 1 / Math.pow(4, 3 - b) - 7.5625 * Math.pow(( pow2 * 3 - 2 ) / 22 - t, 2)
    }; },
    Elastic: function (amplitude, period) {
      if ( amplitude === void 0 ) amplitude = 1;
      if ( period === void 0 ) period = .5;

      var a = minMax(amplitude, 1, 10);
      var p = minMax(period, .1, 2);
      return function (t) {
        return (t === 0 || t === 1) ? t : 
          -a * Math.pow(2, 10 * (t - 1)) * Math.sin((((t - 1) - (p / (Math.PI * 2) * Math.asin(1 / a))) * (Math.PI * 2)) / p);
      }
    }
  };

  var baseEasings = ['Quad', 'Cubic', 'Quart', 'Quint', 'Expo'];

  baseEasings.forEach(function (name, i) {
    functionEasings[name] = function () { return function (t) { return Math.pow(t, i + 2); }; };
  });

  Object.keys(functionEasings).forEach(function (name) {
    var easeIn = functionEasings[name];
    eases['easeIn' + name] = easeIn;
    eases['easeOut' + name] = function (a, b) { return function (t) { return 1 - easeIn(a, b)(1 - t); }; };
    eases['easeInOut' + name] = function (a, b) { return function (t) { return t < 0.5 ? easeIn(a, b)(t * 2) / 2 : 
      1 - easeIn(a, b)(t * -2 + 2) / 2; }; };
    eases['easeOutIn' + name] = function (a, b) { return function (t) { return t < 0.5 ? (1 - easeIn(a, b)(1 - t * 2)) / 2 : 
      (easeIn(a, b)(t * 2 - 1) + 1) / 2; }; };
  });

  return eases;

})();

function parseEasings(easing, duration) {
  if (is.fnc(easing)) { return easing; }
  var name = easing.split('(')[0];
  var ease = penner[name];
  var args = parseEasingParameters(easing);
  switch (name) {
    case 'spring' : return spring(easing, duration);
    case 'cubicBezier' : return applyArguments(bezier, args);
    case 'steps' : return applyArguments(steps, args);
    default : return applyArguments(ease, args);
  }
}

// Strings

function selectString(str) {
  try {
    var nodes = document.querySelectorAll(str);
    return nodes;
  } catch(e) {
    return;
  }
}

// Arrays

function filterArray(arr, callback) {
  var len = arr.length;
  var thisArg = arguments.length >= 2 ? arguments[1] : void 0;
  var result = [];
  for (var i = 0; i < len; i++) {
    if (i in arr) {
      var val = arr[i];
      if (callback.call(thisArg, val, i, arr)) {
        result.push(val);
      }
    }
  }
  return result;
}

function flattenArray(arr) {
  return arr.reduce(function (a, b) { return a.concat(is.arr(b) ? flattenArray(b) : b); }, []);
}

function toArray(o) {
  if (is.arr(o)) { return o; }
  if (is.str(o)) { o = selectString(o) || o; }
  if (o instanceof NodeList || o instanceof HTMLCollection) { return [].slice.call(o); }
  return [o];
}

function arrayContains(arr, val) {
  return arr.some(function (a) { return a === val; });
}

// Objects

function cloneObject(o) {
  var clone = {};
  for (var p in o) { clone[p] = o[p]; }
  return clone;
}

function replaceObjectProps(o1, o2) {
  var o = cloneObject(o1);
  for (var p in o1) { o[p] = o2.hasOwnProperty(p) ? o2[p] : o1[p]; }
  return o;
}

function mergeObjects(o1, o2) {
  var o = cloneObject(o1);
  for (var p in o2) { o[p] = is.und(o1[p]) ? o2[p] : o1[p]; }
  return o;
}

// Colors

function rgbToRgba(rgbValue) {
  var rgb = /rgb\((\d+,\s*[\d]+,\s*[\d]+)\)/g.exec(rgbValue);
  return rgb ? ("rgba(" + (rgb[1]) + ",1)") : rgbValue;
}

function hexToRgba(hexValue) {
  var rgx = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
  var hex = hexValue.replace(rgx, function (m, r, g, b) { return r + r + g + g + b + b; } );
  var rgb = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  var r = parseInt(rgb[1], 16);
  var g = parseInt(rgb[2], 16);
  var b = parseInt(rgb[3], 16);
  return ("rgba(" + r + "," + g + "," + b + ",1)");
}

function hslToRgba(hslValue) {
  var hsl = /hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(hslValue) || /hsla\((\d+),\s*([\d.]+)%,\s*([\d.]+)%,\s*([\d.]+)\)/g.exec(hslValue);
  var h = parseInt(hsl[1], 10) / 360;
  var s = parseInt(hsl[2], 10) / 100;
  var l = parseInt(hsl[3], 10) / 100;
  var a = hsl[4] || 1;
  function hue2rgb(p, q, t) {
    if (t < 0) { t += 1; }
    if (t > 1) { t -= 1; }
    if (t < 1/6) { return p + (q - p) * 6 * t; }
    if (t < 1/2) { return q; }
    if (t < 2/3) { return p + (q - p) * (2/3 - t) * 6; }
    return p;
  }
  var r, g, b;
  if (s == 0) {
    r = g = b = l;
  } else {
    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    r = hue2rgb(p, q, h + 1/3);
    g = hue2rgb(p, q, h);
    b = hue2rgb(p, q, h - 1/3);
  }
  return ("rgba(" + (r * 255) + "," + (g * 255) + "," + (b * 255) + "," + a + ")");
}

function colorToRgb(val) {
  if (is.rgb(val)) { return rgbToRgba(val); }
  if (is.hex(val)) { return hexToRgba(val); }
  if (is.hsl(val)) { return hslToRgba(val); }
}

// Units

function getUnit(val) {
  var split = /[+-]?\d*\.?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?(%|px|pt|em|rem|in|cm|mm|ex|ch|pc|vw|vh|vmin|vmax|deg|rad|turn)?$/.exec(val);
  if (split) { return split[1]; }
}

function getTransformUnit(propName) {
  if (stringContains(propName, 'translate') || propName === 'perspective') { return 'px'; }
  if (stringContains(propName, 'rotate') || stringContains(propName, 'skew')) { return 'deg'; }
}

// Values

function getFunctionValue(val, animatable) {
  if (!is.fnc(val)) { return val; }
  return val(animatable.target, animatable.id, animatable.total);
}

function getAttribute(el, prop) {
  return el.getAttribute(prop);
}

function convertPxToUnit(el, value, unit) {
  var valueUnit = getUnit(value);
  if (arrayContains([unit, 'deg', 'rad', 'turn'], valueUnit)) { return value; }
  var cached = cache.CSS[value + unit];
  if (!is.und(cached)) { return cached; }
  var baseline = 100;
  var tempEl = document.createElement(el.tagName);
  var parentEl = (el.parentNode && (el.parentNode !== document)) ? el.parentNode : document.body;
  parentEl.appendChild(tempEl);
  tempEl.style.position = 'absolute';
  tempEl.style.width = baseline + unit;
  var factor = baseline / tempEl.offsetWidth;
  parentEl.removeChild(tempEl);
  var convertedUnit = factor * parseFloat(value);
  cache.CSS[value + unit] = convertedUnit;
  return convertedUnit;
}

function getCSSValue(el, prop, unit) {
  if (prop in el.style) {
    var uppercasePropName = prop.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
    var value = el.style[prop] || getComputedStyle(el).getPropertyValue(uppercasePropName) || '0';
    return unit ? convertPxToUnit(el, value, unit) : value;
  }
}

function getAnimationType(el, prop) {
  if (is.dom(el) && !is.inp(el) && (!is.nil(getAttribute(el, prop)) || (is.svg(el) && el[prop]))) { return 'attribute'; }
  if (is.dom(el) && arrayContains(validTransforms, prop)) { return 'transform'; }
  if (is.dom(el) && (prop !== 'transform' && getCSSValue(el, prop))) { return 'css'; }
  if (el[prop] != null) { return 'object'; }
}

function getElementTransforms(el) {
  if (!is.dom(el)) { return; }
  var str = el.style.transform || '';
  var reg  = /(\w+)\(([^)]*)\)/g;
  var transforms = new Map();
  var m; while (m = reg.exec(str)) { transforms.set(m[1], m[2]); }
  return transforms;
}

function getTransformValue(el, propName, animatable, unit) {
  var defaultVal = stringContains(propName, 'scale') ? 1 : 0 + getTransformUnit(propName);
  var value = getElementTransforms(el).get(propName) || defaultVal;
  if (animatable) {
    animatable.transforms.list.set(propName, value);
    animatable.transforms['last'] = propName;
  }
  return unit ? convertPxToUnit(el, value, unit) : value;
}

function getOriginalTargetValue(target, propName, unit, animatable) {
  switch (getAnimationType(target, propName)) {
    case 'transform': return getTransformValue(target, propName, animatable, unit);
    case 'css': return getCSSValue(target, propName, unit);
    case 'attribute': return getAttribute(target, propName);
    default: return target[propName] || 0;
  }
}

function getRelativeValue(to, from) {
  var operator = /^(\*=|\+=|-=)/.exec(to);
  if (!operator) { return to; }
  var u = getUnit(to) || 0;
  var x = parseFloat(from);
  var y = parseFloat(to.replace(operator[0], ''));
  switch (operator[0][0]) {
    case '+': return x + y + u;
    case '-': return x - y + u;
    case '*': return x * y + u;
  }
}

function validateValue(val, unit) {
  if (is.col(val)) { return colorToRgb(val); }
  if (/\s/g.test(val)) { return val; }
  var originalUnit = getUnit(val);
  var unitLess = originalUnit ? val.substr(0, val.length - originalUnit.length) : val;
  if (unit) { return unitLess + unit; }
  return unitLess;
}

// getTotalLength() equivalent for circle, rect, polyline, polygon and line shapes
// adapted from https://gist.github.com/SebLambla/3e0550c496c236709744

function getDistance(p1, p2) {
  return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));
}

function getCircleLength(el) {
  return Math.PI * 2 * getAttribute(el, 'r');
}

function getRectLength(el) {
  return (getAttribute(el, 'width') * 2) + (getAttribute(el, 'height') * 2);
}

function getLineLength(el) {
  return getDistance(
    {x: getAttribute(el, 'x1'), y: getAttribute(el, 'y1')}, 
    {x: getAttribute(el, 'x2'), y: getAttribute(el, 'y2')}
  );
}

function getPolylineLength(el) {
  var points = el.points;
  var totalLength = 0;
  var previousPos;
  for (var i = 0 ; i < points.numberOfItems; i++) {
    var currentPos = points.getItem(i);
    if (i > 0) { totalLength += getDistance(previousPos, currentPos); }
    previousPos = currentPos;
  }
  return totalLength;
}

function getPolygonLength(el) {
  var points = el.points;
  return getPolylineLength(el) + getDistance(points.getItem(points.numberOfItems - 1), points.getItem(0));
}

// Path animation

function getTotalLength(el) {
  if (el.getTotalLength) { return el.getTotalLength(); }
  switch(el.tagName.toLowerCase()) {
    case 'circle': return getCircleLength(el);
    case 'rect': return getRectLength(el);
    case 'line': return getLineLength(el);
    case 'polyline': return getPolylineLength(el);
    case 'polygon': return getPolygonLength(el);
  }
}

function setDashoffset(el) {
  var pathLength = getTotalLength(el);
  el.setAttribute('stroke-dasharray', pathLength);
  return pathLength;
}

// Motion path

function getParentSvgEl(el) {
  var parentEl = el.parentNode;
  while (is.svg(parentEl)) {
    if (!is.svg(parentEl.parentNode)) { break; }
    parentEl = parentEl.parentNode;
  }
  return parentEl;
}

function getParentSvg(pathEl, svgData) {
  var svg = svgData || {};
  var parentSvgEl = svg.el || getParentSvgEl(pathEl);
  var rect = parentSvgEl.getBoundingClientRect();
  var viewBoxAttr = getAttribute(parentSvgEl, 'viewBox');
  var width = rect.width;
  var height = rect.height;
  var viewBox = svg.viewBox || (viewBoxAttr ? viewBoxAttr.split(' ') : [0, 0, width, height]);
  return {
    el: parentSvgEl,
    viewBox: viewBox,
    x: viewBox[0] / 1,
    y: viewBox[1] / 1,
    w: width,
    h: height,
    vW: viewBox[2],
    vH: viewBox[3]
  }
}

function getPath(path, percent) {
  var pathEl = is.str(path) ? selectString(path)[0] : path;
  var p = percent || 100;
  return function(property) {
    return {
      property: property,
      el: pathEl,
      svg: getParentSvg(pathEl),
      totalLength: getTotalLength(pathEl) * (p / 100)
    }
  }
}

function getPathProgress(path, progress, isPathTargetInsideSVG) {
  function point(offset) {
    if ( offset === void 0 ) offset = 0;

    var l = progress + offset >= 1 ? progress + offset : 0;
    return path.el.getPointAtLength(l);
  }
  var svg = getParentSvg(path.el, path.svg);
  var p = point();
  var p0 = point(-1);
  var p1 = point(+1);
  var scaleX = isPathTargetInsideSVG ? 1 : svg.w / svg.vW;
  var scaleY = isPathTargetInsideSVG ? 1 : svg.h / svg.vH;
  switch (path.property) {
    case 'x': return (p.x - svg.x) * scaleX;
    case 'y': return (p.y - svg.y) * scaleY;
    case 'angle': return Math.atan2(p1.y - p0.y, p1.x - p0.x) * 180 / Math.PI;
  }
}

// Decompose value

function decomposeValue(val, unit) {
  // const rgx = /-?\d*\.?\d+/g; // handles basic numbers
  // const rgx = /[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?/g; // handles exponents notation
  var rgx = /[+-]?\d*\.?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?/g; // handles exponents notation
  var value = validateValue((is.pth(val) ? val.totalLength : val), unit) + '';
  return {
    original: value,
    numbers: value.match(rgx) ? value.match(rgx).map(Number) : [0],
    strings: (is.str(val) || unit) ? value.split(rgx) : []
  }
}

// Animatables

function parseTargets(targets) {
  var targetsArray = targets ? (flattenArray(is.arr(targets) ? targets.map(toArray) : toArray(targets))) : [];
  return filterArray(targetsArray, function (item, pos, self) { return self.indexOf(item) === pos; });
}

function getAnimatables(targets) {
  var parsed = parseTargets(targets);
  return parsed.map(function (t, i) {
    return {target: t, id: i, total: parsed.length, transforms: { list: getElementTransforms(t) } };
  });
}

// Properties

function normalizePropertyTweens(prop, tweenSettings) {
  var settings = cloneObject(tweenSettings);
  // Override duration if easing is a spring
  if (/^spring/.test(settings.easing)) { settings.duration = spring(settings.easing); }
  if (is.arr(prop)) {
    var l = prop.length;
    var isFromTo = (l === 2 && !is.obj(prop[0]));
    if (!isFromTo) {
      // Duration divided by the number of tweens
      if (!is.fnc(tweenSettings.duration)) { settings.duration = tweenSettings.duration / l; }
    } else {
      // Transform [from, to] values shorthand to a valid tween value
      prop = {value: prop};
    }
  }
  var propArray = is.arr(prop) ? prop : [prop];
  return propArray.map(function (v, i) {
    var obj = (is.obj(v) && !is.pth(v)) ? v : {value: v};
    // Default delay value should only be applied to the first tween
    if (is.und(obj.delay)) { obj.delay = !i ? tweenSettings.delay : 0; }
    // Default endDelay value should only be applied to the last tween
    if (is.und(obj.endDelay)) { obj.endDelay = i === propArray.length - 1 ? tweenSettings.endDelay : 0; }
    return obj;
  }).map(function (k) { return mergeObjects(k, settings); });
}


function flattenKeyframes(keyframes) {
  var propertyNames = filterArray(flattenArray(keyframes.map(function (key) { return Object.keys(key); })), function (p) { return is.key(p); })
  .reduce(function (a,b) { if (a.indexOf(b) < 0) { a.push(b); } return a; }, []);
  var properties = {};
  var loop = function ( i ) {
    var propName = propertyNames[i];
    properties[propName] = keyframes.map(function (key) {
      var newKey = {};
      for (var p in key) {
        if (is.key(p)) {
          if (p == propName) { newKey.value = key[p]; }
        } else {
          newKey[p] = key[p];
        }
      }
      return newKey;
    });
  };

  for (var i = 0; i < propertyNames.length; i++) loop( i );
  return properties;
}

function getProperties(tweenSettings, params) {
  var properties = [];
  var keyframes = params.keyframes;
  if (keyframes) { params = mergeObjects(flattenKeyframes(keyframes), params); }
  for (var p in params) {
    if (is.key(p)) {
      properties.push({
        name: p,
        tweens: normalizePropertyTweens(params[p], tweenSettings)
      });
    }
  }
  return properties;
}

// Tweens

function normalizeTweenValues(tween, animatable) {
  var t = {};
  for (var p in tween) {
    var value = getFunctionValue(tween[p], animatable);
    if (is.arr(value)) {
      value = value.map(function (v) { return getFunctionValue(v, animatable); });
      if (value.length === 1) { value = value[0]; }
    }
    t[p] = value;
  }
  t.duration = parseFloat(t.duration);
  t.delay = parseFloat(t.delay);
  return t;
}

function normalizeTweens(prop, animatable) {
  var previousTween;
  return prop.tweens.map(function (t) {
    var tween = normalizeTweenValues(t, animatable);
    var tweenValue = tween.value;
    var to = is.arr(tweenValue) ? tweenValue[1] : tweenValue;
    var toUnit = getUnit(to);
    var originalValue = getOriginalTargetValue(animatable.target, prop.name, toUnit, animatable);
    var previousValue = previousTween ? previousTween.to.original : originalValue;
    var from = is.arr(tweenValue) ? tweenValue[0] : previousValue;
    var fromUnit = getUnit(from) || getUnit(originalValue);
    var unit = toUnit || fromUnit;
    if (is.und(to)) { to = previousValue; }
    tween.from = decomposeValue(from, unit);
    tween.to = decomposeValue(getRelativeValue(to, from), unit);
    tween.start = previousTween ? previousTween.end : 0;
    tween.end = tween.start + tween.delay + tween.duration + tween.endDelay;
    tween.easing = parseEasings(tween.easing, tween.duration);
    tween.isPath = is.pth(tweenValue);
    tween.isPathTargetInsideSVG = tween.isPath && is.svg(animatable.target);
    tween.isColor = is.col(tween.from.original);
    if (tween.isColor) { tween.round = 1; }
    previousTween = tween;
    return tween;
  });
}

// Tween progress

var setProgressValue = {
  css: function (t, p, v) { return t.style[p] = v; },
  attribute: function (t, p, v) { return t.setAttribute(p, v); },
  object: function (t, p, v) { return t[p] = v; },
  transform: function (t, p, v, transforms, manual) {
    transforms.list.set(p, v);
    if (p === transforms.last || manual) {
      var str = '';
      transforms.list.forEach(function (value, prop) { str += prop + "(" + value + ") "; });
      t.style.transform = str;
    }
  }
};

// Set Value helper

function setTargetsValue(targets, properties) {
  var animatables = getAnimatables(targets);
  animatables.forEach(function (animatable) {
    for (var property in properties) {
      var value = getFunctionValue(properties[property], animatable);
      var target = animatable.target;
      var valueUnit = getUnit(value);
      var originalValue = getOriginalTargetValue(target, property, valueUnit, animatable);
      var unit = valueUnit || getUnit(originalValue);
      var to = getRelativeValue(validateValue(value, unit), originalValue);
      var animType = getAnimationType(target, property);
      setProgressValue[animType](target, property, to, animatable.transforms, true);
    }
  });
}

// Animations

function createAnimation(animatable, prop) {
  var animType = getAnimationType(animatable.target, prop.name);
  if (animType) {
    var tweens = normalizeTweens(prop, animatable);
    var lastTween = tweens[tweens.length - 1];
    return {
      type: animType,
      property: prop.name,
      animatable: animatable,
      tweens: tweens,
      duration: lastTween.end,
      delay: tweens[0].delay,
      endDelay: lastTween.endDelay
    }
  }
}

function getAnimations(animatables, properties) {
  return filterArray(flattenArray(animatables.map(function (animatable) {
    return properties.map(function (prop) {
      return createAnimation(animatable, prop);
    });
  })), function (a) { return !is.und(a); });
}

// Create Instance

function getInstanceTimings(animations, tweenSettings) {
  var animLength = animations.length;
  var getTlOffset = function (anim) { return anim.timelineOffset ? anim.timelineOffset : 0; };
  var timings = {};
  timings.duration = animLength ? Math.max.apply(Math, animations.map(function (anim) { return getTlOffset(anim) + anim.duration; })) : tweenSettings.duration;
  timings.delay = animLength ? Math.min.apply(Math, animations.map(function (anim) { return getTlOffset(anim) + anim.delay; })) : tweenSettings.delay;
  timings.endDelay = animLength ? timings.duration - Math.max.apply(Math, animations.map(function (anim) { return getTlOffset(anim) + anim.duration - anim.endDelay; })) : tweenSettings.endDelay;
  return timings;
}

var instanceID = 0;

function createNewInstance(params) {
  var instanceSettings = replaceObjectProps(defaultInstanceSettings, params);
  var tweenSettings = replaceObjectProps(defaultTweenSettings, params);
  var properties = getProperties(tweenSettings, params);
  var animatables = getAnimatables(params.targets);
  var animations = getAnimations(animatables, properties);
  var timings = getInstanceTimings(animations, tweenSettings);
  var id = instanceID;
  instanceID++;
  return mergeObjects(instanceSettings, {
    id: id,
    children: [],
    animatables: animatables,
    animations: animations,
    duration: timings.duration,
    delay: timings.delay,
    endDelay: timings.endDelay
  });
}

// Core

var activeInstances = [];

var engine = (function () {
  var raf;

  function play() {
    if (!raf && (!isDocumentHidden() || !anime.suspendWhenDocumentHidden) && activeInstances.length > 0) {
      raf = requestAnimationFrame(step);
    }
  }
  function step(t) {
    // memo on algorithm issue:
    // dangerous iteration over mutable `activeInstances`
    // (that collection may be updated from within callbacks of `tick`-ed animation instances)
    var activeInstancesLength = activeInstances.length;
    var i = 0;
    while (i < activeInstancesLength) {
      var activeInstance = activeInstances[i];
      if (!activeInstance.paused) {
        activeInstance.tick(t);
        i++;
      } else {
        activeInstances.splice(i, 1);
        activeInstancesLength--;
      }
    }
    raf = i > 0 ? requestAnimationFrame(step) : undefined;
  }

  function handleVisibilityChange() {
    if (!anime.suspendWhenDocumentHidden) { return; }

    if (isDocumentHidden()) {
      // suspend ticks
      raf = cancelAnimationFrame(raf);
    } else { // is back to active tab
      // first adjust animations to consider the time that ticks were suspended
      activeInstances.forEach(
        function (instance) { return instance ._onDocumentVisibility(); }
      );
      engine();
    }
  }
  if (typeof document !== 'undefined') {
    document.addEventListener('visibilitychange', handleVisibilityChange);
  }

  return play;
})();

function isDocumentHidden() {
  return !!document && document.hidden;
}

// Public Instance

function anime(params) {
  if ( params === void 0 ) params = {};


  var startTime = 0, lastTime = 0, now = 0;
  var children, childrenLength = 0;
  var resolve = null;

  function makePromise(instance) {
    var promise = window.Promise && new Promise(function (_resolve) { return resolve = _resolve; });
    instance.finished = promise;
    return promise;
  }

  var instance = createNewInstance(params);
  var promise = makePromise(instance);

  function toggleInstanceDirection() {
    var direction = instance.direction;
    if (direction !== 'alternate') {
      instance.direction = direction !== 'normal' ? 'normal' : 'reverse';
    }
    instance.reversed = !instance.reversed;
    children.forEach(function (child) { return child.reversed = instance.reversed; });
  }

  function adjustTime(time) {
    return instance.reversed ? instance.duration - time : time;
  }

  function resetTime() {
    startTime = 0;
    lastTime = adjustTime(instance.currentTime) * (1 / anime.speed);
  }

  function seekChild(time, child) {
    if (child) { child.seek(time - child.timelineOffset); }
  }

  function syncInstanceChildren(time) {
    if (!instance.reversePlayback) {
      for (var i = 0; i < childrenLength; i++) { seekChild(time, children[i]); }
    } else {
      for (var i$1 = childrenLength; i$1--;) { seekChild(time, children[i$1]); }
    }
  }

  function setAnimationsProgress(insTime) {
    var i = 0;
    var animations = instance.animations;
    var animationsLength = animations.length;
    while (i < animationsLength) {
      var anim = animations[i];
      var animatable = anim.animatable;
      var tweens = anim.tweens;
      var tweenLength = tweens.length - 1;
      var tween = tweens[tweenLength];
      // Only check for keyframes if there is more than one tween
      if (tweenLength) { tween = filterArray(tweens, function (t) { return (insTime < t.end); })[0] || tween; }
      var elapsed = minMax(insTime - tween.start - tween.delay, 0, tween.duration) / tween.duration;
      var eased = isNaN(elapsed) ? 1 : tween.easing(elapsed);
      var strings = tween.to.strings;
      var round = tween.round;
      var numbers = [];
      var toNumbersLength = tween.to.numbers.length;
      var progress = (void 0);
      for (var n = 0; n < toNumbersLength; n++) {
        var value = (void 0);
        var toNumber = tween.to.numbers[n];
        var fromNumber = tween.from.numbers[n] || 0;
        if (!tween.isPath) {
          value = fromNumber + (eased * (toNumber - fromNumber));
        } else {
          value = getPathProgress(tween.value, eased * toNumber, tween.isPathTargetInsideSVG);
        }
        if (round) {
          if (!(tween.isColor && n > 2)) {
            value = Math.round(value * round) / round;
          }
        }
        numbers.push(value);
      }
      // Manual Array.reduce for better performances
      var stringsLength = strings.length;
      if (!stringsLength) {
        progress = numbers[0];
      } else {
        progress = strings[0];
        for (var s = 0; s < stringsLength; s++) {
          var a = strings[s];
          var b = strings[s + 1];
          var n$1 = numbers[s];
          if (!isNaN(n$1)) {
            if (!b) {
              progress += n$1 + ' ';
            } else {
              progress += n$1 + b;
            }
          }
        }
      }
      setProgressValue[anim.type](animatable.target, anim.property, progress, animatable.transforms);
      anim.currentValue = progress;
      i++;
    }
  }

  function setCallback(cb) {
    if (instance[cb] && !instance.passThrough) { instance[cb](instance); }
  }

  function countIteration() {
    if (instance.remaining && instance.remaining !== true) {
      instance.remaining--;
    }
  }

  function setInstanceProgress(engineTime) {
    var insDuration = instance.duration;
    var insDelay = instance.delay;
    var insEndDelay = insDuration - instance.endDelay;
    var insTime = adjustTime(engineTime);
    instance.progress = minMax((insTime / insDuration) * 100, 0, 100);
    instance.reversePlayback = insTime < instance.currentTime;
    if (children) { syncInstanceChildren(insTime); }
    if (!instance.began && instance.currentTime > 0) {
      instance.began = true;
      setCallback('begin');
    }
    if (!instance.loopBegan && instance.currentTime > 0) {
      instance.loopBegan = true;
      setCallback('loopBegin');
    }
    if (insTime <= insDelay && instance.currentTime !== 0) {
      setAnimationsProgress(0);
    }
    if ((insTime >= insEndDelay && instance.currentTime !== insDuration) || !insDuration) {
      setAnimationsProgress(insDuration);
    }
    if (insTime > insDelay && insTime < insEndDelay) {
      if (!instance.changeBegan) {
        instance.changeBegan = true;
        instance.changeCompleted = false;
        setCallback('changeBegin');
      }
      setCallback('change');
      setAnimationsProgress(insTime);
    } else {
      if (instance.changeBegan) {
        instance.changeCompleted = true;
        instance.changeBegan = false;
        setCallback('changeComplete');
      }
    }
    instance.currentTime = minMax(insTime, 0, insDuration);
    if (instance.began) { setCallback('update'); }
    if (engineTime >= insDuration) {
      lastTime = 0;
      countIteration();
      if (!instance.remaining) {
        instance.paused = true;
        if (!instance.completed) {
          instance.completed = true;
          setCallback('loopComplete');
          setCallback('complete');
          if (!instance.passThrough && 'Promise' in window) {
            resolve();
            promise = makePromise(instance);
          }
        }
      } else {
        startTime = now;
        setCallback('loopComplete');
        instance.loopBegan = false;
        if (instance.direction === 'alternate') {
          toggleInstanceDirection();
        }
      }
    }
  }

  instance.reset = function() {
    var direction = instance.direction;
    instance.passThrough = false;
    instance.currentTime = 0;
    instance.progress = 0;
    instance.paused = true;
    instance.began = false;
    instance.loopBegan = false;
    instance.changeBegan = false;
    instance.completed = false;
    instance.changeCompleted = false;
    instance.reversePlayback = false;
    instance.reversed = direction === 'reverse';
    instance.remaining = instance.loop;
    children = instance.children;
    childrenLength = children.length;
    for (var i = childrenLength; i--;) { instance.children[i].reset(); }
    if (instance.reversed && instance.loop !== true || (direction === 'alternate' && instance.loop === 1)) { instance.remaining++; }
    setAnimationsProgress(instance.reversed ? instance.duration : 0);
  };

  // internal method (for engine) to adjust animation timings before restoring engine ticks (rAF)
  instance._onDocumentVisibility = resetTime;

  // Set Value helper

  instance.set = function(targets, properties) {
    setTargetsValue(targets, properties);
    return instance;
  };

  instance.tick = function(t) {
    now = t;
    if (!startTime) { startTime = now; }
    setInstanceProgress((now + (lastTime - startTime)) * anime.speed);
  };

  instance.seek = function(time) {
    setInstanceProgress(adjustTime(time));
  };

  instance.pause = function() {
    instance.paused = true;
    resetTime();
  };

  instance.play = function() {
    if (!instance.paused) { return; }
    if (instance.completed) { instance.reset(); }
    instance.paused = false;
    activeInstances.push(instance);
    resetTime();
    engine();
  };

  instance.reverse = function() {
    toggleInstanceDirection();
    instance.completed = instance.reversed ? false : true;
    resetTime();
  };

  instance.restart = function() {
    instance.reset();
    instance.play();
  };

  instance.remove = function(targets) {
    var targetsArray = parseTargets(targets);
    removeTargetsFromInstance(targetsArray, instance);
  };

  instance.reset();

  if (instance.autoplay) { instance.play(); }

  return instance;

}

// Remove targets from animation

function removeTargetsFromAnimations(targetsArray, animations) {
  for (var a = animations.length; a--;) {
    if (arrayContains(targetsArray, animations[a].animatable.target)) {
      animations.splice(a, 1);
    }
  }
}

function removeTargetsFromInstance(targetsArray, instance) {
  var animations = instance.animations;
  var children = instance.children;
  removeTargetsFromAnimations(targetsArray, animations);
  for (var c = children.length; c--;) {
    var child = children[c];
    var childAnimations = child.animations;
    removeTargetsFromAnimations(targetsArray, childAnimations);
    if (!childAnimations.length && !child.children.length) { children.splice(c, 1); }
  }
  if (!animations.length && !children.length) { instance.pause(); }
}

function removeTargetsFromActiveInstances(targets) {
  var targetsArray = parseTargets(targets);
  for (var i = activeInstances.length; i--;) {
    var instance = activeInstances[i];
    removeTargetsFromInstance(targetsArray, instance);
  }
}

// Stagger helpers

function stagger(val, params) {
  if ( params === void 0 ) params = {};

  var direction = params.direction || 'normal';
  var easing = params.easing ? parseEasings(params.easing) : null;
  var grid = params.grid;
  var axis = params.axis;
  var fromIndex = params.from || 0;
  var fromFirst = fromIndex === 'first';
  var fromCenter = fromIndex === 'center';
  var fromLast = fromIndex === 'last';
  var isRange = is.arr(val);
  var val1 = isRange ? parseFloat(val[0]) : parseFloat(val);
  var val2 = isRange ? parseFloat(val[1]) : 0;
  var unit = getUnit(isRange ? val[1] : val) || 0;
  var start = params.start || 0 + (isRange ? val1 : 0);
  var values = [];
  var maxValue = 0;
  return function (el, i, t) {
    if (fromFirst) { fromIndex = 0; }
    if (fromCenter) { fromIndex = (t - 1) / 2; }
    if (fromLast) { fromIndex = t - 1; }
    if (!values.length) {
      for (var index = 0; index < t; index++) {
        if (!grid) {
          values.push(Math.abs(fromIndex - index));
        } else {
          var fromX = !fromCenter ? fromIndex%grid[0] : (grid[0]-1)/2;
          var fromY = !fromCenter ? Math.floor(fromIndex/grid[0]) : (grid[1]-1)/2;
          var toX = index%grid[0];
          var toY = Math.floor(index/grid[0]);
          var distanceX = fromX - toX;
          var distanceY = fromY - toY;
          var value = Math.sqrt(distanceX * distanceX + distanceY * distanceY);
          if (axis === 'x') { value = -distanceX; }
          if (axis === 'y') { value = -distanceY; }
          values.push(value);
        }
        maxValue = Math.max.apply(Math, values);
      }
      if (easing) { values = values.map(function (val) { return easing(val / maxValue) * maxValue; }); }
      if (direction === 'reverse') { values = values.map(function (val) { return axis ? (val < 0) ? val * -1 : -val : Math.abs(maxValue - val); }); }
    }
    var spacing = isRange ? (val2 - val1) / maxValue : val1;
    return start + (spacing * (Math.round(values[i] * 100) / 100)) + unit;
  }
}

// Timeline

function timeline(params) {
  if ( params === void 0 ) params = {};

  var tl = anime(params);
  tl.duration = 0;
  tl.add = function(instanceParams, timelineOffset) {
    var tlIndex = activeInstances.indexOf(tl);
    var children = tl.children;
    if (tlIndex > -1) { activeInstances.splice(tlIndex, 1); }
    function passThrough(ins) { ins.passThrough = true; }
    for (var i = 0; i < children.length; i++) { passThrough(children[i]); }
    var insParams = mergeObjects(instanceParams, replaceObjectProps(defaultTweenSettings, params));
    insParams.targets = insParams.targets || params.targets;
    var tlDuration = tl.duration;
    insParams.autoplay = false;
    insParams.direction = tl.direction;
    insParams.timelineOffset = is.und(timelineOffset) ? tlDuration : getRelativeValue(timelineOffset, tlDuration);
    passThrough(tl);
    tl.seek(insParams.timelineOffset);
    var ins = anime(insParams);
    passThrough(ins);
    children.push(ins);
    var timings = getInstanceTimings(children, params);
    tl.delay = timings.delay;
    tl.endDelay = timings.endDelay;
    tl.duration = timings.duration;
    tl.seek(0);
    tl.reset();
    if (tl.autoplay) { tl.play(); }
    return tl;
  };
  return tl;
}

anime.version = '3.2.1';
anime.speed = 1;
// TODO:#review: naming, documentation
anime.suspendWhenDocumentHidden = true;
anime.running = activeInstances;
anime.remove = removeTargetsFromActiveInstances;
anime.get = getOriginalTargetValue;
anime.set = setTargetsValue;
anime.convertPx = convertPxToUnit;
anime.path = getPath;
anime.setDashoffset = setDashoffset;
anime.stagger = stagger;
anime.timeline = timeline;
anime.easing = parseEasings;
anime.penner = penner;
anime.random = function (min, max) { return Math.floor(Math.random() * (max - min + 1)) + min; };

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (anime);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/BImage.scss":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/BImage.scss ***!
  \****************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ./Imgs/aziz-acharki-gXndgCS-CGo-unsplash.jpg */ "./src/ns/design/Imgs/aziz-acharki-gXndgCS-CGo-unsplash.jpg"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".banner-image {\n  position: absolute;\n  top: 0px;\n  width: 100rem;\n  height: 730px;\n  z-index: -1;\n  background-image: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ");\n  background-attachment: fixed;\n  background-repeat: no-repeat;\n  background-size: cover;\n}", "",{"version":3,"sources":["webpack://./src/ns/design/BImage.scss"],"names":[],"mappings":"AAEA;EACI,kBAAA;EACA,QAAA;EACA,aAAA;EACA,aAAA;EACA,WAAA;EAEA,yDAAA;EACA,4BAAA;EACA,4BAAA;EACA,sBAAA;AAFJ","sourcesContent":["\r\n\r\n.banner-image {\r\n    position: absolute;\r\n    top: 0px;\r\n    width: 100rem;\r\n    height: calc(600px + 130px);\r\n    z-index: -1;\r\n    // background-color: rgba(0, 0, 0, 0.171);\r\n    background-image: url(\"./Imgs/aziz-acharki-gXndgCS-CGo-unsplash.jpg\");\r\n    background-attachment: fixed;\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/Banner.scss":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/Banner.scss ***!
  \****************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2 */ "./src/ns/design/fonts/WixMadeforTextVF_W_Wght.8022447a.woff2"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "@font-face {\n  font-family: Wixy;\n  src: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ") format(\"woff\");\n}\n/**\n     Common Mixins\n**/\nns-x-banner {\n  display: block;\n  width: 100%;\n}\n\nns-x-banner .ponaco-splitview-1 {\n  height: 600px;\n  border: 1px solid rgba(0, 0, 0, 0);\n  width: 100%;\n  font-family: Wixy;\n}\nns-x-banner .ponaco-splitview-1 .wx-component-user-section {\n  width: 100%;\n  height: 550px;\n  transition: all 1.5s;\n}\nns-x-banner .ponaco-splitview-1 .wx-component-user-section .welcome-note-section {\n  border-left: 2px solid white;\n  width: fit-content;\n  transition: all 1.5s ease;\n  margin-top: 150px;\n  padding-left: 30px;\n  margin-left: 30px;\n  opacity: 0;\n  transform: translateX(-100px);\n}\nns-x-banner .ponaco-splitview-1 .wx-component-user-section .welcome-note-section .note-1 {\n  color: #fff;\n  word-wrap: break-word;\n  transition: all 1.5s;\n  width: 700px;\n  font-size: 60pt;\n  margin-bottom: 10px;\n}\nns-x-banner .ponaco-splitview-1 .wx-component-user-section .welcome-note-section .note-2 {\n  color: rgba(255, 255, 255, 0.8431372549);\n  text-transform: capitalize;\n  transition: all 1.5s;\n  font-size: 16pt;\n  margin-bottom: 10px;\n}", "",{"version":3,"sources":["webpack://./src/ns/design/Variables.scss","webpack://./src/ns/design/Banner.scss"],"names":[],"mappings":"AAAA;EACI,iBAAA;EACA,2DAAA;ACCJ;ADKA;;EAAA;ACAA;EACI,cAAA;EACA,WAAA;AAAJ;;AAGA;EACI,aAAA;EACA,kCAAA;EACA,WAAA;EACA,iBDXc;ACWlB;AAEI;EACI,WAAA;EACA,aAAA;EACA,oBAAA;AAAR;AAEQ;EACI,4BAAA;EACA,kBAAA;EACA,yBAAA;EACA,iBAAA;EACA,kBAAA;EACA,iBAAA;EACA,UAAA;EACA,6BAAA;AAAZ;AAEY;EACI,WAAA;EACA,qBAAA;EACA,oBAAA;EACA,YAAA;EACA,eAAA;EACA,mBAAA;AAAhB;AAGY;EACI,wCAAA;EACA,0BAAA;EACA,oBAAA;EAEA,eAAA;EACA,mBAAA;AAFhB","sourcesContent":["@font-face {\r\n    font-family: Wixy;\r\n    src: url(\"./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2\") format(\"woff\");\r\n}\r\n\r\n$ns-layout-color : #00a4e0;\r\n$ns-common-font : Wixy;\r\n\r\n/**\r\n     Common Mixins\r\n**/\r\n\r\n@mixin common_btn {\r\n    @include button();\r\n    @include center();\r\n    background-color: $ns-layout-color;\r\n    border: 1px solid $ns-layout-color;\r\n    font-weight: 350;\r\n    color: #fff;\r\n    transition: all .5s;\r\n    &:hover{\r\n        color: #000;\r\n        background-color: unset;\r\n    }\r\n}\r\n\r\n\r\n@mixin center {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n@mixin button {\r\n    height: 50px;\r\n    width: 160px;\r\n    border-radius: 10px;\r\n}\r\n\r\n@mixin flex-box {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\n@mixin flex-grid {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}","@use \"./Variables.scss\"as V;\r\n\r\n//Welcome Note Animation \r\n\r\n\r\n\r\n\r\n\r\nns-x-banner {\r\n    display: block;\r\n    width: 100%;\r\n}\r\n\r\nns-x-banner .ponaco-splitview-1 {\r\n    height: 600px;\r\n    border: 1px solid rgba(0, 0, 0, 0);\r\n    width: 100%;\r\n    font-family: V.$ns-common-font;\r\n\r\n    .wx-component-user-section {\r\n        width: 100%;\r\n        height: 550px;\r\n        transition: all 1.5s;\r\n\r\n        .welcome-note-section {\r\n            border-left: 2px solid white;\r\n            width: fit-content;\r\n            transition: all 1.5s ease;\r\n            margin-top: 150px;\r\n            padding-left: 30px;\r\n            margin-left: 30px;\r\n            opacity: 0;\r\n            transform: translateX(-100px);\r\n\r\n            .note-1 {\r\n                color: #fff;\r\n                word-wrap: break-word;\r\n                transition: all 1.5s;\r\n                width: 700px;\r\n                font-size: 60pt;\r\n                margin-bottom: 10px;\r\n            }\r\n\r\n            .note-2 {\r\n                color: #ffffffd7;\r\n                text-transform: capitalize;\r\n                transition: all 1.5s;\r\n\r\n                font-size: 16pt;\r\n                margin-bottom: 10px;\r\n            }\r\n        }\r\n    }\r\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/Enrollbtn.scss":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/Enrollbtn.scss ***!
  \*******************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2 */ "./src/ns/design/fonts/WixMadeforTextVF_W_Wght.8022447a.woff2"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "@font-face {\n  font-family: Wixy;\n  src: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ") format(\"woff\");\n}\n/**\n     Common Mixins\n**/\nns-enroll-button {\n  display: block;\n}\nns-enroll-button .enroll-ns-button {\n  cursor: pointer;\n  border: 2px solid #00a4e0;\n  color: #fff;\n  transition: all 0.5s;\n  background-color: #00a4e0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 50px;\n  width: 160px;\n  border-radius: 10px;\n}\nns-enroll-button .enroll-ns-button:hover {\n  background-color: unset;\n  color: #fff;\n  text-decoration: underline;\n  line-height: 10px;\n}\nns-enroll-button .enroll-ns-button:active {\n  transform: scale(0.8);\n}", "",{"version":3,"sources":["webpack://./src/ns/design/Variables.scss","webpack://./src/ns/design/Enrollbtn.scss"],"names":[],"mappings":"AAAA;EACI,iBAAA;EACA,2DAAA;ACCJ;ADKA;;EAAA;ACNA;EACI,cAAA;AAMJ;AALI;EACI,eAAA;EACA,yBAAA;EACA,WAAA;EACA,oBAAA;EACA,yBDJW;EAuBf,aAAA;EACA,mBAAA;EACA,uBAAA;EAIA,YAAA;EACA,YAAA;EACA,mBAAA;ACdJ;AAVQ;EACI,uBAAA;EACA,WAAA;EACA,0BAAA;EACA,iBAAA;AAYZ;AAVQ;EACI,qBAAA;AAYZ","sourcesContent":["@font-face {\r\n    font-family: Wixy;\r\n    src: url(\"./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2\") format(\"woff\");\r\n}\r\n\r\n$ns-layout-color : #00a4e0;\r\n$ns-common-font : Wixy;\r\n\r\n/**\r\n     Common Mixins\r\n**/\r\n\r\n@mixin common_btn {\r\n    @include button();\r\n    @include center();\r\n    background-color: $ns-layout-color;\r\n    border: 1px solid $ns-layout-color;\r\n    font-weight: 350;\r\n    color: #fff;\r\n    transition: all .5s;\r\n    &:hover{\r\n        color: #000;\r\n        background-color: unset;\r\n    }\r\n}\r\n\r\n\r\n@mixin center {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n@mixin button {\r\n    height: 50px;\r\n    width: 160px;\r\n    border-radius: 10px;\r\n}\r\n\r\n@mixin flex-box {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\n@mixin flex-grid {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}","@use \"./Variables\" as V;\r\n\r\nns-enroll-button {\r\n    display: block;\r\n    .enroll-ns-button{\r\n        cursor: pointer;\r\n        border: 2px solid V.$ns-layout-color;\r\n        color: #fff;\r\n        transition: all .5s;\r\n        background-color: V.$ns-layout-color;\r\n        @include V.center();\r\n        @include V.button();\r\n        &:hover{\r\n            background-color: unset;\r\n            color: #fff;\r\n            text-decoration: underline;\r\n            line-height: 10px;\r\n        }\r\n        &:active{\r\n            transform: scale(0.8);\r\n        }\r\n\r\n    }\r\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/Faq.scss":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/Faq.scss ***!
  \*************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2 */ "./src/ns/design/fonts/WixMadeforTextVF_W_Wght.8022447a.woff2"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "@font-face {\n  font-family: Wixy;\n  src: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ") format(\"woff\");\n}\n/**\n     Common Mixins\n**/\n.main-faqcomponent {\n  background-color: #d1d1d1;\n  padding: 15% 0 15% 0;\n  font-family: Wixy;\n}\n.main-faqcomponent .main-content-layout h2 {\n  font-size: 35pt;\n  text-align: center;\n  margin-bottom: 30px;\n}\n.main-faqcomponent .main-content-layout .content-slider .info-slider-1 {\n  margin: auto;\n  border-bottom: 1px solid #000;\n  padding: 15px 0 15px 0;\n  width: 90%;\n}\n.main-faqcomponent .main-content-layout .content-slider .info-slider-1 .initial-display-1 p {\n  text-align: center;\n  font-size: 20pt;\n}\n.main-faqcomponent .main-content-layout .content-slider .info-slider-1 .slider-expand-section {\n  display: none;\n}\n.main-faqcomponent .main-content-layout .content-slider .info-slider-1 .slider-expand-section p {\n  font-size: 20pt;\n  text-align: center;\n}\n.main-faqcomponent .main-content-layout .content-slider .info-slider-1 .slider-expand-section:hover {\n  display: block;\n  position: relative;\n  top: auto;\n  margin: 10px;\n  padding: 10px;\n}\n.main-faqcomponent .main-content-layout .content-slider .info-slider-1:hover {\n  border: none;\n}\n.main-faqcomponent .main-content-layout .content-slider .info-slider-1:hover .slider-expand-section {\n  display: block;\n  position: relative;\n  top: auto;\n  margin: 20px;\n  padding: 10px;\n  background-color: #000;\n  color: #d1d1d1;\n}", "",{"version":3,"sources":["webpack://./src/ns/design/Variables.scss","webpack://./src/ns/design/Faq.scss"],"names":[],"mappings":"AAAA;EACI,iBAAA;EACA,2DAAA;ACCJ;ADKA;;EAAA;ACNA;EACI,yBAAA;EACA,oBAAA;EACA,iBDCc;ACKlB;AAHQ;EACI,eAAA;EACA,kBAAA;EACA,mBAAA;AAKZ;AADY;EACI,YAAA;EACA,6BAAA;EACA,sBAAA;EACA,UAAA;AAGhB;AAAoB;EACI,kBAAA;EACA,eAAA;AAExB;AAEgB;EACI,aAAA;AAApB;AACoB;EACI,eAAA;EACA,kBAAA;AACxB;AAGgB;EACI,cAAA;EACA,kBAAA;EACA,SAAA;EACA,YAAA;EACA,aAAA;AADpB;AAKgB;EACI,YAAA;AAHpB;AAKoB;EACI,cAAA;EACA,kBAAA;EACA,SAAA;EACA,YAAA;EACA,aAAA;EACA,sBAAA;EACA,cAAA;AAHxB","sourcesContent":["@font-face {\r\n    font-family: Wixy;\r\n    src: url(\"./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2\") format(\"woff\");\r\n}\r\n\r\n$ns-layout-color : #00a4e0;\r\n$ns-common-font : Wixy;\r\n\r\n/**\r\n     Common Mixins\r\n**/\r\n\r\n@mixin common_btn {\r\n    @include button();\r\n    @include center();\r\n    background-color: $ns-layout-color;\r\n    border: 1px solid $ns-layout-color;\r\n    font-weight: 350;\r\n    color: #fff;\r\n    transition: all .5s;\r\n    &:hover{\r\n        color: #000;\r\n        background-color: unset;\r\n    }\r\n}\r\n\r\n\r\n@mixin center {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n@mixin button {\r\n    height: 50px;\r\n    width: 160px;\r\n    border-radius: 10px;\r\n}\r\n\r\n@mixin flex-box {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\n@mixin flex-grid {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}","@use \"./Variables.scss\"as V;\r\n\r\n.main-faqcomponent {\r\n    background-color: #d1d1d1;\r\n    padding: 15% 0 15% 0;\r\n    font-family: V.$ns-common-font;\r\n\r\n    .main-content-layout {\r\n        h2 {\r\n            font-size: 35pt;\r\n            text-align: center;\r\n            margin-bottom: 30px;\r\n        }\r\n\r\n        .content-slider {\r\n            .info-slider-1 {\r\n                margin: auto;\r\n                border-bottom: 1px solid #000;\r\n                padding: 15px 0 15px 0;\r\n                width: 90%;\r\n\r\n                .initial-display-1 {\r\n                    p {\r\n                        text-align: center;\r\n                        font-size: 20pt;\r\n                    }\r\n                }\r\n\r\n                .slider-expand-section {\r\n                    display: none;\r\n                    p {\r\n                        font-size: 20pt;\r\n                        text-align: center;\r\n                    }\r\n                }\r\n\r\n                .slider-expand-section:hover {\r\n                    display: block;\r\n                    position: relative;\r\n                    top: auto;\r\n                    margin: 10px;\r\n                    padding: 10px;\r\n                }\r\n\r\n\r\n                &:hover {\r\n                    border: none;\r\n\r\n                    .slider-expand-section {\r\n                        display: block;\r\n                        position: relative;\r\n                        top: auto;\r\n                        margin: 20px;\r\n                        padding: 10px;\r\n                        background-color: #000;\r\n                        color: #d1d1d1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/Footer.scss":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/Footer.scss ***!
  \****************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2 */ "./src/ns/design/fonts/WixMadeforTextVF_W_Wght.8022447a.woff2"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "@font-face {\n  font-family: Wixy;\n  src: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ") format(\"woff\");\n}\n/**\n     Common Mixins\n**/\n.ponaco-footer {\n  background-color: #131212;\n  width: 100%;\n}\n.ponaco-footer .ponaco-main-component {\n  padding: 50px 0 0 0;\n  font-family: Wixy;\n}\n.ponaco-footer .ponaco-main-component .tab-section-1 {\n  color: #fff;\n  text-align: center;\n}\n.ponaco-footer .ponaco-main-component .tab-section-1 h2 {\n  margin: 5px;\n  padding: 0;\n  font-size: 28pt;\n}\n.ponaco-footer .ponaco-main-component .tab-section-1 p {\n  margin: 0;\n  padding-bottom: 20px;\n  font-size: 15pt;\n}\n.ponaco-footer .ponaco-main-component hr {\n  margin: 15px;\n  border-color: #fff;\n}\n.ponaco-footer .ponaco-main-component .content-splitview {\n  color: #bdbcbc;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  grid-template-rows: 1fr;\n  text-align: center;\n}\n.ponaco-footer .ponaco-main-component .content-splitview .splitview-1 {\n  margin: 10px;\n}\n.ponaco-footer .ponaco-main-component .content-splitview .splitview-1 h2 {\n  color: #fff;\n  margin: 5px;\n  font-size: 20pt;\n}\n.ponaco-footer .ponaco-main-component .content-splitview .splitview-1 p {\n  margin: 25px;\n  font-size: 17pt;\n}\n.ponaco-footer .ponaco-main-component .content-splitview .splitview-1 p:hover {\n  color: aqua;\n  text-decoration: underline;\n}\n.ponaco-footer .ponaco-main-component .content-splitview .splitview-2 {\n  margin: 10px 20px 10px 10px;\n}\n.ponaco-footer .ponaco-main-component .content-splitview .splitview-2 .accord-options {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n.ponaco-footer .ponaco-main-component .content-splitview .splitview-2 .accord-options .control-options {\n  display: flex;\n  flex-direction: column;\n}\n.ponaco-footer .ponaco-main-component .content-splitview .splitview-2 .accord-options .control-options > div {\n  color: var(--ns-text-color);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 20pt;\n  width: 50px;\n  height: 50px;\n  cursor: pointer;\n  transition: all 0.5s;\n}\n.ponaco-footer .ponaco-main-component .content-splitview .splitview-2 .accord-options .control-options > div:hover {\n  color: #00a4e0;\n}\n.ponaco-footer .ponaco-main-component .content-splitview .splitview-2 .accord-options .control-options .theme-manager {\n  margin-left: 20px;\n}\n.ponaco-footer .ponaco-main-component .content-splitview .splitview-2 .accord-options .control-options .theme-manager:hover {\n  color: #000000;\n}\n.ponaco-footer .ponaco-main-component .content-splitview .splitview-2 .accord-options .control-bars {\n  display: none;\n}\n.ponaco-footer .ponaco-main-component .copyrighted {\n  color: #bdbcbc;\n  text-align: center;\n  padding: 60px;\n  font-size: 15pt;\n}", "",{"version":3,"sources":["webpack://./src/ns/design/Variables.scss","webpack://./src/ns/design/Footer.scss"],"names":[],"mappings":"AAAA;EACI,iBAAA;EACA,2DAAA;ACCJ;ADKA;;EAAA;ACNA;EACI,yBAAA;EACA,WAAA;AAMJ;AAJI;EACI,mBAAA;EACA,iBDFU;ACQlB;AAJQ;EACI,WAAA;EACA,kBAAA;AAMZ;AALY;EACI,WAAA;EACA,UAAA;EACA,eAAA;AAOhB;AALY;EACI,SAAA;EACA,oBAAA;EACA,eAAA;AAOhB;AAHQ;EACI,YAAA;EACA,kBAAA;AAKZ;AAFQ;EACI,cAAA;EACA,aAAA;EACA,sCAAA;EACA,uBAAA;EACA,kBAAA;AAIZ;AAFY;EACI,YAAA;AAIhB;AAFgB;EACI,WAAA;EACA,WAAA;EACA,eAAA;AAIpB;AADgB;EACI,YAAA;EACA,eAAA;AAGpB;AAFoB;EACI,WAAA;EACA,0BAAA;AAIxB;AACY;EACI,2BAAA;AAChB;AACgB;EACI,aAAA;EACA,mBAAA;EACA,uBAAA;AACpB;AAAoB;EACI,aAAA;EACA,sBAAA;AAExB;AADwB;EACI,2BAAA;EACA,aAAA;EACA,mBAAA;EACA,uBAAA;EACA,eAAA;EACA,WAAA;EACA,YAAA;EACA,eAAA;EACA,oBAAA;AAG5B;AAF4B;EACI,cDxEb;AC4EnB;AADwB;EACI,iBAAA;AAG5B;AAF4B;EACI,cAAA;AAIhC;AACoB;EACI,aAAA;AACxB;AAMQ;EACI,cAAA;EACA,kBAAA;EACA,aAAA;EACA,eAAA;AAJZ","sourcesContent":["@font-face {\r\n    font-family: Wixy;\r\n    src: url(\"./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2\") format(\"woff\");\r\n}\r\n\r\n$ns-layout-color : #00a4e0;\r\n$ns-common-font : Wixy;\r\n\r\n/**\r\n     Common Mixins\r\n**/\r\n\r\n@mixin common_btn {\r\n    @include button();\r\n    @include center();\r\n    background-color: $ns-layout-color;\r\n    border: 1px solid $ns-layout-color;\r\n    font-weight: 350;\r\n    color: #fff;\r\n    transition: all .5s;\r\n    &:hover{\r\n        color: #000;\r\n        background-color: unset;\r\n    }\r\n}\r\n\r\n\r\n@mixin center {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n@mixin button {\r\n    height: 50px;\r\n    width: 160px;\r\n    border-radius: 10px;\r\n}\r\n\r\n@mixin flex-box {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\n@mixin flex-grid {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}","@use \"./Variables.scss\"as V;\r\n\r\n.ponaco-footer {\r\n    background-color: #131212;\r\n    width: 100%;\r\n\r\n    .ponaco-main-component {\r\n        padding: 50px 0 0 0;\r\n        font-family: V.$ns-common-font;\r\n\r\n        .tab-section-1 {\r\n            color: #fff;\r\n            text-align: center;\r\n            h2 {\r\n                margin: 5px;\r\n                padding: 0;\r\n                font-size: 28pt;\r\n            }\r\n            p {\r\n                margin: 0;\r\n                padding-bottom: 20px;\r\n                font-size: 15pt;\r\n            }\r\n        }\r\n\r\n        hr {\r\n            margin: 15px;\r\n            border-color: #fff;\r\n        }\r\n\r\n        .content-splitview {\r\n            color: #bdbcbc;\r\n            display: grid;\r\n            grid-template-columns: 1fr 1fr 1fr 1fr;\r\n            grid-template-rows: 1fr;\r\n            text-align: center;\r\n\r\n            .splitview-1 {\r\n                margin: 10px;\r\n                \r\n                h2 {\r\n                    color: #fff;\r\n                    margin: 5px;\r\n                    font-size: 20pt;\r\n                }\r\n\r\n                p {\r\n                    margin: 25px;\r\n                    font-size: 17pt;\r\n                    &:hover {\r\n                        color: aqua;\r\n                        text-decoration: underline;\r\n                    }\r\n                }\r\n\r\n            }\r\n            .splitview-2 {\r\n                margin: 10px 20px 10px 10px;\r\n\r\n                .accord-options {\r\n                    display: flex;\r\n                    align-items: center;\r\n                    justify-content: center;\r\n                    .control-options {\r\n                        display: flex;\r\n                        flex-direction: column;\r\n                        >div {\r\n                            color: var(--ns-text-color);\r\n                            display: flex;\r\n                            align-items: center;\r\n                            justify-content: center;\r\n                            font-size: 20pt;\r\n                            width: 50px;\r\n                            height: 50px;\r\n                            cursor: pointer;\r\n                            transition: all .5s;\r\n                            &:hover{\r\n                                color: V.$ns-layout-color;\r\n                            }\r\n                        }\r\n                        .theme-manager {\r\n                            margin-left: 20px;\r\n                            &:hover {\r\n                                color: #000000;\r\n                            }\r\n    \r\n                        }\r\n                    }\r\n                    .control-bars{\r\n                        display: none;\r\n    \r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        .copyrighted {\r\n            color: #bdbcbc;\r\n            text-align: center;\r\n            padding: 60px;\r\n            font-size: 15pt;\r\n        }\r\n    }\r\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/Glance.scss":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/Glance.scss ***!
  \****************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2 */ "./src/ns/design/fonts/WixMadeforTextVF_W_Wght.8022447a.woff2"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "@font-face {\n  font-family: Wixy;\n  src: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ") format(\"woff\");\n}\n/**\n     Common Mixins\n**/\nns-x-glance {\n  display: block;\n}\n\nns-x-glance .xb-glance-component {\n  width: 100%;\n  height: fit-content;\n}\n\nns-x-glance .xb-glance-component {\n  font-family: Wixy;\n}\nns-x-glance .xb-glance-component .xb-wrapper {\n  width: 100%;\n  height: auto;\n}\nns-x-glance .xb-glance-component .xb-wrapper .tr-split-view {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n}\nns-x-glance .xb-glance-component .xb-wrapper .tr-split-view .tr-view-1 {\n  border-right: 1px solid gray;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\nns-x-glance .xb-glance-component .xb-wrapper .tr-split-view .tr-view-1 .tr-view-1-wrapper {\n  display: grid;\n  grid-template-rows: 120px 120px 120px;\n}\nns-x-glance .xb-glance-component .xb-wrapper .tr-split-view .tr-view-1 .tr-view-1-wrapper .tr-data-cpr {\n  width: 500px;\n  display: flex;\n  align-items: center;\n}\nns-x-glance .xb-glance-component .xb-wrapper .tr-split-view .tr-view-1 .tr-view-1-wrapper .tr-data-cpr .cpr-wrapper .cl-title {\n  font-size: 25pt;\n}\nns-x-glance .xb-glance-component .xb-wrapper .tr-split-view .tr-view-1 .tr-view-1-wrapper .tr-data-cpr .cpr-wrapper .cl-title .cl-title-wrapper {\n  margin-bottom: 5px;\n}\nns-x-glance .xb-glance-component .xb-wrapper .tr-split-view .tr-view-1 .tr-view-1-wrapper .tr-data-cpr .cpr-wrapper .cl-figure {\n  color: rgba(0, 0, 0, 0.753);\n  font-size: 18pt;\n}\nns-x-glance .xb-glance-component .xb-wrapper .tr-split-view .tr-view-2 .tr-view-2-wrapper {\n  width: 500px;\n}\nns-x-glance .xb-glance-component .xb-wrapper .tr-split-view .tr-view-2 .tr-view-2-wrapper .cl-title-area {\n  margin-left: 50px;\n  font-size: 30pt;\n}\nns-x-glance .xb-glance-component .xb-wrapper .tr-split-view .tr-view-2 .tr-view-2-wrapper .cl-picture-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 400px;\n  width: 600px;\n  margin-left: 50px;\n  background-size: cover;\n  background-repeat: no-repeat;\n}", "",{"version":3,"sources":["webpack://./src/ns/design/Variables.scss","webpack://./src/ns/design/Glance.scss"],"names":[],"mappings":"AAAA;EACI,iBAAA;EACA,2DAAA;ACCJ;ADKA;;EAAA;ACNA;EACI,cAAA;AAMJ;;AAHA;EACI,WAAA;EACA,mBAAA;AAMJ;;AAHA;EACI,iBDNc;ACYlB;AAJI;EACI,WAAA;EACA,YAAA;AAMR;AAJQ;EACI,aAAA;EACA,8BAAA;AAMZ;AAHY;EACI,4BAAA;EACA,aAAA;EACA,mBAAA;EACA,uBAAA;AAKhB;AAHgB;EACI,aAAA;EACA,qCAAA;AAKpB;AAHoB;EACI,YAAA;EACA,aAAA;EACA,mBAAA;AAKxB;AAH4B;EACI,eAAA;AAKhC;AAJgC;EACI,kBAAA;AAMpC;AAH4B;EACI,2BAAA;EACA,eAAA;AAKhC;AAGgB;EACI,YAAA;AADpB;AAEoB;EACI,iBAAA;EACA,eAAA;AAAxB;AAEoB;EACI,aAAA;EACA,mBAAA;EACA,uBAAA;EACA,aAAA;EACA,YAAA;EACA,iBAAA;EACA,sBAAA;EACA,4BAAA;AAAxB","sourcesContent":["@font-face {\r\n    font-family: Wixy;\r\n    src: url(\"./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2\") format(\"woff\");\r\n}\r\n\r\n$ns-layout-color : #00a4e0;\r\n$ns-common-font : Wixy;\r\n\r\n/**\r\n     Common Mixins\r\n**/\r\n\r\n@mixin common_btn {\r\n    @include button();\r\n    @include center();\r\n    background-color: $ns-layout-color;\r\n    border: 1px solid $ns-layout-color;\r\n    font-weight: 350;\r\n    color: #fff;\r\n    transition: all .5s;\r\n    &:hover{\r\n        color: #000;\r\n        background-color: unset;\r\n    }\r\n}\r\n\r\n\r\n@mixin center {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n@mixin button {\r\n    height: 50px;\r\n    width: 160px;\r\n    border-radius: 10px;\r\n}\r\n\r\n@mixin flex-box {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\n@mixin flex-grid {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}","@use \"./Variables.scss\" as V;\r\n\r\nns-x-glance {\r\n    display: block;\r\n}\r\n\r\nns-x-glance .xb-glance-component {\r\n    width: 100%;\r\n    height: fit-content;\r\n}\r\n\r\nns-x-glance .xb-glance-component {\r\n    font-family: V.$ns-common-font;\r\n\r\n    .xb-wrapper {\r\n        width: 100%;\r\n        height: auto;\r\n\r\n        .tr-split-view {\r\n            display: grid;\r\n            grid-template-columns: 1fr 1fr;\r\n\r\n\r\n            .tr-view-1 {\r\n                border-right: 1px solid gray;\r\n                display: flex;\r\n                align-items: center;\r\n                justify-content: center;\r\n\r\n                .tr-view-1-wrapper {\r\n                    display: grid;\r\n                    grid-template-rows: 120px 120px 120px;\r\n\r\n                    .tr-data-cpr {\r\n                        width: 500px;\r\n                        display: flex;\r\n                        align-items: center;\r\n                        .cpr-wrapper {\r\n                            .cl-title {\r\n                                font-size: 25pt;\r\n                                .cl-title-wrapper{\r\n                                    margin-bottom: 5px;\r\n                                }\r\n                            }\r\n                            .cl-figure { \r\n                                color: rgba(0, 0, 0, 0.753);\r\n                                font-size: 18pt;\r\n                            }\r\n                        }\r\n                        \r\n                    }\r\n                }\r\n            }\r\n            .tr-view-2 {\r\n                .tr-view-2-wrapper {\r\n                    width: 500px;\r\n                    .cl-title-area {\r\n                        margin-left: 50px;\r\n                        font-size: 30pt;\r\n                    }\r\n                    .cl-picture-container {\r\n                        display: flex;\r\n                        align-items: center;\r\n                        justify-content: center;\r\n                        height: 400px;\r\n                        width: 600px;\r\n                        margin-left: 50px;\r\n                        background-size: cover;\r\n                        background-repeat: no-repeat;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/Global.scss":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/Global.scss ***!
  \****************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "/**\n    Common Style In All Should Be Added Globally\n**/\n* {\n  margin: 0px;\n  padding: 0px;\n  box-sizing: border-box;\n}\n\nbody {\n  width: 100%;\n  margin: 0px;\n  padding: 0px;\n  box-sizing: border-box;\n  user-select: none;\n  overflow-x: hidden;\n}\n\nns-root {\n  width: 100%;\n}\nns-root #main-content {\n  width: inherit;\n  height: inherit;\n}\nns-root #main-content #basic-page {\n  height: fit-content;\n}\nns-root #main-content #basic-page [ns-route=active] {\n  display: block;\n}\nns-root #main-content #basic-page [ns-route=inactive] {\n  display: none;\n}", "",{"version":3,"sources":["webpack://./src/ns/design/Global.scss"],"names":[],"mappings":"AAAA;;EAAA;AAIA;EACI,WAAA;EACA,YAAA;EACA,sBAAA;AAAJ;;AAEA;EACI,WAAA;EACA,WAAA;EACA,YAAA;EACA,sBAAA;EACA,iBAAA;EACA,kBAAA;AACJ;;AACA;EACI,WAAA;AAEJ;AACI;EACI,cAAA;EACA,eAAA;AACR;AACQ;EACI,mBAAA;AACZ;AAAY;EACI,cAAA;AAEhB;AACY;EACI,aAAA;AAChB","sourcesContent":["/**\r\n    Common Style In All Should Be Added Globally\r\n**/\r\n\r\n*{\r\n    margin: 0px;\r\n    padding: 0px;\r\n    box-sizing: border-box; \r\n}\r\nbody {\r\n    width: 100%;\r\n    margin: 0px;\r\n    padding: 0px;\r\n    box-sizing: border-box;\r\n    user-select: none;\r\n    overflow-x: hidden;\r\n}\r\nns-root {\r\n    width: 100%;\r\n\r\n\r\n    #main-content {\r\n        width: inherit;\r\n        height: inherit;\r\n\r\n        #basic-page {\r\n            height: fit-content;\r\n            [ns-route=active]{\r\n                display: block;\r\n\r\n            }\r\n            [ns-route=inactive]{\r\n                display: none;\r\n            }\r\n          \r\n        }\r\n    }\r\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/Goals.scss":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/Goals.scss ***!
  \***************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2 */ "./src/ns/design/fonts/WixMadeforTextVF_W_Wght.8022447a.woff2"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "@font-face {\n  font-family: Wixy;\n  src: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ") format(\"woff\");\n}\n/**\n     Common Mixins\n**/\n@keyframes slideFromTheLeft {\n  0% {\n    display: none;\n    opacity: 0;\n    transform: translateX(-100px);\n  }\n  100% {\n    display: block;\n    opacity: 1;\n    transform: translateX(0px);\n  }\n}\nns-x-benefits {\n  display: block;\n  --ns-x-height: 700px;\n  font-family: Wixy;\n}\n\nns-x-benefits .ponaco-splitview-3 {\n  height: var(--ns-x-height);\n  width: 100%;\n}\nns-x-benefits .ponaco-splitview-3 .wx-component-3 {\n  height: inherit;\n  width: inherit;\n}\nns-x-benefits .ponaco-splitview-3 .wx-component-3 .split-view {\n  width: 100%;\n  height: inherit;\n  border: 2px solid #000;\n}\nns-x-benefits .ponaco-splitview-3 .wx-component-3 .split-view .ctr-component-container {\n  width: 100%;\n  height: inherit;\n  border: 2px solid #ff0000;\n}\nns-x-benefits .ponaco-splitview-3 .wx-component-3 .split-view .ctr-component-container .ctr-component-wrapper {\n  width: 100%;\n  height: inherit;\n  display: grid;\n  grid-template-columns: 3fr 2fr;\n}\nns-x-benefits .ponaco-splitview-3 .wx-component-3 .split-view .ctr-component-container .ctr-component-wrapper > div {\n  border: 1px solid black;\n}\nns-x-benefits .ponaco-splitview-3 .wx-component-3 .split-view .ctr-component-container .ctr-component-wrapper .conic-section-1 {\n  border: 2px solid blue;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n}\nns-x-benefits .ponaco-splitview-3 .wx-component-3 .split-view .ctr-component-container .ctr-component-wrapper .conic-section-1 .ctx-pictures-wrapper {\n  width: 700px;\n  display: grid;\n  grid-template-rows: 300px 300px;\n}\nns-x-benefits .ponaco-splitview-3 .wx-component-3 .split-view .ctr-component-container .ctr-component-wrapper .conic-section-1 .ctx-pictures-wrapper > div {\n  border: 1px solid rgb(150, 19, 202);\n}\nns-x-benefits .ponaco-splitview-3 .wx-component-3 .split-view .ctr-component-container .ctr-component-wrapper .conic-section-1 .ctx-pictures-wrapper .ctx-additive-pics {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n}\nns-x-benefits .ponaco-splitview-3 .wx-component-3 .split-view .ctr-component-container .ctr-component-wrapper .conic-section-1 .ctx-pictures-wrapper .ctx-additive-pics > div {\n  border: 1px solid rgb(150, 19, 202);\n}\nns-x-benefits .ponaco-splitview-3 .wx-component-3 .split-view .ctr-component-container .ctr-component-wrapper .conic-section-1 .ctx-pictures-wrapper .cn-pic-box {\n  position: relative;\n}\nns-x-benefits .ponaco-splitview-3 .wx-component-3 .split-view .ctr-component-container .ctr-component-wrapper .conic-section-1 .ctx-pictures-wrapper .cn-pic-box > div {\n  position: absolute;\n}\nns-x-benefits .ponaco-splitview-3 .wx-component-3 .split-view .ctr-component-container .ctr-component-wrapper .conic-section-1 .ctx-pictures-wrapper .cn-pic-box .cn-picture-container {\n  border: 2px double red;\n  width: 100%;\n  height: 300px;\n  background-repeat: no-repeat;\n  background-size: cover;\n  z-index: 1;\n  font-size: 30pt;\n  color: red;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\nns-x-benefits .ponaco-splitview-3 .wx-component-3 .split-view .ctr-component-container .ctr-component-wrapper .conic-section-1 .ctx-pictures-wrapper .cn-pic-box .cn-info-container::after {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  background: rgba(0, 0, 0, 0.979);\n  opacity: 0;\n  transition: all 1s;\n  -webkit-transition: all 1s;\n}\nns-x-benefits .ponaco-splitview-3 .wx-component-3 .split-view .ctr-component-container .ctr-component-wrapper .conic-section-1 .ctx-pictures-wrapper .cn-pic-box .cn-info-container {\n  opacity: 0.9;\n  height: 130px;\n  width: 100%;\n  bottom: 0px;\n  z-index: 2;\n  cursor: pointer;\n  display: flex;\n  align-items: flex-end;\n}\nns-x-benefits .ponaco-splitview-3 .wx-component-3 .split-view .ctr-component-container .ctr-component-wrapper .conic-section-1 .ctx-pictures-wrapper .cn-pic-box .cn-info-container .cn-info-wrapper {\n  margin-left: 30px;\n  width: fit-content;\n}\nns-x-benefits .ponaco-splitview-3 .wx-component-3 .split-view .ctr-component-container .ctr-component-wrapper .conic-section-1 .ctx-pictures-wrapper .cn-pic-box .cn-info-container .cn-info-wrapper .cn-short-title {\n  font-size: 15pt;\n  margin-bottom: 11px;\n  color: rgba(0, 0, 0, 0.801);\n}\nns-x-benefits .ponaco-splitview-3 .wx-component-3 .split-view .ctr-component-container .ctr-component-wrapper .conic-section-1 .ctx-pictures-wrapper .cn-pic-box .cn-info-container .cn-info-wrapper .cn-short-title-2 {\n  color: #000;\n  font-size: 22pt;\n  margin-bottom: 11px;\n}\nns-x-benefits .ponaco-splitview-3 .wx-component-3 .split-view .ctr-component-container .ctr-component-wrapper .conic-section-2 {\n  display: flex;\n  align-items: center;\n  flex-direction: row;\n  justify-content: center;\n  border: 2px solid maroon;\n}\nns-x-benefits .ponaco-splitview-3 .wx-component-3 .split-view .ctr-component-container .ctr-component-wrapper .conic-section-2 .wrapper .content-wrapper {\n  margin-left: 30px;\n}\nns-x-benefits .ponaco-splitview-3 .wx-component-3 .split-view .ctr-component-container .ctr-component-wrapper .conic-section-2 .wrapper .content-wrapper .cr-title {\n  font-size: 40pt;\n  font-weight: bold;\n}\nns-x-benefits .ponaco-splitview-3 .wx-component-3 .split-view .ctr-component-container .ctr-component-wrapper .conic-section-2 .wrapper .content-wrapper .cr-description {\n  margin-top: 10px;\n  color: rgba(0, 0, 0, 0.781);\n  word-wrap: break-word;\n  width: 400px;\n  font-size: 15pt;\n}\nns-x-benefits .ponaco-splitview-3 .wx-component-3 .split-view .ctr-component-container .ctr-component-wrapper .conic-section-2 .wrapper .content-wrapper .cr-xmore {\n  margin-top: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: 1px solid rebeccapurple;\n  height: 50px;\n  width: 160px;\n  border-radius: 10px;\n}", "",{"version":3,"sources":["webpack://./src/ns/design/Variables.scss","webpack://./src/ns/design/Goals.scss"],"names":[],"mappings":"AAAA;EACI,iBAAA;EACA,2DAAA;ACCJ;ADKA;;EAAA;ACLA;EACI;IACI,aAAA;IACA,UAAA;IACA,6BAAA;EAKN;EAFE;IACI,cAAA;IACA,UAAA;IACA,0BAAA;EAIN;AACF;AADA;EACI,cAAA;EACA,oBAAA;EACA,iBDdc;ACiBlB;;AAAA;EACI,0BAAA;EACA,WAAA;AAGJ;AADI;EACI,eAAA;EACA,cAAA;AAGR;AADQ;EACI,WAAA;EACA,eAAA;EACA,sBAAA;AAGZ;AADY;EACI,WAAA;EACA,eAAA;EACA,yBAAA;AAGhB;AADgB;EACI,WAAA;EACA,eAAA;EACA,aAAA;EACA,8BAAA;AAGpB;AADoB;EACI,uBAAA;AAGxB;AACoB;EACI,sBAAA;EACA,aAAA;EACA,mBAAA;EACA,mBAAA;EACA,uBAAA;AACxB;AACwB;EAGI,YAAA;EAMA,aAAA;EACA,+BAAA;AAN5B;AAC4B;EACI,mCAAA;AAChC;AAK4B;EACI,aAAA;EACA,8BAAA;AAHhC;AAKgC;EACI,mCAAA;AAHpC;AAS4B;EAEI,kBAAA;AARhC;AAUgC;EACI,kBAAA;AARpC;AAWgC;EACI,sBAAA;EACA,WAAA;EACA,aAAA;EACA,4BAAA;EACA,sBAAA;EACA,UAAA;EACA,eAAA;EACA,UAAA;EACA,aAAA;EACA,mBAAA;EACA,uBAAA;AATpC;AAYgC;EACI,kBAAA;EACA,WAAA;EACA,YAAA;EACA,MAAA;EACA,OAAA;EACA,gCAAA;EACA,UAAA;EACA,kBAAA;EACA,0BAAA;AAVpC;AAagC;EACI,YAAA;EACA,aAAA;EACA,WAAA;EACA,WAAA;EACA,UAAA;EACA,eAAA;EACA,aAAA;EACA,qBAAA;AAXpC;AAeoC;EACI,iBAAA;EACA,kBAAA;AAbxC;AAewC;EACI,eAAA;EACA,mBAAA;EACA,2BAAA;AAb5C;AAgBwC;EACI,WAAA;EACA,eAAA;EACA,mBAAA;AAd5C;AAwBoB;EACI,aAAA;EACA,mBAAA;EACA,mBAAA;EACA,uBAAA;EACA,wBAAA;AAtBxB;AAyB4B;EACI,iBAAA;AAvBhC;AAyBgC;EACI,eAAA;EACA,iBAAA;AAvBpC;AA0BgC;EACI,gBAAA;EACA,2BAAA;EACA,qBAAA;EACA,YAAA;EACA,eAAA;AAxBpC;AA2BgC;EACI,gBAAA;EACA,aAAA;EACA,mBAAA;EACA,uBAAA;EACA,+BAAA;EACA,YAAA;EACA,YAAA;EACA,mBAAA;AAzBpC","sourcesContent":["@font-face {\r\n    font-family: Wixy;\r\n    src: url(\"./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2\") format(\"woff\");\r\n}\r\n\r\n$ns-layout-color : #00a4e0;\r\n$ns-common-font : Wixy;\r\n\r\n/**\r\n     Common Mixins\r\n**/\r\n\r\n@mixin common_btn {\r\n    @include button();\r\n    @include center();\r\n    background-color: $ns-layout-color;\r\n    border: 1px solid $ns-layout-color;\r\n    font-weight: 350;\r\n    color: #fff;\r\n    transition: all .5s;\r\n    &:hover{\r\n        color: #000;\r\n        background-color: unset;\r\n    }\r\n}\r\n\r\n\r\n@mixin center {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n@mixin button {\r\n    height: 50px;\r\n    width: 160px;\r\n    border-radius: 10px;\r\n}\r\n\r\n@mixin flex-box {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\n@mixin flex-grid {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}","@use \"./Variables.scss\"as V;\r\n\r\n\r\n@keyframes slideFromTheLeft {\r\n    0% {\r\n        display: none;\r\n        opacity: 0;\r\n        transform: translateX(-100px);\r\n    }\r\n\r\n    100% {\r\n        display: block;\r\n        opacity: 1;\r\n        transform: translateX(0px);\r\n    }\r\n}\r\n\r\nns-x-benefits {\r\n    display: block;\r\n    --ns-x-height: 700px;\r\n    font-family: V.$ns-common-font;\r\n}\r\n\r\nns-x-benefits .ponaco-splitview-3 {\r\n    height: var(--ns-x-height);\r\n    width: 100%;\r\n\r\n    .wx-component-3 {\r\n        height: inherit;\r\n        width: inherit;\r\n\r\n        .split-view {\r\n            width: 100%;\r\n            height: inherit;\r\n            border: 2px solid #000;\r\n\r\n            .ctr-component-container {\r\n                width: 100%;\r\n                height: inherit;\r\n                border: 2px solid #ff0000;\r\n\r\n                .ctr-component-wrapper {\r\n                    width: 100%;\r\n                    height: inherit;\r\n                    display: grid;\r\n                    grid-template-columns: 3fr 2fr;\r\n\r\n                    >div {\r\n                        border: 1px solid black;\r\n                    }\r\n\r\n\r\n                    .conic-section-1 {\r\n                        border: 2px solid blue;\r\n                        display: flex;\r\n                        flex-direction: row;\r\n                        align-items: center;\r\n                        justify-content: center;\r\n\r\n                        .ctx-pictures-wrapper {\r\n\r\n\r\n                            width: 700px;\r\n\r\n                            >div {\r\n                                border: 1px solid rgb(150, 19, 202);\r\n                            }\r\n\r\n                            display: grid;\r\n                            grid-template-rows: 300px 300px;\r\n\r\n                            .ctx-additive-pics {\r\n                                display: grid;\r\n                                grid-template-columns: 1fr 1fr;\r\n\r\n                                >div {\r\n                                    border: 1px solid rgb(150, 19, 202);\r\n\r\n                                }\r\n                            }\r\n\r\n\r\n                            .cn-pic-box {\r\n\r\n                                position: relative;\r\n\r\n                                >div {\r\n                                    position: absolute;\r\n                                }\r\n\r\n                                .cn-picture-container {\r\n                                    border: 2px double red;\r\n                                    width: 100%;\r\n                                    height: 300px;\r\n                                    background-repeat: no-repeat;\r\n                                    background-size: cover;\r\n                                    z-index: 1;\r\n                                    font-size: 30pt;\r\n                                    color: red;\r\n                                    display: flex;\r\n                                    align-items: center;\r\n                                    justify-content: center;\r\n                                }\r\n\r\n                                .cn-info-container::after {\r\n                                    position: absolute;\r\n                                    width: 100%;\r\n                                    height: 100%;\r\n                                    top: 0;\r\n                                    left: 0;\r\n                                    background: rgba(0, 0, 0, 0.979);\r\n                                    opacity: 0;\r\n                                    transition: all 1s;\r\n                                    -webkit-transition: all 1s;\r\n                                }\r\n\r\n                                .cn-info-container {\r\n                                    opacity: 0.9;\r\n                                    height: 130px;\r\n                                    width: 100%;\r\n                                    bottom: 0px;\r\n                                    z-index: 2;\r\n                                    cursor: pointer;\r\n                                    display: flex;\r\n                                    align-items: flex-end;\r\n\r\n\r\n\r\n                                    .cn-info-wrapper {\r\n                                        margin-left: 30px;\r\n                                        width: fit-content;\r\n\r\n                                        .cn-short-title {\r\n                                            font-size: 15pt;\r\n                                            margin-bottom: 11px;\r\n                                            color: rgba(0, 0, 0, 0.801);\r\n                                        }\r\n\r\n                                        .cn-short-title-2 {\r\n                                            color: #000;\r\n                                            font-size: 22pt;\r\n                                            margin-bottom: 11px;\r\n\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    .conic-section-2 {\r\n                        display: flex;\r\n                        align-items: center;\r\n                        flex-direction: row;\r\n                        justify-content: center;\r\n                        border: 2px solid maroon;\r\n\r\n                        .wrapper {\r\n                            .content-wrapper {\r\n                                margin-left: 30px;\r\n\r\n                                .cr-title {\r\n                                    font-size: 40pt;\r\n                                    font-weight: bold;\r\n                                }\r\n\r\n                                .cr-description {\r\n                                    margin-top: 10px;\r\n                                    color: rgba(0, 0, 0, 0.781);\r\n                                    word-wrap: break-word;\r\n                                    width: 400px;\r\n                                    font-size: 15pt;\r\n                                }\r\n\r\n                                .cr-xmore {\r\n                                    margin-top: 20px;\r\n                                    display: flex;\r\n                                    align-items: center;\r\n                                    justify-content: center;\r\n                                    border: 1px solid rebeccapurple;\r\n                                    height: 50px;\r\n                                    width: 160px;\r\n                                    border-radius: 10px;\r\n                                }\r\n\r\n                            }\r\n\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/Header.scss":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/Header.scss ***!
  \****************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2 */ "./src/ns/design/fonts/WixMadeforTextVF_W_Wght.8022447a.woff2"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_1___ = new URL(/* asset import */ __webpack_require__(/*! ./Imgs/logo-banner.png */ "./src/ns/design/Imgs/logo-banner.png"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
var ___CSS_LOADER_URL_REPLACEMENT_1___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_1___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "@font-face {\n  font-family: Wixy;\n  src: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ") format(\"woff\");\n}\n/**\n     Common Mixins\n**/\nns-header {\n  display: block;\n  position: relative;\n  z-index: 1000000;\n  top: 0px;\n  --ns-header-font-size: 10pt;\n  --ns-text-color: #fff;\n}\nns-header .wx-component-header-section {\n  font-family: Wixy;\n  width: 100%;\n  height: 70px;\n  font-size: var(--ns-header-font-size);\n  transition: height 0.5s ease;\n}\nns-header .wx-component-header-section .wx-header-component-area {\n  width: 100%;\n  height: fit-content;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  backdrop-filter: blur(8px);\n  background-color: rgba(0, 0, 0, 0.3);\n}\nns-header .wx-component-header-section .wx-header-component-area .wx-badge-wrapper {\n  height: 70px;\n  width: 100px;\n  display: grid;\n  grid-template-columns: 100px 400px;\n}\nns-header .wx-component-header-section .wx-header-component-area .wx-badge-wrapper #badge-icon {\n  margin-left: 20px;\n  width: 50px;\n  height: 50px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  background-size: contain;\n  background-image: url(" + ___CSS_LOADER_URL_REPLACEMENT_1___ + ");\n  background-repeat: no-repeat;\n}\nns-header .wx-component-header-section .wx-header-component-area .wx-badge-wrapper .badge-title {\n  color: var(--ns-text-color);\n  text-transform: uppercase;\n  height: 70px;\n  width: fit-content;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  transition: all 0.5s;\n}\nns-header .wx-component-header-section .wx-header-component-area .wx-navigation-bar-half-area {\n  width: 550px;\n  height: 70px;\n}\nns-header .wx-component-header-section .wx-header-component-area .wx-navigation-bar-half-area .navigation-bar-wrapper {\n  height: inherit;\n  width: inherit;\n}\nns-header .wx-component-header-section .wx-header-component-area .wx-navigation-bar-half-area .navigation-bar-wrapper .main-navigation-bar {\n  transition: all 0.5s;\n  width: inherit;\n  height: inherit;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n}\nns-header .wx-component-header-section .wx-header-component-area .wx-navigation-bar-half-area .navigation-bar-wrapper .main-navigation-bar ul.navigation-items {\n  width: fit-content;\n  margin: 0px;\n  padding: 0px;\n  display: flex;\n}\nns-header .wx-component-header-section .wx-header-component-area .wx-navigation-bar-half-area .navigation-bar-wrapper .main-navigation-bar ul.navigation-items li {\n  cursor: pointer;\n  font-size: 11pt;\n  margin: 20px 30px 20px 30px;\n  list-style-type: none;\n}\nns-header .wx-component-header-section .wx-header-component-area .wx-navigation-bar-half-area .navigation-bar-wrapper .main-navigation-bar ul.navigation-items li a.active-link {\n  color: #00a4e0;\n  border-bottom-color: #00a4e0;\n}\nns-header .wx-component-header-section .wx-header-component-area .wx-navigation-bar-half-area .navigation-bar-wrapper .main-navigation-bar ul.navigation-items li a {\n  color: var(--ns-text-color);\n  font-weight: 100;\n  border-bottom: 2px solid transparent;\n  transition: all 0.5s;\n  text-decoration: none;\n}\nns-header .wx-component-header-section .wx-header-component-area .wx-navigation-bar-half-area .navigation-bar-wrapper .main-navigation-bar ul.navigation-items li a:hover {\n  border-bottom: 2px solid #00a4e0;\n}\nns-header .wx-component-header-section .wx-header-component-area .accord-options {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\nns-header .wx-component-header-section .wx-header-component-area .accord-options .control-options {\n  display: flex;\n}\nns-header .wx-component-header-section .wx-header-component-area .accord-options .control-options > div {\n  color: var(--ns-text-color);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 14pt;\n  width: 50px;\n  height: 50px;\n  cursor: pointer;\n  transition: all 0.5s;\n}\nns-header .wx-component-header-section .wx-header-component-area .accord-options .control-options > div:hover {\n  color: #00a4e0;\n}\nns-header .wx-component-header-section .wx-header-component-area .accord-options .control-options .theme-manager {\n  margin-left: 20px;\n}\nns-header .wx-component-header-section .wx-header-component-area .accord-options .control-options .theme-manager:hover {\n  color: #000000;\n}\nns-header .wx-component-header-section .wx-header-component-area .accord-options .control-bars {\n  display: none;\n}\nns-header .wx-component-header-section .wx-bars {\n  position: absolute;\n  top: 20px;\n  right: 30px;\n  width: 50px;\n  height: 50px;\n  display: none;\n  align-items: center;\n  justify-content: center;\n  color: #000000;\n  font-size: 15px;\n}", "",{"version":3,"sources":["webpack://./src/ns/design/Variables.scss","webpack://./src/ns/design/Header.scss"],"names":[],"mappings":"AAAA;EACI,iBAAA;EACA,2DAAA;ACCJ;ADKA;;EAAA;ACNA;EACI,cAAA;EACA,kBAAA;EACA,gBAAA;EACA,QAAA;EACA,2BAAA;EACA,qBAAA;AAMJ;AAJI;EACI,iBDLU;ECMV,WAAA;EACA,YAAA;EAEA,qCAAA;EACA,4BAAA;AAKR;AADQ;EACI,WAAA;EACA,mBAAA;EACA,aAAA;EACA,kCAAA;EACA,0BAAA;EACA,oCAAA;AAGZ;AAFY;EACI,YAAA;EACA,YAAA;EACA,aAAA;EACA,kCAAA;AAIhB;AAHgB;EACI,iBAAA;EACA,WAAA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,eAAA;EACA,wBAAA;EACA,yDAAA;EACA,4BAAA;AAKpB;AAGgB;EACI,2BAAA;EACA,yBAAA;EACA,YAAA;EACA,kBAAA;EACA,aAAA;EACA,mBAAA;EACA,WAAA;EACA,oBAAA;AADpB;AAOY;EACI,YAAA;EACA,YAAA;AALhB;AAMgB;EACI,eAAA;EACA,cAAA;AAJpB;AAKoB;EACI,oBAAA;EACA,cAAA;EACA,eAAA;EACA,aAAA;EACA,mBAAA;EACA,mBAAA;EACA,uBAAA;AAHxB;AAIwB;EACI,kBAAA;EACA,WAAA;EACA,YAAA;EACA,aAAA;AAF5B;AAG4B;EACI,eAAA;EACA,eAAA;EACA,2BAAA;EACA,qBAAA;AADhC;AAEgC;EACI,cDpFjB;ECqFiB,4BDrFjB;ACqFnB;AAEgC;EACI,2BAAA;EACA,gBAAA;EACA,oCAAA;EACA,oBAAA;EACA,qBAAA;AAApC;AACoC;EACE,gCAAA;AACtC;AAOY;EACI,aAAA;EACQ,mBAAA;EACA,uBAAA;AALxB;AAMgB;EACI,aAAA;AAJpB;AAKoB;EACI,2BAAA;EACA,aAAA;EACA,mBAAA;EACA,uBAAA;EACA,eAAA;EACA,WAAA;EACA,YAAA;EACA,eAAA;EACA,oBAAA;AAHxB;AAIwB;EACI,cDvHT;ACqHnB;AAKoB;EACI,iBAAA;AAHxB;AAIwB;EACI,cAAA;AAF5B;AAOgB;EACI,aAAA;AALpB;AAYQ;EACI,kBAAA;EACA,SAAA;EACA,WAAA;EACA,WAAA;EACA,YAAA;EACA,aAAA;EACA,mBAAA;EACA,uBAAA;EACA,cAAA;EACA,eAAA;AAVZ","sourcesContent":["@font-face {\r\n    font-family: Wixy;\r\n    src: url(\"./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2\") format(\"woff\");\r\n}\r\n\r\n$ns-layout-color : #00a4e0;\r\n$ns-common-font : Wixy;\r\n\r\n/**\r\n     Common Mixins\r\n**/\r\n\r\n@mixin common_btn {\r\n    @include button();\r\n    @include center();\r\n    background-color: $ns-layout-color;\r\n    border: 1px solid $ns-layout-color;\r\n    font-weight: 350;\r\n    color: #fff;\r\n    transition: all .5s;\r\n    &:hover{\r\n        color: #000;\r\n        background-color: unset;\r\n    }\r\n}\r\n\r\n\r\n@mixin center {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n@mixin button {\r\n    height: 50px;\r\n    width: 160px;\r\n    border-radius: 10px;\r\n}\r\n\r\n@mixin flex-box {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\n@mixin flex-grid {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}","@use \"./Variables.scss\"as V;\r\n\r\nns-header {\r\n    display: block;\r\n    position: relative;\r\n    z-index: 1000000;\r\n    top: 0px;\r\n    --ns-header-font-size: 10pt;\r\n    --ns-text-color : #fff;\r\n\r\n    .wx-component-header-section {\r\n        font-family: V.$ns-common-font;\r\n        width: 100%;\r\n        height: 70px;\r\n        // background-color: rgba(245, 245, 245, 0.041);\r\n        font-size: var(--ns-header-font-size);\r\n        transition: height .5s ease;\r\n        // backdrop-filter: blur(8px);\r\n\r\n        //header-component-section\r\n        .wx-header-component-area {\r\n            width: 100%;\r\n            height: fit-content;\r\n            display: grid;\r\n            grid-template-columns: 1fr 1fr 1fr;\r\n            backdrop-filter: blur(8px);\r\n            background-color: rgba(0,0,0,0.3);\r\n            .wx-badge-wrapper {\r\n                height: 70px;\r\n                width: 100px;\r\n                display: grid;\r\n                grid-template-columns: 100px 400px;\r\n                #badge-icon {\r\n                    margin-left: 20px;\r\n                    width: 50px;\r\n                    height: 50px;\r\n                    display: flex;\r\n                    justify-content: center;\r\n                    align-items: center;\r\n                    cursor: pointer;\r\n                    background-size: contain;\r\n                    background-image: url(\"./Imgs/logo-banner.png\");\r\n                    background-repeat: no-repeat;\r\n\r\n                    // svg {\r\n                    //     width: 100px;\r\n                    //     height: 50px;\r\n                    // }\r\n                }\r\n\r\n                .badge-title {\r\n                    color: var(--ns-text-color);\r\n                    text-transform: uppercase;\r\n                    height: 70px;\r\n                    width: fit-content;\r\n                    display: flex;\r\n                    align-items: center;\r\n                    width: 100%;\r\n                    transition: all .5s;\r\n                }\r\n            }\r\n\r\n            //navigation-component-section\r\n        \r\n            .wx-navigation-bar-half-area {\r\n                width: 550px;\r\n                height: 70px;\r\n                .navigation-bar-wrapper{\r\n                    height: inherit;\r\n                    width: inherit;\r\n                    .main-navigation-bar{\r\n                        transition: all .5s;\r\n                        width: inherit;\r\n                        height: inherit;\r\n                        display: flex;\r\n                        flex-direction: row;\r\n                        align-items: center;\r\n                        justify-content: center;\r\n                        ul.navigation-items {\r\n                            width: fit-content;\r\n                            margin: 0px;\r\n                            padding: 0px;\r\n                            display: flex;\r\n                            li{\r\n                                cursor: pointer;\r\n                                font-size: 11pt;\r\n                                margin: 20px 30px 20px 30px;\r\n                                list-style-type: none;\r\n                                a.active-link {\r\n                                    color: V.$ns-layout-color;\r\n                                    border-bottom-color: V.$ns-layout-color;\r\n                                }\r\n                                a{\r\n                                    color: var(--ns-text-color);\r\n                                    font-weight: 100;\r\n                                    border-bottom: 2px solid transparent;\r\n                                    transition: all .5s;\r\n                                    text-decoration: none;\r\n                                    &:hover{\r\n                                      border-bottom: 2px solid V.$ns-layout-color;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            .accord-options {\r\n                display: flex;\r\n                        align-items: center;\r\n                        justify-content: center;\r\n                .control-options {\r\n                    display: flex;\r\n                    >div {\r\n                        color: var(--ns-text-color);\r\n                        display: flex;\r\n                        align-items: center;\r\n                        justify-content: center;\r\n                        font-size: 14pt;\r\n                        width: 50px;\r\n                        height: 50px;\r\n                        cursor: pointer;\r\n                        transition: all .5s;\r\n                        &:hover{\r\n                            color: V.$ns-layout-color;\r\n                        }\r\n                    }\r\n                    .theme-manager {\r\n                        margin-left: 20px;\r\n                        &:hover {\r\n                            color: #000000;\r\n                        }\r\n\r\n                    }\r\n                }\r\n                .control-bars{\r\n                    display: none;\r\n\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        .wx-bars {\r\n            position: absolute;\r\n            top: 20px;\r\n            right: 30px;\r\n            width: 50px;\r\n            height: 50px;\r\n            display: none;\r\n            align-items: center;\r\n            justify-content: center;\r\n            color: #000000;\r\n            font-size: 15px;\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/Insights.scss":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/Insights.scss ***!
  \******************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2 */ "./src/ns/design/fonts/WixMadeforTextVF_W_Wght.8022447a.woff2"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "@font-face {\n  font-family: Wixy;\n  src: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ") format(\"woff\");\n}\n/**\n     Common Mixins\n**/\n@keyframes slidein {\n  0% {\n    display: none;\n    opacity: 0;\n    transform: translateX(15px);\n  }\n  100% {\n    width: 100px;\n    display: flex;\n    opacity: 1;\n    color: #fff;\n    transform: translateX(0px);\n  }\n}\nns-x-insights {\n  display: block;\n  width: 100%;\n}\n\nns-x-insights .ponaco-splitview-5 {\n  font-family: Wixy;\n  border: 2px solid red;\n  width: 100%;\n  height: fit-content;\n}\nns-x-insights .ponaco-splitview-5 .wx-insights-component {\n  width: 100%;\n}\nns-x-insights .ponaco-splitview-5 .wx-insights-component .main-wrapper {\n  width: 100%;\n}\nns-x-insights .ponaco-splitview-5 .wx-insights-component .main-wrapper .content-title {\n  font-size: 40pt;\n  margin-bottom: 20px;\n}\nns-x-insights .ponaco-splitview-5 .wx-insights-component .main-wrapper .content-title .content-title-wrapper {\n  margin-left: 40px;\n}\nns-x-insights .ponaco-splitview-5 .wx-insights-component .main-wrapper .cards-container .card-wrapper-1 {\n  height: fit-content;\n  margin-bottom: 50px;\n}\nns-x-insights .ponaco-splitview-5 .wx-insights-component .main-wrapper .cards-container .card-wrapper-2 {\n  width: fit-content;\n  display: grid;\n  grid-template-columns: 600px 600px;\n  grid-template-rows: 480px 480px;\n  grid-gap: 50px;\n  margin: auto;\n}\nns-x-insights .ponaco-splitview-5 .wx-insights-component .main-wrapper .cards-container .card-wrapper-2 .card-x-component .card-content {\n  display: block;\n  width: fit-content;\n  border: 2px solid maroon;\n  text-decoration: none;\n}\nns-x-insights .ponaco-splitview-5 .wx-insights-component .main-wrapper .cards-container .card-wrapper-2 .card-x-component .card-content .card-content-wrapper {\n  position: relative;\n  border: 2px solid black;\n  width: 600px;\n  height: 480px;\n}\nns-x-insights .ponaco-splitview-5 .wx-insights-component .main-wrapper .cards-container .card-wrapper-2 .card-x-component .card-content .card-content-wrapper > div {\n  position: absolute;\n}\nns-x-insights .ponaco-splitview-5 .wx-insights-component .main-wrapper .cards-container .card-wrapper-2 .card-x-component .card-content .card-content-wrapper .card-content-image {\n  width: 100%;\n  height: 480px;\n  font-size: 30pt;\n  color: red;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\nns-x-insights .ponaco-splitview-5 .wx-insights-component .main-wrapper .cards-container .card-wrapper-2 .card-x-component .card-content .card-content-wrapper .card-content-info {\n  bottom: 0px;\n}\nns-x-insights .ponaco-splitview-5 .wx-insights-component .main-wrapper .cards-container .card-wrapper-2 .card-x-component .card-content .card-content-wrapper .card-content-info .ctrinfo {\n  margin: 0px 20px 0px 20px;\n}\nns-x-insights .ponaco-splitview-5 .wx-insights-component .main-wrapper .cards-container .card-wrapper-2 .card-x-component .card-content .card-content-wrapper .card-content-info .x-title-1 {\n  font-size: 22pt;\n  margin-bottom: 8px;\n}\nns-x-insights .ponaco-splitview-5 .wx-insights-component .main-wrapper .cards-container .card-wrapper-2 .card-x-component .card-content .card-content-wrapper .card-content-info .x-title-2 {\n  margin-bottom: 10px;\n  font-size: 13pt;\n}\nns-x-insights .ponaco-splitview-5 .wx-insights-component .main-wrapper .cards-container .card-wrapper-2 .card-x-component .card-content .card-content-wrapper .card-content-info .x-title-btn {\n  margin-bottom: 10px;\n}\nns-x-insights .ponaco-splitview-5 .wx-insights-component .main-wrapper .cards-container .card-wrapper-2 .card-x-component .card-content .card-content-wrapper .card-content-info .x-title-btn .x-btn-wrapper {\n  display: grid;\n  grid-template-columns: 50px auto;\n}\nns-x-insights .ponaco-splitview-5 .wx-insights-component .main-wrapper .cards-container .card-wrapper-2 .card-x-component .card-content .card-content-wrapper .card-content-info .x-title-btn .x-btn-wrapper .sl-button {\n  font-size: 13pt;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 40px;\n  height: 40px;\n  border: 1px solid black;\n}\nns-x-insights .ponaco-splitview-5 .wx-insights-component .main-wrapper .cards-container .card-wrapper-2 .card-x-component .card-content .card-content-wrapper .card-content-info .x-title-btn .x-btn-wrapper .sl-text {\n  height: 40px;\n  display: flex;\n  align-items: center;\n}", "",{"version":3,"sources":["webpack://./src/ns/design/Variables.scss","webpack://./src/ns/design/Insights.scss"],"names":[],"mappings":"AAAA;EACI,iBAAA;EACA,2DAAA;ACCJ;ADKA;;EAAA;ACNA;EACI;IACI,aAAA;IACA,UAAA;IACA,2BAAA;EAMN;EAHE;IACI,YAAA;IACA,aAAA;IACA,UAAA;IACA,WAAA;IACA,0BAAA;EAKN;AACF;AADA;EACI,cAAA;EACA,WAAA;AAGJ;;AACA;EACI,iBDpBc;ECsBd,qBAAA;EACA,WAAA;EACA,mBAAA;AACJ;AACI;EACI,WAAA;AACR;AACQ;EAEI,WAAA;AAAZ;AAEY;EACI,eAAA;EAIA,mBAAA;AAHhB;AAAgB;EACI,iBAAA;AAEpB;AAIgB;EACI,mBAAA;EACA,mBAAA;AAFpB;AAIgB;EACI,kBAAA;EACA,aAAA;EACA,kCAAA;EACA,+BAAA;EACA,cAAA;EACA,YAAA;AAFpB;AAMwB;EACI,cAAA;EAEA,kBAAA;EACA,wBAAA;EACA,qBAAA;AAL5B;AAO4B;EACI,kBAAA;EACA,uBAAA;EACA,YAAA;EACA,aAAA;AALhC;AAOgC;EACI,kBAAA;AALpC;AAQgC;EACI,WAAA;EACA,aAAA;EACA,eAAA;EACA,UAAA;EACA,aAAA;EACA,mBAAA;EACA,uBAAA;AANpC;AASgC;EACI,WAAA;AAPpC;AASoC;EACI,yBAAA;AAPxC;AAUoC;EACI,eAAA;EACA,kBAAA;AARxC;AAYoC;EACI,mBAAA;EACA,eAAA;AAVxC;AAaoC;EACI,mBAAA;AAXxC;AAawC;EACI,aAAA;EACA,gCAAA;AAX5C;AAa4C;EACI,eAAA;EACA,kBAAA;EACA,aAAA;EACA,mBAAA;EACA,uBAAA;EACA,WAAA;EACA,YAAA;EACA,uBAAA;AAXhD;AAc4C;EACI,YAAA;EACA,aAAA;EACA,mBAAA;AAZhD","sourcesContent":["@font-face {\r\n    font-family: Wixy;\r\n    src: url(\"./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2\") format(\"woff\");\r\n}\r\n\r\n$ns-layout-color : #00a4e0;\r\n$ns-common-font : Wixy;\r\n\r\n/**\r\n     Common Mixins\r\n**/\r\n\r\n@mixin common_btn {\r\n    @include button();\r\n    @include center();\r\n    background-color: $ns-layout-color;\r\n    border: 1px solid $ns-layout-color;\r\n    font-weight: 350;\r\n    color: #fff;\r\n    transition: all .5s;\r\n    &:hover{\r\n        color: #000;\r\n        background-color: unset;\r\n    }\r\n}\r\n\r\n\r\n@mixin center {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n@mixin button {\r\n    height: 50px;\r\n    width: 160px;\r\n    border-radius: 10px;\r\n}\r\n\r\n@mixin flex-box {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\n@mixin flex-grid {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}","@use \"./Variables.scss\" as V;\r\n\r\n@keyframes slidein {\r\n    0% {\r\n        display: none;\r\n        opacity: 0;\r\n        transform: translateX(15px);\r\n    }\r\n\r\n    100% {\r\n        width: 100px;\r\n        display: flex;\r\n        opacity: 1;\r\n        color: #fff;\r\n        transform: translateX(0px);\r\n    }\r\n}\r\n\r\n\r\nns-x-insights {\r\n    display: block;\r\n    width: 100%;\r\n}\r\n\r\n\r\nns-x-insights .ponaco-splitview-5 {\r\n    font-family: V.$ns-common-font;\r\n\r\n    border: 2px solid red;\r\n    width: 100%;\r\n    height: fit-content;\r\n\r\n    .wx-insights-component {\r\n        width: 100%;\r\n\r\n        .main-wrapper {\r\n\r\n            width: 100%;\r\n\r\n            .content-title {\r\n                font-size: 40pt;\r\n                .content-title-wrapper {\r\n                    margin-left: 40px;\r\n                }\r\n                margin-bottom: 20px;\r\n            }\r\n\r\n            .cards-container {\r\n                .card-wrapper-1 {\r\n                    height: fit-content;\r\n                    margin-bottom: 50px;\r\n                }\r\n                .card-wrapper-2 {\r\n                    width: fit-content;\r\n                    display: grid;\r\n                    grid-template-columns: 600px 600px;\r\n                    grid-template-rows: 480px 480px;\r\n                    grid-gap: 50px;\r\n                    margin: auto;\r\n\r\n\r\n                    .card-x-component {\r\n                        .card-content {\r\n                            display: block;\r\n\r\n                            width: fit-content;\r\n                            border: 2px solid maroon;\r\n                            text-decoration: none;\r\n\r\n                            .card-content-wrapper {\r\n                                position: relative;\r\n                                border: 2px solid black;\r\n                                width: 600px;\r\n                                height: 480px;\r\n\r\n                                >div {\r\n                                    position: absolute;\r\n                                }\r\n\r\n                                .card-content-image {\r\n                                    width: 100%;\r\n                                    height: 480px;\r\n                                    font-size: 30pt;\r\n                                    color: red;\r\n                                    display: flex;\r\n                                    align-items: center;\r\n                                    justify-content: center;\r\n                                }\r\n\r\n                                .card-content-info {\r\n                                    bottom: 0px;\r\n\r\n                                    .ctrinfo {\r\n                                        margin: 0px 20px 0px 20px;\r\n                                    }\r\n\r\n                                    .x-title-1 {\r\n                                        font-size: 22pt;\r\n                                        margin-bottom: 8px;\r\n\r\n                                    }\r\n\r\n                                    .x-title-2 {\r\n                                        margin-bottom: 10px;\r\n                                        font-size: 13pt;\r\n                                    }\r\n\r\n                                    .x-title-btn {\r\n                                        margin-bottom: 10px;\r\n\r\n                                        .x-btn-wrapper {\r\n                                            display: grid;\r\n                                            grid-template-columns: 50px auto;\r\n\r\n                                            .sl-button {\r\n                                                font-size: 13pt;\r\n                                                border-radius: 50%;\r\n                                                display: flex;\r\n                                                align-items: center;\r\n                                                justify-content: center;\r\n                                                width: 40px;\r\n                                                height: 40px;\r\n                                                border: 1px solid black;\r\n                                            }\r\n\r\n                                            .sl-text {\r\n                                                height: 40px;\r\n                                                display: flex;\r\n                                                align-items: center;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n\r\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/Pride.scss":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/Pride.scss ***!
  \***************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2 */ "./src/ns/design/fonts/WixMadeforTextVF_W_Wght.8022447a.woff2"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "@font-face {\n  font-family: Wixy;\n  src: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ") format(\"woff\");\n}\n/**\n     Common Mixins\n**/\nns-x-pride {\n  display: block;\n  width: 100%;\n}\n\nns-x-pride .pride-x-component {\n  height: 700px;\n  width: inherit;\n  display: flex;\n  flex-direction: column;\n  font-family: Wixy;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\nns-x-pride .pride-x-component .container {\n  border: 2px solid red;\n}\nns-x-pride .pride-x-component .container .welcome-text {\n  width: 100%;\n  height: 200px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\nns-x-pride .pride-x-component .container .welcome-text .welcome-text-wrapper {\n  font-size: 70pt;\n  font-weight: bolder;\n}\nns-x-pride .pride-x-component .container .welcome-text .welcome-text-wrapper::after {\n  content: \". \";\n}\nns-x-pride .pride-x-component .container .welcome-text .welcome-text-wrapper::before {\n  content: \" .\";\n}\nns-x-pride .pride-x-component .container .welcome-text-2 {\n  width: 100%;\n  height: 150px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\nns-x-pride .pride-x-component .container .welcome-text-2 .svg-container-wrapper {\n  color: #00a4e0;\n  font-size: 55pt;\n}\nns-x-pride .pride-x-component .container .control-button-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 80px;\n}\nns-x-pride .pride-x-component .container .control-button-container .expl-button-container {\n  cursor: pointer;\n  border: 2px solid #00a4e0;\n  color: #fff;\n  transition: all 0.5s;\n  background-color: #00a4e0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 50px;\n  width: 160px;\n  border-radius: 10px;\n}\nns-x-pride .pride-x-component .container .control-button-container .expl-button-container:hover {\n  background-color: unset;\n  color: #fff;\n  text-decoration: underline;\n  line-height: 10px;\n}\nns-x-pride .pride-x-component .container .control-button-container .expl-button-container:active {\n  transform: scale(0.8);\n}", "",{"version":3,"sources":["webpack://./src/ns/design/Variables.scss","webpack://./src/ns/design/Pride.scss"],"names":[],"mappings":"AAAA;EACI,iBAAA;EACA,2DAAA;ACCJ;ADKA;;EAAA;ACNA;EAEI,cAAA;EACA,WAAA;AAKJ;;AAFA;EACI,aAAA;EACA,cAAA;EAEA,aAAA;EACA,sBAAA;EACA,iBDRc;ECSd,aAAA;EACA,mBAAA;EACA,uBAAA;AAIJ;AAFI;EACI,qBAAA;AAIR;AAFQ;EACI,WAAA;EACA,aAAA;EACA,aAAA;EACA,mBAAA;EACA,uBAAA;AAIZ;AAFY;EACI,eAAA;EACA,mBAAA;AAIhB;AAFgB;EACI,aAAA;AAIpB;AADgB;EACI,aAAA;AAGpB;AAEQ;EACI,WAAA;EACA,aAAA;EACA,aAAA;EACA,mBAAA;EACA,uBAAA;AAAZ;AAEY;EACI,cD9CG;EC+CH,eAAA;AAAhB;AAKQ;EACI,aAAA;EACA,mBAAA;EACA,uBAAA;EACA,WAAA;EACA,YAAA;AAHZ;AAKY;EACI,eAAA;EACA,yBAAA;EACA,WAAA;EACA,oBAAA;EACA,yBDhEG;EAuBf,aAAA;EACA,mBAAA;EACA,uBAAA;EAIA,YAAA;EACA,YAAA;EACA,mBAAA;ACoCJ;AACgB;EACI,uBAAA;EACA,WAAA;EACA,0BAAA;EACA,iBAAA;AACpB;AAEgB;EACI,qBAAA;AAApB","sourcesContent":["@font-face {\r\n    font-family: Wixy;\r\n    src: url(\"./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2\") format(\"woff\");\r\n}\r\n\r\n$ns-layout-color : #00a4e0;\r\n$ns-common-font : Wixy;\r\n\r\n/**\r\n     Common Mixins\r\n**/\r\n\r\n@mixin common_btn {\r\n    @include button();\r\n    @include center();\r\n    background-color: $ns-layout-color;\r\n    border: 1px solid $ns-layout-color;\r\n    font-weight: 350;\r\n    color: #fff;\r\n    transition: all .5s;\r\n    &:hover{\r\n        color: #000;\r\n        background-color: unset;\r\n    }\r\n}\r\n\r\n\r\n@mixin center {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n@mixin button {\r\n    height: 50px;\r\n    width: 160px;\r\n    border-radius: 10px;\r\n}\r\n\r\n@mixin flex-box {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\n@mixin flex-grid {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}","@use \"./Variables.scss\"as V;\r\n\r\nns-x-pride {\r\n\r\n    display: block;\r\n    width: 100%;\r\n}\r\n\r\nns-x-pride .pride-x-component {\r\n    height: 700px;\r\n    width: inherit;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    font-family: V.$ns-common-font;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    .container {\r\n        border: 2px solid red;\r\n\r\n        .welcome-text {\r\n            width: 100%;\r\n            height: 200px;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n\r\n            .welcome-text-wrapper {\r\n                font-size: 70pt;\r\n                font-weight: bolder;\r\n\r\n                &::after {\r\n                    content: \". \";\r\n                }\r\n\r\n                &::before {\r\n                    content: \" .\";\r\n                }\r\n            }\r\n        }\r\n\r\n        .welcome-text-2 {\r\n            width: 100%;\r\n            height: 150px;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n\r\n            .svg-container-wrapper {\r\n                color: V.$ns-layout-color;\r\n                font-size: 55pt;\r\n\r\n            }\r\n        }\r\n\r\n        .control-button-container {\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            width: 100%;\r\n            height: 80px;\r\n\r\n            .expl-button-container {\r\n                cursor: pointer;\r\n                border: 2px solid V.$ns-layout-color;\r\n                color: #fff;\r\n                transition: all .5s;\r\n                background-color: V.$ns-layout-color;\r\n                @include V.center();\r\n                @include V.button();\r\n\r\n                &:hover {\r\n                    background-color: unset;\r\n                    color: #fff;\r\n                    text-decoration: underline;\r\n                    line-height: 10px;\r\n                }\r\n\r\n                &:active {\r\n                    transform: scale(0.8);\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/Quote.scss":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/Quote.scss ***!
  \***************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2 */ "./src/ns/design/fonts/WixMadeforTextVF_W_Wght.8022447a.woff2"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "@font-face {\n  font-family: Wixy;\n  src: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ") format(\"woff\");\n}\n/**\n     Common Mixins\n**/\n@keyframes slideFromAbove {\n  0% {\n    visibility: hidden;\n    opacity: 0;\n    transform: translateY(100px);\n  }\n  100% {\n    visibility: visible;\n    opacity: 1;\n    transform: translateY(0px);\n  }\n}\nns-x-quote {\n  display: block;\n  width: 100%;\n  --ns-major-Fontsize: 65pt;\n  --ns-minor-Fontsize: 15pt;\n  --ns-content-size: 800px;\n}\n\nns-x-quote .ponaco-splitview-6 {\n  margin: 0 0 0px 0;\n}\nns-x-quote .ponaco-splitview-6 .wx-component-6 {\n  border: 1px solid red;\n  width: 100%;\n  height: var(--ns-content-size);\n  background-size: cover;\n  background-attachment: fixed;\n  background-repeat: no-repeat;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\nns-x-quote .ponaco-splitview-6 .wx-component-6 .main-content-holder {\n  width: fit-content;\n  font-family: Wixy;\n}\nns-x-quote .ponaco-splitview-6 .wx-component-6 .main-content-holder .x-content-1 {\n  border: 1px solid red;\n  font-weight: 350;\n  font-size: var(--ns-major-Fontsize);\n  max-width: 950px;\n  text-align: center;\n  margin-left: 20px;\n  margin-right: 20px;\n  margin-bottom: 20px;\n  animation: slideFromAbove 1.5s forwards;\n}\nns-x-quote .ponaco-splitview-6 .wx-component-6 .main-content-holder .x-content-1::before {\n  content: '\"';\n}\nns-x-quote .ponaco-splitview-6 .wx-component-6 .main-content-holder .x-content-1::after {\n  content: '\".';\n}\nns-x-quote .ponaco-splitview-6 .wx-component-6 .main-content-holder .x-content-2 {\n  text-align: center;\n  font-weight: 500;\n  font-size: var(--ns-minor-Fontsize);\n}\nns-x-quote .ponaco-splitview-6 .wx-component-6 .main-content-holder .x-content-2::before {\n  content: \"~\";\n}\nns-x-quote .ponaco-splitview-6 .wx-component-6 .main-content-holder .x-content-2::after {\n  content: \"~\";\n}", "",{"version":3,"sources":["webpack://./src/ns/design/Variables.scss","webpack://./src/ns/design/Quote.scss"],"names":[],"mappings":"AAAA;EACI,iBAAA;EACA,2DAAA;ACCJ;ADKA;;EAAA;ACNA;EACI;IACI,kBAAA;IACA,UAAA;IACA,4BAAA;EAMN;EAHE;IACI,mBAAA;IACA,UAAA;IACA,0BAAA;EAKN;AACF;AAFA;EACI,cAAA;EACA,WAAA;EACA,yBAAA;EACA,yBAAA;EACA,wBAAA;AAIJ;;AADA;EACI,iBAAA;AAIJ;AAFI;EACI,qBAAA;EACA,WAAA;EACA,8BAAA;EAEA,sBAAA;EACA,4BAAA;EACA,4BAAA;EDNJ,aAAA;EACA,mBAAA;EACA,uBAAA;ACUJ;AAHQ;EACI,kBAAA;EACA,iBDjCM;ACsClB;AAHY;EACI,qBAAA;EACA,gBAAA;EACA,mCAAA;EACA,gBAAA;EACA,kBAAA;EACA,iBAAA;EACA,kBAAA;EACA,mBAAA;EACA,uCAAA;AAKhB;AAFgB;EACI,YAAA;AAIpB;AADgB;EACI,aAAA;AAGpB;AACY;EAEI,kBAAA;EACA,gBAAA;EACA,mCAAA;AAAhB;AAEgB;EACI,YAAA;AAApB;AAGgB;EACI,YAAA;AADpB","sourcesContent":["@font-face {\r\n    font-family: Wixy;\r\n    src: url(\"./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2\") format(\"woff\");\r\n}\r\n\r\n$ns-layout-color : #00a4e0;\r\n$ns-common-font : Wixy;\r\n\r\n/**\r\n     Common Mixins\r\n**/\r\n\r\n@mixin common_btn {\r\n    @include button();\r\n    @include center();\r\n    background-color: $ns-layout-color;\r\n    border: 1px solid $ns-layout-color;\r\n    font-weight: 350;\r\n    color: #fff;\r\n    transition: all .5s;\r\n    &:hover{\r\n        color: #000;\r\n        background-color: unset;\r\n    }\r\n}\r\n\r\n\r\n@mixin center {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n@mixin button {\r\n    height: 50px;\r\n    width: 160px;\r\n    border-radius: 10px;\r\n}\r\n\r\n@mixin flex-box {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\n@mixin flex-grid {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}","@use \"./Variables.scss\" as V;\r\n\r\n@keyframes slideFromAbove {\r\n    0% {\r\n        visibility: hidden;\r\n        opacity: 0;\r\n        transform: translateY(100px);\r\n    }\r\n\r\n    100% {\r\n        visibility: visible;\r\n        opacity: 1;\r\n        transform: translateY(0px);\r\n    }\r\n}\r\n\r\nns-x-quote {\r\n    display: block;\r\n    width: 100%;\r\n    --ns-major-Fontsize: 65pt;\r\n    --ns-minor-Fontsize: 15pt;\r\n    --ns-content-size: 800px;\r\n}\r\n\r\nns-x-quote .ponaco-splitview-6 {\r\n    margin: 0 0 0px 0;\r\n\r\n    .wx-component-6 {\r\n        border: 1px solid red;\r\n        width: 100%;\r\n        height: var(--ns-content-size);\r\n        // background-image: url(\"../resources/vision.jpg\");\r\n        background-size: cover;\r\n        background-attachment: fixed;\r\n        background-repeat: no-repeat;\r\n        @include V.center();\r\n\r\n        .main-content-holder {\r\n            width: fit-content;\r\n            font-family: V.$ns-common-font;\r\n\r\n            .x-content-1 {\r\n                border: 1px solid red;\r\n                font-weight: 350;\r\n                font-size: var(--ns-major-Fontsize);\r\n                max-width: 950px;\r\n                text-align: center;\r\n                margin-left: 20px;\r\n                margin-right: 20px;\r\n                margin-bottom: 20px;\r\n                animation: slideFromAbove 1.5s forwards;\r\n\r\n                //    color: rgb(233, 233, 233);\r\n                &::before {\r\n                    content: '\"';\r\n                }\r\n\r\n                &::after {\r\n                    content: '\".';\r\n                }\r\n            }\r\n\r\n            .x-content-2 {\r\n                // animation: slideFromAbove 1.5s forwards;\r\n                text-align: center;\r\n                font-weight: 500;\r\n                font-size: var(--ns-minor-Fontsize);\r\n\r\n                &::before {\r\n                    content: \"~\";\r\n                }\r\n\r\n                &::after {\r\n                    content: \"~\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/StaffView.Member.scss":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/StaffView.Member.scss ***!
  \**************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "ns-x-member {\n  display: block;\n}\n\nns-x-member .xb-cl-memeber {\n  width: 100%;\n}\nns-x-member .xb-cl-memeber .xb-cl-wrapper {\n  width: 280px;\n  height: 280px;\n  border: 1px solid black;\n  border-radius: 20px;\n}\nns-x-member .xb-cl-memeber .xb-cl-wrapper .xb-picture-container {\n  width: 100%;\n  height: 150px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\nns-x-member .xb-cl-memeber .xb-cl-wrapper .xb-picture-container .xb-picture-container-wrapper {\n  border: 1px solid blue;\n  border-radius: 50%;\n  width: 120px;\n  height: 120px;\n  background-size: cover;\n  background-repeat: no-repeat;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\nns-x-member .xb-cl-memeber .xb-cl-wrapper .xb-content {\n  height: 130px;\n}\nns-x-member .xb-cl-memeber .xb-cl-wrapper .xb-content .xb-content-wrapper {\n  margin-top: 15px;\n}\nns-x-member .xb-cl-memeber .xb-cl-wrapper .xb-content .xb-content-wrapper .xb-text {\n  margin-left: 20px;\n}\nns-x-member .xb-cl-memeber .xb-cl-wrapper .xb-content .xb-content-wrapper .xb-ct-1 {\n  margin-top: 10px;\n  font-size: 14pt;\n}\nns-x-member .xb-cl-memeber .xb-cl-wrapper .xb-content .xb-content-wrapper .xb-ct-2 {\n  margin-top: 8px;\n  line-height: 1;\n  color: rgba(0, 0, 0, 0.6039215686);\n  font-size: 12pt;\n}\nns-x-member .xb-cl-memeber .xb-cl-wrapper .xb-content .xb-content-wrapper .xb-ct-3 {\n  color: rgb(0, 81, 255);\n  margin-top: 3px;\n  font-size: 11pt;\n}", "",{"version":3,"sources":["webpack://./src/ns/design/StaffView.Member.scss"],"names":[],"mappings":"AAAA;EACI,cAAA;AACJ;;AAEA;EACI,WAAA;AACJ;AACI;EACI,YAAA;EACA,aAAA;EACA,uBAAA;EAEA,mBAAA;AAAR;AACQ;EACI,WAAA;EACA,aAAA;EACA,aAAA;EACA,mBAAA;EACA,uBAAA;AACZ;AAAY;EACI,sBAAA;EACA,kBAAA;EACA,YAAA;EACA,aAAA;EACA,sBAAA;EACA,4BAAA;EACA,aAAA;EACA,mBAAA;EACA,uBAAA;AAEhB;AACQ;EACI,aAAA;AACZ;AAAY;EACI,gBAAA;AAEhB;AADgB;EACI,iBAAA;AAGpB;AADgB;EACI,gBAAA;EACA,eAAA;AAGpB;AADgB;EACI,eAAA;EACA,cAAA;EACA,kCAAA;EACA,eAAA;AAGpB;AADgB;EACI,sBAAA;EACA,eAAA;EACA,eAAA;AAGpB","sourcesContent":["ns-x-member {\r\n    display: block;\r\n}\r\n\r\nns-x-member .xb-cl-memeber {\r\n    width: 100%;\r\n\r\n    .xb-cl-wrapper {\r\n        width: 280px;\r\n        height: 280px;\r\n        border: 1px solid black;\r\n\r\n        border-radius: 20px;\r\n        .xb-picture-container {\r\n            width: 100%;\r\n            height: 150px;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            .xb-picture-container-wrapper {\r\n                border: 1px solid blue;\r\n                border-radius: 50%;\r\n                width: 120px;\r\n                height: 120px;\r\n                background-size: cover;\r\n                background-repeat: no-repeat;\r\n                display: flex;\r\n                align-items: center;\r\n                justify-content: center;\r\n            }\r\n        }\r\n        .xb-content {\r\n            height: 130px;\r\n            .xb-content-wrapper{\r\n                margin-top: 15px;\r\n                .xb-text{\r\n                    margin-left: 20px;\r\n                }\r\n                .xb-ct-1 {\r\n                    margin-top: 10px;\r\n                    font-size: 14pt;\r\n                }\r\n                .xb-ct-2 {\r\n                    margin-top: 8px;\r\n                    line-height: 1;\r\n                    color: #0000009a;\r\n                    font-size: 12pt;\r\n                }\r\n                .xb-ct-3 {\r\n                    color: rgb(0, 81, 255);\r\n                    margin-top: 3px;\r\n                    font-size: 11pt;\r\n                }\r\n\r\n            }\r\n            \r\n      \r\n        }\r\n    }\r\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/StaffView.dialog.scss":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/StaffView.dialog.scss ***!
  \**************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2 */ "./src/ns/design/fonts/WixMadeforTextVF_W_Wght.8022447a.woff2"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "@font-face {\n  font-family: Wixy;\n  src: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ") format(\"woff\");\n}\n/**\n     Common Mixins\n**/\nns-d-staffdialog {\n  display: block;\n}\n\nns-d-staffdialog .xb-dialog-component {\n  font-family: Wixy;\n  height: 600px;\n  border-top-left-radius: 25px;\n  border-top-right-radius: 25px;\n  border-bottom-left-radius: 25px;\n  border-bottom-right-radius: 25px;\n  background-color: #faf8f8;\n  margin: auto;\n  width: 97%;\n}\nns-d-staffdialog .xb-dialog-component .cb-dashboard-control {\n  border-top-left-radius: 25px;\n  border-top-right-radius: 25px;\n  height: 80px;\n  width: 100%;\n  background-color: rgb(238, 238, 238);\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n}\nns-d-staffdialog .xb-dialog-component .cb-dashboard-control .title-area {\n  margin: 20px 0px 0px 20px;\n  font-size: 25pt;\n}\nns-d-staffdialog .xb-dialog-component .cb-dashboard-control .close-control-wrapper {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 80px;\n  width: 60px;\n}\nns-d-staffdialog .xb-dialog-component .cb-dashboard-control .close-control-wrapper .close-control {\n  font-size: 30pt;\n}\nns-d-staffdialog .xb-dialog-component .cb-dashboard-content {\n  border-bottom-left-radius: 25px;\n  border-bottom-right-radius: 25px;\n  margin-top: 20px;\n  overflow-y: scroll;\n  overflow-x: hidden;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\nns-d-staffdialog .xb-dialog-component .cb-dashboard-content .cb-dashboard-content-wrapper {\n  margin-left: 30px;\n  margin-right: 30px;\n  height: 500px;\n  display: grid;\n  grid-template-columns: auto auto auto auto;\n  column-gap: 50px;\n  row-gap: 50px;\n}", "",{"version":3,"sources":["webpack://./src/ns/design/Variables.scss","webpack://./src/ns/design/StaffView.dialog.scss"],"names":[],"mappings":"AAAA;EACI,iBAAA;EACA,2DAAA;ACCJ;ADKA;;EAAA;ACNA;EAEI,cAAA;AAKJ;;AAFA;EACI,iBDFc;ECGd,aAAA;EACA,4BAAA;EACA,6BAAA;EACA,+BAAA;EACA,gCAAA;EACA,yBAAA;EACA,YAAA;EACA,UAAA;AAKJ;AAJI;EACI,4BAAA;EACA,6BAAA;EACA,YAAA;EACA,WAAA;EACA,oCAAA;EACA,aAAA;EACA,mBAAA;EACA,8BAAA;AAMR;AAJQ;EACI,yBAAA;EACA,eAAA;AAMZ;AAHQ;EACI,aAAA;EACA,mBAAA;EACA,uBAAA;EACA,YAAA;EACA,WAAA;AAKZ;AAHY;EACI,eAAA;AAKhB;AAAI;EACI,+BAAA;EACA,gCAAA;EACA,gBAAA;EACA,kBAAA;EACA,kBAAA;EACA,aAAA;EACA,mBAAA;EACA,uBAAA;AAER;AADQ;EACI,iBAAA;EACA,kBAAA;EACA,aAAA;EAEA,aAAA;EACA,0CAAA;EACA,gBAAA;EACA,aAAA;AAEZ","sourcesContent":["@font-face {\r\n    font-family: Wixy;\r\n    src: url(\"./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2\") format(\"woff\");\r\n}\r\n\r\n$ns-layout-color : #00a4e0;\r\n$ns-common-font : Wixy;\r\n\r\n/**\r\n     Common Mixins\r\n**/\r\n\r\n@mixin common_btn {\r\n    @include button();\r\n    @include center();\r\n    background-color: $ns-layout-color;\r\n    border: 1px solid $ns-layout-color;\r\n    font-weight: 350;\r\n    color: #fff;\r\n    transition: all .5s;\r\n    &:hover{\r\n        color: #000;\r\n        background-color: unset;\r\n    }\r\n}\r\n\r\n\r\n@mixin center {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n@mixin button {\r\n    height: 50px;\r\n    width: 160px;\r\n    border-radius: 10px;\r\n}\r\n\r\n@mixin flex-box {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\n@mixin flex-grid {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}","@use \"./Variables.scss\" as V;\r\n\r\nns-d-staffdialog {\r\n\r\n    display: block;\r\n}\r\n\r\nns-d-staffdialog .xb-dialog-component {\r\n    font-family: V.$ns-common-font;\r\n    height: 600px;\r\n    border-top-left-radius: 25px;\r\n    border-top-right-radius: 25px;\r\n    border-bottom-left-radius: 25px;\r\n    border-bottom-right-radius: 25px;\r\n    background-color: #faf8f8;\r\n    margin: auto;\r\n    width: 97%;\r\n    .cb-dashboard-control {\r\n        border-top-left-radius: 25px;\r\n        border-top-right-radius: 25px;\r\n        height: 80px;\r\n        width: 100%;\r\n        background-color: rgb(238, 238, 238);\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: space-between;\r\n\r\n        .title-area {\r\n            margin: 20px 0px 0px 20px;\r\n            font-size: 25pt;\r\n        }\r\n\r\n        .close-control-wrapper {\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            height: 80px;\r\n            width: 60px;\r\n\r\n            .close-control {\r\n                font-size: 30pt;\r\n            }\r\n        }\r\n    }\r\n\r\n    .cb-dashboard-content {\r\n        border-bottom-left-radius: 25px;\r\n        border-bottom-right-radius: 25px;\r\n        margin-top: 20px;\r\n        overflow-y: scroll;\r\n        overflow-x: hidden;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        .cb-dashboard-content-wrapper {\r\n            margin-left: 30px;\r\n            margin-right: 30px;\r\n            height: 500px;\r\n         \r\n            display: grid;\r\n            grid-template-columns: auto auto auto auto;\r\n            column-gap: 50px;\r\n            row-gap: 50px;\r\n        }\r\n    }\r\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/StaffView.main.scss":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/StaffView.main.scss ***!
  \************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2 */ "./src/ns/design/fonts/WixMadeforTextVF_W_Wght.8022447a.woff2"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "@font-face {\n  font-family: Wixy;\n  src: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ") format(\"woff\");\n}\n/**\n     Common Mixins\n**/\nns-x-staffview {\n  display: block;\n}\n\nns-x-staffview .xb-staffview {\n  width: 100%;\n  height: auto;\n}\n\nns-x-staffview .xb-staffview {\n  font-family: Wixy;\n}\nns-x-staffview .xb-staffview .tr-title-area-wrapper {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 20px;\n}\nns-x-staffview .xb-staffview .tr-title-area-wrapper .tr-title-container {\n  font-size: 30pt;\n}\nns-x-staffview .xb-staffview .tr-container-elements {\n  width: 100%;\n  height: auto;\n}\nns-x-staffview .xb-staffview .tr-container-elements .tr-container-wrapper {\n  display: grid;\n  grid-template-rows: 1fr 3fr;\n}\nns-x-staffview .xb-staffview .tr-container-elements .tr-container-wrapper .tr-view-1 {\n  width: 100%;\n}\nns-x-staffview .xb-staffview .tr-container-elements .tr-container-wrapper .tr-view-1 .tr-view-1-wrapper {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n}\nns-x-staffview .xb-staffview .tr-container-elements .tr-container-wrapper .tr-view-1 .tr-view-1-wrapper .cl-view-1 {\n  height: 500px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\nns-x-staffview .xb-staffview .tr-container-elements .tr-container-wrapper .tr-view-1 .tr-view-1-wrapper .cl-view-1 .cl-picture-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 280px;\n  width: 280px;\n  border: 1px solid black;\n  border-radius: 50%;\n}\nns-x-staffview .xb-staffview .tr-container-elements .tr-container-wrapper .tr-view-1 .tr-view-1-wrapper .cl-view-2 {\n  height: 500px;\n}\nns-x-staffview .xb-staffview .tr-container-elements .tr-container-wrapper .tr-view-1 .tr-view-1-wrapper .cl-view-2 .cl-content-text-holder {\n  margin: 70px 30px 30px 30px;\n}\nns-x-staffview .xb-staffview .tr-container-elements .tr-container-wrapper .tr-view-1 .tr-view-1-wrapper .cl-view-2 .cl-content-text-holder .ty-1 {\n  font-size: 35pt;\n}\nns-x-staffview .xb-staffview .tr-container-elements .tr-container-wrapper .tr-view-1 .tr-view-1-wrapper .cl-view-2 .cl-content-text-holder .ty-2 {\n  color: rgba(0, 0, 0, 0.795);\n  margin-top: 20px;\n  font-size: 13pt;\n}\nns-x-staffview .xb-staffview .tr-container-elements .tr-container-wrapper .tr-view-1 .tr-view-1-wrapper .cl-view-2 .cl-content-text-holder .ty-3 {\n  color: rgba(0, 0, 0, 0.795);\n  margin-top: 20px;\n  font-size: 13pt;\n}\nns-x-staffview .xb-staffview .tr-container-elements .tr-container-wrapper .tr-view-2 {\n  height: fit-content;\n  width: 100%;\n}\nns-x-staffview .xb-staffview .tr-container-elements .tr-container-wrapper .tr-view-2 .tr-content {\n  margin-top: 100px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  justify-content: center;\n}\nns-x-staffview .xb-staffview .tr-container-elements .tr-container-wrapper .tr-view-2 .tr-content .tr-content-wrapper .tr-members-wrapper {\n  display: grid;\n  grid-template-columns: auto auto auto auto;\n  column-gap: 50px;\n  row-gap: 50px;\n}\nns-x-staffview .xb-staffview .tr-container-elements .tr-container-wrapper .tr-view-2 .tr-content-2 {\n  height: 100px;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-end;\n}\nns-x-staffview .xb-staffview .tr-container-elements .tr-container-wrapper .tr-view-2 .tr-content-2 .selective-btn {\n  margin-right: 50px;\n  height: 50px;\n  width: 160px;\n  border-radius: 10px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #00a4e0;\n  border: 1px solid #00a4e0;\n  font-weight: 350;\n  color: #fff;\n  transition: all 0.5s;\n}\nns-x-staffview .xb-staffview .tr-container-elements .tr-container-wrapper .tr-view-2 .tr-content-2 .selective-btn:hover {\n  color: #000;\n  background-color: unset;\n}", "",{"version":3,"sources":["webpack://./src/ns/design/Variables.scss","webpack://./src/ns/design/StaffView.main.scss"],"names":[],"mappings":"AAAA;EACI,iBAAA;EACA,2DAAA;ACCJ;ADKA;;EAAA;ACNA;EACI,cAAA;AAMJ;;AAHA;EACI,WAAA;EACA,YAAA;AAMJ;;AAHA;EACI,iBDNc;ACYlB;AAJI;EAEI,aAAA;EACA,mBAAA;EACA,uBAAA;EACA,mBAAA;AAKR;AAJQ;EACI,eAAA;AAMZ;AAFI;EACI,WAAA;EACA,YAAA;AAIR;AAFQ;EACI,aAAA;EACA,2BAAA;AAIZ;AAFY;EACI,WAAA;AAIhB;AAFgB;EACI,aAAA;EACA,8BAAA;AAIpB;AAFoB;EAEI,aAAA;EACA,aAAA;EACA,mBAAA;EACA,uBAAA;AAGxB;AADwB;EACI,aAAA;EACA,mBAAA;EACA,uBAAA;EACA,aAAA;EACA,YAAA;EACA,uBAAA;EACA,kBAAA;AAG5B;AACoB;EACI,aAAA;AACxB;AACwB;EACI,2BAAA;AAC5B;AAA4B;EACI,eAAA;AAEhC;AAA4B;EACI,2BAAA;EACA,gBAAA;EACA,eAAA;AAEhC;AAA4B;EACI,2BAAA;EACA,gBAAA;EACA,eAAA;AAEhC;AAKY;EACI,mBAAA;EACA,WAAA;AAHhB;AAIgB;EACI,iBAAA;EACA,WAAA;EACA,aAAA;EACA,mBAAA;EACA,sBAAA;EACA,uBAAA;AAFpB;AAKwB;EACI,aAAA;EACA,0CAAA;EACA,gBAAA;EACA,aAAA;AAH5B;AAQgB;EACI,aAAA;EACA,aAAA;EACA,mBAAA;EACA,mBAAA;EACA,yBAAA;AANpB;AAQoB;EACI,kBAAA;ED5EpB,YAAA;EACA,YAAA;EACA,mBAAA;EARA,aAAA;EACA,mBAAA;EACA,uBAAA;EAfA,yBAVe;EAWf,yBAAA;EACA,gBAAA;EACA,WAAA;EACA,oBAAA;ACgGJ;AD/FI;EACI,WAAA;EACA,uBAAA;ACiGR","sourcesContent":["@font-face {\r\n    font-family: Wixy;\r\n    src: url(\"./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2\") format(\"woff\");\r\n}\r\n\r\n$ns-layout-color : #00a4e0;\r\n$ns-common-font : Wixy;\r\n\r\n/**\r\n     Common Mixins\r\n**/\r\n\r\n@mixin common_btn {\r\n    @include button();\r\n    @include center();\r\n    background-color: $ns-layout-color;\r\n    border: 1px solid $ns-layout-color;\r\n    font-weight: 350;\r\n    color: #fff;\r\n    transition: all .5s;\r\n    &:hover{\r\n        color: #000;\r\n        background-color: unset;\r\n    }\r\n}\r\n\r\n\r\n@mixin center {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n@mixin button {\r\n    height: 50px;\r\n    width: 160px;\r\n    border-radius: 10px;\r\n}\r\n\r\n@mixin flex-box {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\n@mixin flex-grid {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}","@use \"./Variables.scss\" as V;\r\n\r\nns-x-staffview {\r\n    display: block;\r\n}\r\n\r\nns-x-staffview .xb-staffview {\r\n    width: 100%;\r\n    height: auto;\r\n}\r\n\r\nns-x-staffview .xb-staffview {\r\n    font-family: V.$ns-common-font;\r\n\r\n    .tr-title-area-wrapper {\r\n\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        margin-bottom: 20px;\r\n        .tr-title-container {\r\n            font-size: 30pt;\r\n        }\r\n    }\r\n\r\n    .tr-container-elements {\r\n        width: 100%;\r\n        height: auto;\r\n\r\n        .tr-container-wrapper {\r\n            display: grid;\r\n            grid-template-rows: 1fr 3fr;\r\n\r\n            .tr-view-1 {\r\n                width: 100%;\r\n\r\n                .tr-view-1-wrapper {\r\n                    display: grid;\r\n                    grid-template-columns: 1fr 1fr;\r\n\r\n                    .cl-view-1 {\r\n\r\n                        height: 500px;\r\n                        display: flex;\r\n                        align-items: center;\r\n                        justify-content: center;\r\n\r\n                        .cl-picture-container {\r\n                            display: flex;\r\n                            align-items: center;\r\n                            justify-content: center;\r\n                            height: 280px;\r\n                            width: 280px;\r\n                            border: 1px solid black;\r\n                            border-radius: 50%;\r\n                        }\r\n                    }\r\n\r\n                    .cl-view-2 {\r\n                        height: 500px;\r\n\r\n                        .cl-content-text-holder {\r\n                            margin: 70px 30px 30px 30px;\r\n                            .ty-1 {\r\n                                font-size: 35pt;\r\n                            }\r\n                            .ty-2 {\r\n                                color: rgba(0, 0, 0, 0.795);\r\n                                margin-top: 20px;\r\n                                font-size: 13pt;\r\n                            }\r\n                            .ty-3 {\r\n                                color: rgba(0, 0, 0, 0.795);\r\n                                margin-top: 20px;\r\n                                font-size: 13pt;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            .tr-view-2 {\r\n                height: fit-content;\r\n                width: 100%;\r\n                .tr-content {\r\n                    margin-top: 100px;\r\n                    width: 100%;\r\n                    display: flex;\r\n                    align-items: center;\r\n                    flex-direction: column;\r\n                    justify-content: center;\r\n\r\n                    .tr-content-wrapper {\r\n                        .tr-members-wrapper {\r\n                            display: grid;\r\n                            grid-template-columns: auto auto auto auto;\r\n                            column-gap: 50px;\r\n                            row-gap: 50px;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                .tr-content-2 {\r\n                    height: 100px;\r\n                    display: flex;\r\n                    flex-direction: row;\r\n                    align-items: center;\r\n                    justify-content: flex-end;\r\n\r\n                    .selective-btn {\r\n                        margin-right: 50px;\r\n                        @include V.common_btn();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/WelcomeNote.scss":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/WelcomeNote.scss ***!
  \*********************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2 */ "./src/ns/design/fonts/WixMadeforTextVF_W_Wght.8022447a.woff2"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "@font-face {\n  font-family: Wixy;\n  src: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ") format(\"woff\");\n}\n/**\n     Common Mixins\n**/\nns-x-welcomenote {\n  display: block;\n}\n\nns-x-welcomenote .xb-about-component {\n  width: 100%;\n  height: 350px;\n}\n\nns-x-welcomenote .xb-about-component {\n  font-family: Wixy;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\nns-x-welcomenote .xb-about-component .xb-wrapper {\n  width: fit-content;\n  margin-left: 50px;\n  border-left: 4px solid black;\n  height: 180px;\n  padding-left: 15px;\n}\nns-x-welcomenote .xb-about-component .xb-wrapper .tr-title {\n  width: fit-content;\n}\nns-x-welcomenote .xb-about-component .xb-wrapper .tr-title .wrapper {\n  font-size: 55pt;\n  width: 500px;\n  font-weight: 300;\n}\nns-x-welcomenote .xb-about-component .xb-wrapper .tr-x-line {\n  background-color: unset;\n  height: 2px;\n  width: 300px;\n}\nns-x-welcomenote .xb-about-component .xb-wrapper .tr-x-description {\n  color: rgba(0, 0, 0, 0.61);\n  margin-top: 10px;\n  font-size: 18pt;\n}", "",{"version":3,"sources":["webpack://./src/ns/design/Variables.scss","webpack://./src/ns/design/WelcomeNote.scss"],"names":[],"mappings":"AAAA;EACI,iBAAA;EACA,2DAAA;ACCJ;ADKA;;EAAA;ACNA;EACI,cAAA;AAMJ;;AAHA;EACI,WAAA;EACA,aAAA;AAMJ;;AAHA;EACI,iBDNc;ECOd,aAAA;EACA,sBAAA;EACA,uBAAA;AAMJ;AALI;EACI,kBAAA;EACA,iBAAA;EACA,4BAAA;EACA,aAAA;EACA,kBAAA;AAOR;AALQ;EACI,kBAAA;AAOZ;AANY;EACI,eAAA;EACA,YAAA;EACA,gBAAA;AAQhB;AALQ;EACI,uBAAA;EACA,WAAA;EACA,YAAA;AAOZ;AALQ;EACI,0BAAA;EACA,gBAAA;EACA,eAAA;AAOZ","sourcesContent":["@font-face {\r\n    font-family: Wixy;\r\n    src: url(\"./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2\") format(\"woff\");\r\n}\r\n\r\n$ns-layout-color : #00a4e0;\r\n$ns-common-font : Wixy;\r\n\r\n/**\r\n     Common Mixins\r\n**/\r\n\r\n@mixin common_btn {\r\n    @include button();\r\n    @include center();\r\n    background-color: $ns-layout-color;\r\n    border: 1px solid $ns-layout-color;\r\n    font-weight: 350;\r\n    color: #fff;\r\n    transition: all .5s;\r\n    &:hover{\r\n        color: #000;\r\n        background-color: unset;\r\n    }\r\n}\r\n\r\n\r\n@mixin center {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n@mixin button {\r\n    height: 50px;\r\n    width: 160px;\r\n    border-radius: 10px;\r\n}\r\n\r\n@mixin flex-box {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\n@mixin flex-grid {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}","@use \"./Variables.scss\" as V;\r\n\r\nns-x-welcomenote {\r\n    display: block;\r\n}\r\n\r\nns-x-welcomenote .xb-about-component {\r\n    width: 100%;\r\n    height: 350px;\r\n}\r\n\r\nns-x-welcomenote .xb-about-component {\r\n    font-family: V.$ns-common-font;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    .xb-wrapper {\r\n        width: fit-content;\r\n        margin-left: 50px;\r\n        border-left: 4px solid black;\r\n        height: 180px;\r\n        padding-left: 15px;\r\n\r\n        .tr-title {\r\n            width: fit-content;\r\n            .wrapper{\r\n                font-size: 55pt;\r\n                width: 500px;\r\n                font-weight: 300;\r\n            }\r\n        }\r\n        .tr-x-line {\r\n            background-color: unset;\r\n            height: 2px;\r\n            width: 300px;\r\n        }\r\n        .tr-x-description {\r\n            color: rgba(0, 0, 0, 0.61);\r\n            margin-top: 10px;\r\n            font-size:18pt;\r\n        }\r\n    }\r\n\r\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/Xgoal.scss":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/Xgoal.scss ***!
  \***************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2 */ "./src/ns/design/fonts/WixMadeforTextVF_W_Wght.8022447a.woff2"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "@font-face {\n  font-family: Wixy;\n  src: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ") format(\"woff\");\n}\n/**\n     Common Mixins\n**/\nns-x-xgoal {\n  display: block;\n}\n\nns-x-xgoal .xb-goal-component {\n  font-family: Wixy;\n  width: 100%;\n  margin: 90px 0px 90px 0px;\n}\nns-x-xgoal .xb-goal-component .tr-title-area-wrapper {\n  height: 100px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 40pt;\n}\nns-x-xgoal .xb-goal-component .tr-description-wrapper {\n  height: 100px;\n  font-size: 18pt;\n  display: flex;\n  justify-content: center;\n}\nns-x-xgoal .xb-goal-component .tr-description-wrapper .tr-description-container {\n  text-align: center;\n  width: fit-content;\n}", "",{"version":3,"sources":["webpack://./src/ns/design/Variables.scss","webpack://./src/ns/design/Xgoal.scss"],"names":[],"mappings":"AAAA;EACI,iBAAA;EACA,2DAAA;ACCJ;ADKA;;EAAA;ACNA;EACI,cAAA;AAMJ;;AAFA;EACI,iBDFc;ECGd,WAAA;EACA,yBAAA;AAKJ;AAJI;EACI,aAAA;EACA,aAAA;EACA,mBAAA;EACA,uBAAA;EACA,eAAA;AAMR;AAJI;EACI,aAAA;EACA,eAAA;EACA,aAAA;EACA,uBAAA;AAMR;AALQ;EACI,kBAAA;EACA,kBAAA;AAOZ","sourcesContent":["@font-face {\r\n    font-family: Wixy;\r\n    src: url(\"./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2\") format(\"woff\");\r\n}\r\n\r\n$ns-layout-color : #00a4e0;\r\n$ns-common-font : Wixy;\r\n\r\n/**\r\n     Common Mixins\r\n**/\r\n\r\n@mixin common_btn {\r\n    @include button();\r\n    @include center();\r\n    background-color: $ns-layout-color;\r\n    border: 1px solid $ns-layout-color;\r\n    font-weight: 350;\r\n    color: #fff;\r\n    transition: all .5s;\r\n    &:hover{\r\n        color: #000;\r\n        background-color: unset;\r\n    }\r\n}\r\n\r\n\r\n@mixin center {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n@mixin button {\r\n    height: 50px;\r\n    width: 160px;\r\n    border-radius: 10px;\r\n}\r\n\r\n@mixin flex-box {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\n@mixin flex-grid {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}","@use \"./Variables.scss\"as V;\r\n\r\nns-x-xgoal {\r\n    display: block;\r\n\r\n}\r\n\r\nns-x-xgoal .xb-goal-component {\r\n    font-family: V.$ns-common-font;\r\n    width: 100%;\r\n    margin: 90px 0px 90px 0px;\r\n    .tr-title-area-wrapper {\r\n        height: 100px;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        font-size: 40pt;\r\n    }\r\n    .tr-description-wrapper{\r\n        height: 100px;;\r\n        font-size: 18pt;\r\n        display: flex;\r\n        justify-content: center;\r\n        .tr-description-container{\r\n            text-align: center;\r\n            width: fit-content;\r\n        }\r\n    }\r\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/corevalues.scss":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/corevalues.scss ***!
  \********************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2 */ "./src/ns/design/fonts/WixMadeforTextVF_W_Wght.8022447a.woff2"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "@font-face {\n  font-family: Wixy;\n  src: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ") format(\"woff\");\n}\n/**\n     Common Mixins\n**/\n.corevalues-main-section-component {\n  font-family: Wixy;\n}\n.corevalues-main-section-component .intro-section h2 {\n  font-size: 30pt;\n  text-align: center;\n}\n.corevalues-main-section-component .intro-section p {\n  text-align: center;\n  font-size: 15pt;\n}\n.corevalues-main-section-component .main-content-container {\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-template-rows: 1fr 1fr;\n}\n.corevalues-main-section-component .main-content-container .split-section-1 {\n  margin: 50px;\n}\n.corevalues-main-section-component .main-content-container .split-section-1 p {\n  font-size: 13pt;\n}\n.corevalues-main-section-component .main-content-container .split-section-1 .title-holder {\n  margin: 10px;\n  display: grid;\n  grid-template-columns: 1fr 30px;\n  grid-template-rows: 1fr;\n}\n.corevalues-main-section-component .main-content-container .split-section-1 .title-holder h2 {\n  font-size: 20pt;\n}\n.corevalues-main-section-component .main-content-container .split-section-1 .title-holder .arithmetic {\n  border: solid 1px #000000;\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n}\n.corevalues-main-section-component .main-content-container .split-section-1 .title-holder .arithmetic h2 {\n  text-align: center;\n  padding: 10px;\n  font-size: 15pt;\n}", "",{"version":3,"sources":["webpack://./src/ns/design/Variables.scss","webpack://./src/ns/design/corevalues.scss"],"names":[],"mappings":"AAAA;EACI,iBAAA;EACA,2DAAA;ACCJ;ADKA;;EAAA;ACNA;EACI,iBDGc;ACGlB;AAHQ;EACI,eAAA;EACA,kBAAA;AAKZ;AAFQ;EACI,kBAAA;EACA,eAAA;AAIZ;AAAI;EACI,aAAA;EACA,kCAAA;EACA,2BAAA;AAER;AAAQ;EACI,YAAA;AAEZ;AAAY;EACI,eAAA;AAEhB;AACY;EACI,YAAA;EACA,aAAA;EACA,+BAAA;EACA,uBAAA;AAChB;AACgB;EACI,eAAA;AACpB;AAEgB;EACI,yBAAA;EACA,WAAA;EACA,YAAA;EACA,kBAAA;AAApB;AAEoB;EACI,kBAAA;EACA,aAAA;EACA,eAAA;AAAxB","sourcesContent":["@font-face {\r\n    font-family: Wixy;\r\n    src: url(\"./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2\") format(\"woff\");\r\n}\r\n\r\n$ns-layout-color : #00a4e0;\r\n$ns-common-font : Wixy;\r\n\r\n/**\r\n     Common Mixins\r\n**/\r\n\r\n@mixin common_btn {\r\n    @include button();\r\n    @include center();\r\n    background-color: $ns-layout-color;\r\n    border: 1px solid $ns-layout-color;\r\n    font-weight: 350;\r\n    color: #fff;\r\n    transition: all .5s;\r\n    &:hover{\r\n        color: #000;\r\n        background-color: unset;\r\n    }\r\n}\r\n\r\n\r\n@mixin center {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n@mixin button {\r\n    height: 50px;\r\n    width: 160px;\r\n    border-radius: 10px;\r\n}\r\n\r\n@mixin flex-box {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\n@mixin flex-grid {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}","@use \"./Variables.scss\" as V;\r\n\r\n.corevalues-main-section-component {\r\n    font-family: V.$ns-common-font;\r\n\r\n    .intro-section {\r\n        h2 {\r\n            font-size: 30pt;\r\n            text-align: center;\r\n        }\r\n\r\n        p {\r\n            text-align: center;\r\n            font-size: 15pt;\r\n        }\r\n    }\r\n\r\n    .main-content-container {\r\n        display: grid;\r\n        grid-template-columns: 1fr 1fr 1fr;\r\n        grid-template-rows: 1fr 1fr;\r\n\r\n        .split-section-1 {\r\n            margin: 50px ;\r\n\r\n            p {\r\n                font-size: 13pt;\r\n            }\r\n\r\n            .title-holder {\r\n                margin: 10px;\r\n                display: grid;\r\n                grid-template-columns: 1fr 30px;\r\n                grid-template-rows: 1fr;\r\n\r\n                h2 {\r\n                    font-size: 20pt;\r\n                }\r\n\r\n                .arithmetic {\r\n                    border: solid 1px #000000;\r\n                    width: 50px;\r\n                    height: 50px;\r\n                    border-radius: 50%;\r\n\r\n                    h2 {\r\n                        text-align: center;\r\n                        padding: 10px;\r\n                        font-size: 15pt;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/dialogHost.scss":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/dialogHost.scss ***!
  \********************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".dialog-host {\n  position: fixed;\n  top: 0px;\n  left: 0px;\n  width: 100%;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.733);\n  z-index: 200000000;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  display: none;\n}", "",{"version":3,"sources":["webpack://./src/ns/design/dialogHost.scss"],"names":[],"mappings":"AAAA;EACI,eAAA;EACA,QAAA;EACA,SAAA;EACA,WAAA;EACA,aAAA;EACA,sCAAA;EACA,kBAAA;EACA,aAAA;EACA,mBAAA;EACA,uBAAA;EACA,aAAA;AACJ","sourcesContent":[".dialog-host {\r\n    position: fixed;\r\n    top: 0px;\r\n    left: 0px;\r\n    width: 100%;\r\n    height: 100vh;\r\n    background-color: rgba(0, 0, 0, 0.733);\r\n    z-index: 200000000;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    display: none;\r\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/edu.scss":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/edu.scss ***!
  \*************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2 */ "./src/ns/design/fonts/WixMadeforTextVF_W_Wght.8022447a.woff2"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "@font-face {\n  font-family: Wixy;\n  src: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ") format(\"woff\");\n}\n/**\n     Common Mixins\n**/\nns-x-edu {\n  display: block;\n  font-family: Wixy;\n}\n\nns-x-edu .ponaco-component-edu {\n  width: 100%;\n  height: 300px;\n  border: 2px solid red;\n}\n\n.ponaco-component-edu .wrapper {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 300px;\n  border: 2px solid purple;\n}\n.ponaco-component-edu .wrapper .info {\n  padding: 20px 20px 20px 20px;\n  font-size: 65pt;\n  border: 5px solid black;\n}", "",{"version":3,"sources":["webpack://./src/ns/design/Variables.scss","webpack://./src/ns/design/edu.scss"],"names":[],"mappings":"AAAA;EACI,iBAAA;EACA,2DAAA;ACCJ;ADKA;;EAAA;ACJA;EACI,cAAA;EACA,iBAAA;AAIJ;;AADA;EAEI,WAAA;EACA,aAAA;EACA,qBAAA;AAGJ;;AACA;EACI,WAAA;EACA,aAAA;EACA,mBAAA;EACA,uBAAA;EACA,aAAA;EACA,wBAAA;AAEJ;AADI;EACI,4BAAA;EACA,eAAA;EACA,uBAAA;AAGR","sourcesContent":["@font-face {\r\n    font-family: Wixy;\r\n    src: url(\"./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2\") format(\"woff\");\r\n}\r\n\r\n$ns-layout-color : #00a4e0;\r\n$ns-common-font : Wixy;\r\n\r\n/**\r\n     Common Mixins\r\n**/\r\n\r\n@mixin common_btn {\r\n    @include button();\r\n    @include center();\r\n    background-color: $ns-layout-color;\r\n    border: 1px solid $ns-layout-color;\r\n    font-weight: 350;\r\n    color: #fff;\r\n    transition: all .5s;\r\n    &:hover{\r\n        color: #000;\r\n        background-color: unset;\r\n    }\r\n}\r\n\r\n\r\n@mixin center {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n@mixin button {\r\n    height: 50px;\r\n    width: 160px;\r\n    border-radius: 10px;\r\n}\r\n\r\n@mixin flex-box {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\n@mixin flex-grid {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}","@use \"./Variables.scss\"as V;\r\n\r\n\r\n\r\nns-x-edu {\r\n    display: block;\r\n    font-family:V.$ns-common-font;\r\n}\r\n\r\nns-x-edu .ponaco-component-edu {\r\n\r\n    width: 100%;\r\n    height: 300px;\r\n    border: 2px solid red;\r\n\r\n}\r\n\r\n.ponaco-component-edu .wrapper {\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 300px;\r\n    border: 2px solid purple;\r\n    .info {\r\n        padding: 20px 20px 20px 20px;\r\n        font-size: 65pt;\r\n        border: 5px solid black;\r\n    }\r\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/history.scss":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/history.scss ***!
  \*****************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2 */ "./src/ns/design/fonts/WixMadeforTextVF_W_Wght.8022447a.woff2"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "@font-face {\n  font-family: Wixy;\n  src: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ") format(\"woff\");\n}\n/**\n     Common Mixins\n**/\n.historyComponent {\n  font-family: Wixy;\n}\n.historyComponent .main-historysection-container .split-layout-divider {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: auto;\n}\n.historyComponent .main-historysection-container .split-layout-divider .section-content-1 h2 {\n  font-size: 30pt;\n}\n.historyComponent .main-historysection-container .split-layout-divider .section-content-1 p {\n  margin-bottom: 30px;\n  font-size: 15pt;\n}\n.historyComponent .main-historysection-container .split-layout-divider .section-content-1 button {\n  height: 50px;\n  width: 160px;\n  border-radius: 10px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #00a4e0;\n  border: 1px solid #00a4e0;\n  font-weight: 350;\n  color: #fff;\n  transition: all 0.5s;\n}\n.historyComponent .main-historysection-container .split-layout-divider .section-content-1 button:hover {\n  color: #000;\n  background-color: unset;\n}\n.historyComponent .main-historysection-container .split-layout-divider .section-content-2 .mini-divider {\n  display: grid;\n  grid-template-columns: auto auto;\n  grid-template-rows: auto auto auto;\n  grid-column-gap: 40px;\n}\n.historyComponent .main-historysection-container .split-layout-divider .section-content-2 .mini-divider .content-class-a {\n  border: 1px solid red;\n  padding-bottom: 100px;\n}\n.historyComponent .main-historysection-container .split-layout-divider .section-content-2 .mini-divider .content-class-a p {\n  font-size: 15pt;\n}\n.historyComponent .main-historysection-container .split-layout-divider .section-content-2 .mini-divider .content-class-b {\n  padding: 50px 0;\n  border: 1px solid green;\n}\n.historyComponent .main-historysection-container .split-layout-divider .section-content-2 .mini-divider .content-class-b p {\n  font-size: 15pt;\n}\n.historyComponent .main-historysection-container .split-layout-divider .section-content-2 .mini-divider .content-class-x {\n  border: 1px solid blue;\n}\n.historyComponent .main-historysection-container .split-layout-divider .section-content-2 .mini-divider .content-class-x p {\n  font-size: 15pt;\n}\n.historyComponent .main-historysection-container .split-layout-divider .section-content-2 .mini-divider .content-class-y {\n  border: 1px solid yellow;\n  padding: 50px 0;\n}\n.historyComponent .main-historysection-container .split-layout-divider .section-content-2 .mini-divider .content-class-y p {\n  font-size: 15pt;\n}", "",{"version":3,"sources":["webpack://./src/ns/design/Variables.scss","webpack://./src/ns/design/history.scss"],"names":[],"mappings":"AAAA;EACI,iBAAA;EACA,2DAAA;ACCJ;ADKA;;EAAA;ACNA;EACI,iBDGc;ACGlB;AAFQ;EACI,aAAA;EACA,8BAAA;EACA,wBAAA;AAIZ;AADgB;EACI,eAAA;AAGpB;AAAgB;EACI,mBAAA;EACA,eAAA;AAEpB;AACgB;EDYZ,YAAA;EACA,YAAA;EACA,mBAAA;EARA,aAAA;EACA,mBAAA;EACA,uBAAA;EAfA,yBAVe;EAWf,yBAAA;EACA,gBAAA;EACA,WAAA;EACA,oBAAA;ACeJ;ADdI;EACI,WAAA;EACA,uBAAA;ACgBR;AAVgB;EACI,aAAA;EACA,gCAAA;EACA,kCAAA;EACA,qBAAA;AAYpB;AAVoB;EACI,qBAAA;EACA,qBAAA;AAYxB;AAVwB;EACI,eAAA;AAY5B;AARoB;EACI,eAAA;EACA,uBAAA;AAUxB;AATwB;EACI,eAAA;AAW5B;AAPoB;EACI,sBAAA;AASxB;AARwB;EACI,eAAA;AAU5B;AANoB;EACI,wBAAA;EACA,eAAA;AAQxB;AAPwB;EACI,eAAA;AAS5B","sourcesContent":["@font-face {\r\n    font-family: Wixy;\r\n    src: url(\"./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2\") format(\"woff\");\r\n}\r\n\r\n$ns-layout-color : #00a4e0;\r\n$ns-common-font : Wixy;\r\n\r\n/**\r\n     Common Mixins\r\n**/\r\n\r\n@mixin common_btn {\r\n    @include button();\r\n    @include center();\r\n    background-color: $ns-layout-color;\r\n    border: 1px solid $ns-layout-color;\r\n    font-weight: 350;\r\n    color: #fff;\r\n    transition: all .5s;\r\n    &:hover{\r\n        color: #000;\r\n        background-color: unset;\r\n    }\r\n}\r\n\r\n\r\n@mixin center {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n@mixin button {\r\n    height: 50px;\r\n    width: 160px;\r\n    border-radius: 10px;\r\n}\r\n\r\n@mixin flex-box {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\n@mixin flex-grid {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}","@use \"./Variables.scss\"as V;\r\n\r\n.historyComponent {\r\n    font-family: V.$ns-common-font;\r\n\r\n    .main-historysection-container {\r\n\r\n        .split-layout-divider {\r\n            display: grid;\r\n            grid-template-columns: 1fr 1fr;\r\n            grid-template-rows: auto;\r\n\r\n            .section-content-1 {\r\n                h2 {\r\n                    font-size: 30pt;\r\n                }\r\n\r\n                p {\r\n                    margin-bottom: 30px;\r\n                    font-size: 15pt;\r\n                }\r\n\r\n                button {\r\n                    @include V.common_btn();\r\n                }\r\n            }\r\n\r\n            .section-content-2 {\r\n                .mini-divider {\r\n                    display: grid;\r\n                    grid-template-columns: auto auto;\r\n                    grid-template-rows: auto auto auto;\r\n                    grid-column-gap: 40px;\r\n\r\n                    .content-class-a {\r\n                        border: 1px solid red;\r\n                        padding-bottom: 100px;\r\n\r\n                        p {\r\n                            font-size: 15pt;\r\n                        }\r\n                    }\r\n\r\n                    .content-class-b {\r\n                        padding: 50px 0;\r\n                        border: 1px solid green;\r\n                        p {\r\n                            font-size: 15pt;\r\n                        }\r\n                    }\r\n\r\n                    .content-class-x {\r\n                        border: 1px solid blue;\r\n                        p {\r\n                            font-size: 15pt;\r\n                        }\r\n                    }\r\n\r\n                    .content-class-y {\r\n                        border: 1px solid yellow;\r\n                        padding: 50px 0;\r\n                        p {\r\n                            font-size: 15pt;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/mission.scss":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/mission.scss ***!
  \*****************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2 */ "./src/ns/design/fonts/WixMadeforTextVF_W_Wght.8022447a.woff2"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "@font-face {\n  font-family: Wixy;\n  src: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ") format(\"woff\");\n}\n/**\n     Common Mixins\n**/\n.ponaco-x-component {\n  font-family: Wixy;\n  width: 100%;\n  height: 300px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: row;\n}\n\n.ponaco-x-component .content-wrapper {\n  width: inherit;\n}\n\n.ponaco-x-component .content-wrapper .title-area {\n  height: 100px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 50pt;\n}\n\n.ponaco-x-component .content-wrapper .description-area {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100px;\n  font-size: 16pt;\n}\n.ponaco-x-component .content-wrapper .description-area .sr2 {\n  text-align: center;\n  width: 90%;\n}", "",{"version":3,"sources":["webpack://./src/ns/design/Variables.scss","webpack://./src/ns/design/mission.scss"],"names":[],"mappings":"AAAA;EACI,iBAAA;EACA,2DAAA;ACCJ;ADKA;;EAAA;ACNA;EACI,iBDGc;ECFd,WAAA;EACA,aAAA;EACA,aAAA;EACA,mBAAA;EACA,uBAAA;EACA,mBAAA;AAMJ;;AAFA;EAKI,cAAA;AACJ;;AAEA;EACI,aAAA;EACA,aAAA;EACA,mBAAA;EACA,uBAAA;EACA,eAAA;AACJ;;AAEA;EACI,aAAA;EACA,mBAAA;EACA,uBAAA;EACA,aAAA;EACA,eAAA;AACJ;AACI;EACI,kBAAA;EACA,UAAA;AACR","sourcesContent":["@font-face {\r\n    font-family: Wixy;\r\n    src: url(\"./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2\") format(\"woff\");\r\n}\r\n\r\n$ns-layout-color : #00a4e0;\r\n$ns-common-font : Wixy;\r\n\r\n/**\r\n     Common Mixins\r\n**/\r\n\r\n@mixin common_btn {\r\n    @include button();\r\n    @include center();\r\n    background-color: $ns-layout-color;\r\n    border: 1px solid $ns-layout-color;\r\n    font-weight: 350;\r\n    color: #fff;\r\n    transition: all .5s;\r\n    &:hover{\r\n        color: #000;\r\n        background-color: unset;\r\n    }\r\n}\r\n\r\n\r\n@mixin center {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n@mixin button {\r\n    height: 50px;\r\n    width: 160px;\r\n    border-radius: 10px;\r\n}\r\n\r\n@mixin flex-box {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\n@mixin flex-grid {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}","@use \"./Variables.scss\" as V;\r\n\r\n.ponaco-x-component  {\r\n    font-family: V.$ns-common-font;\r\n    width: 100%;\r\n    height: 300px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-direction: row;\r\n\r\n}\r\n\r\n.ponaco-x-component .content-wrapper {\r\n\r\n\r\n    \r\n\r\n    width: inherit;\r\n}\r\n\r\n.ponaco-x-component .content-wrapper .title-area {\r\n    height: 100px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-size: 50pt;\r\n}\r\n\r\n.ponaco-x-component .content-wrapper .description-area {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100px;;\r\n    font-size: 16pt;\r\n\r\n    .sr2{\r\n        text-align: center;\r\n        width: 90%;\r\n    }\r\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/overflowNav.scss":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/overflowNav.scss ***!
  \*********************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2 */ "./src/ns/design/fonts/WixMadeforTextVF_W_Wght.8022447a.woff2"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "@font-face {\n  font-family: Wixy;\n  src: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ") format(\"woff\");\n}\n/**\n     Common Mixins\n**/\nns-d-nav {\n  display: none;\n  width: 100%;\n  top: 0px;\n}\nns-d-nav .ov-wrapper {\n  display: none;\n  position: fixed;\n  top: 0px;\n  width: 100%;\n}\nns-d-nav .ov-wrapper .overflow-navigation-bar {\n  font-family: Wixy;\n  width: 100%;\n  height: 80px;\n  display: flex;\n  flex-wrap: nowrap;\n  border: 1px solid rgb(105, 153, 51);\n}\nns-d-nav .ov-wrapper .overflow-navigation-bar > div {\n  flex: 1;\n}\nns-d-nav .ov-wrapper .overflow-navigation-bar .badge-wrapper {\n  border: 1px solid green;\n  margin: 15px 0px 0px 30px;\n  height: 50px;\n  width: 500px;\n  display: grid;\n  grid-template-columns: 100px 400px;\n}\nns-d-nav .ov-wrapper .overflow-navigation-bar .badge-wrapper #badge-icon {\n  margin-left: 20px;\n  width: 50px;\n  height: 50px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n}\nns-d-nav .ov-wrapper .overflow-navigation-bar .badge-wrapper #badge-icon::after {\n  content: \"&\";\n  font-size: 18pt;\n}\nns-d-nav .ov-wrapper .overflow-navigation-bar .badge-wrapper .badge-title {\n  height: 50px;\n  display: flex;\n  align-items: center;\n  color: rgb(0, 0, 0);\n  width: 100%;\n}\nns-d-nav .ov-wrapper .overflow-navigation-bar .control-links {\n  width: 500px;\n}\nns-d-nav .ov-wrapper .overflow-navigation-bar .control-links .navigation-bar-wrapper {\n  display: grid;\n  margin: 20px 30px 0px 0px;\n  grid-template-rows: 40px 50px;\n}\nns-d-nav .ov-wrapper .overflow-navigation-bar .control-links .navigation-bar-wrapper .main-navigation-bar {\n  width: 500px;\n  height: 50px;\n  display: flex;\n  align-items: center;\n}\nns-d-nav .ov-wrapper .overflow-navigation-bar .control-links .navigation-bar-wrapper .main-navigation-bar ul.navigation-items {\n  margin: 0px;\n  padding: 0px;\n  display: flex;\n}\nns-d-nav .ov-wrapper .overflow-navigation-bar .control-links .navigation-bar-wrapper .main-navigation-bar ul.navigation-items li {\n  word-wrap: unset;\n  word-break: keep-all;\n  font-size: 11pt;\n  margin: 0px 30px 5px 30px;\n  list-style: none;\n  border-bottom: 1px solid rgba(0, 0, 0, 0);\n  transition: all 0.4s;\n}\nns-d-nav .ov-wrapper .overflow-navigation-bar .control-links .navigation-bar-wrapper .main-navigation-bar ul.navigation-items li a {\n  text-decoration: none;\n}\nns-d-nav .ov-wrapper .overflow-navigation-bar .control-links .navigation-bar-wrapper .main-navigation-bar ul.navigation-items li:hover {\n  cursor: pointer;\n  border-bottom: 1px solid #000;\n}\nns-d-nav .ov-wrapper .overflow-navigation-bar .content-button {\n  display: flex;\n  justify-content: right;\n  align-items: center;\n  height: 80px;\n  width: 300px;\n  border: 1px solid black;\n}\nns-d-nav .ov-wrapper .overflow-navigation-bar .content-button ns-enroll-button {\n  margin: 0px 30px 0px 0px;\n}", "",{"version":3,"sources":["webpack://./src/ns/design/Variables.scss","webpack://./src/ns/design/overflowNav.scss"],"names":[],"mappings":"AAAA;EACI,iBAAA;EACA,2DAAA;ACCJ;ADKA;;EAAA;ACNA;EACI,aAAA;EACA,WAAA;EAEA,QAAA;AAKJ;AAJI;EACA,aAAA;EAEI,eAAA;EACA,QAAA;EACA,WAAA;AAKR;AAJQ;EACI,iBDRM;ECSN,WAAA;EACA,YAAA;EACA,aAAA;EACA,iBAAA;EACA,mCAAA;AAMZ;AALc;EACI,OAAA;AAOlB;AALY;EACI,uBAAA;EACA,yBAAA;EACA,YAAA;EACA,YAAA;EACA,aAAA;EACA,kCAAA;AAOhB;AANgB;EACI,iBAAA;EACA,WAAA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,eAAA;AAQpB;AAPoB;EACI,YAAA;EACA,eAAA;AASxB;AALgB;EACI,YAAA;EACA,aAAA;EACA,mBAAA;EACA,mBAAA;EACA,WAAA;AAOpB;AAJY;EACI,YAAA;AAMhB;AALgB;EACI,aAAA;EACA,yBAAA;EACA,6BAAA;AAOpB;AALoB;EACI,YAAA;EACA,YAAA;EACA,aAAA;EACA,mBAAA;AAOxB;AALwB;EACI,WAAA;EACA,YAAA;EACA,aAAA;AAO5B;AAL4B;EACI,gBAAA;EACA,oBAAA;EACA,eAAA;EACA,yBAAA;EACA,gBAAA;EACA,yCAAA;EACA,oBAAA;AAOhC;AANgC;EACI,qBAAA;AAQpC;AANgC;EACI,eAAA;EACA,6BAAA;AAQpC;AADY;EACI,aAAA;EACA,sBAAA;EACA,mBAAA;EACA,YAAA;EACA,YAAA;EACA,uBAAA;AAGhB;AAFgB;EACI,wBAAA;AAIpB","sourcesContent":["@font-face {\r\n    font-family: Wixy;\r\n    src: url(\"./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2\") format(\"woff\");\r\n}\r\n\r\n$ns-layout-color : #00a4e0;\r\n$ns-common-font : Wixy;\r\n\r\n/**\r\n     Common Mixins\r\n**/\r\n\r\n@mixin common_btn {\r\n    @include button();\r\n    @include center();\r\n    background-color: $ns-layout-color;\r\n    border: 1px solid $ns-layout-color;\r\n    font-weight: 350;\r\n    color: #fff;\r\n    transition: all .5s;\r\n    &:hover{\r\n        color: #000;\r\n        background-color: unset;\r\n    }\r\n}\r\n\r\n\r\n@mixin center {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n@mixin button {\r\n    height: 50px;\r\n    width: 160px;\r\n    border-radius: 10px;\r\n}\r\n\r\n@mixin flex-box {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\n@mixin flex-grid {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}","@use \"./Variables.scss\" as V;\r\n\r\nns-d-nav {\r\n    display: none;\r\n    width: 100%;\r\n    // position: absolute;\r\n    top: 0px;\r\n    .ov-wrapper{\r\n    display: none;\r\n\r\n        position: fixed;\r\n        top: 0px;\r\n        width: 100%;\r\n        .overflow-navigation-bar {\r\n            font-family: V.$ns-common-font;\r\n            width: 100%;\r\n            height: 80px;\r\n            display: flex;\r\n            flex-wrap: nowrap;\r\n            border: 1px solid rgb(105, 153, 51);\r\n              > div {\r\n                  flex: 1;\r\n              }\r\n            .badge-wrapper {\r\n                border: 1px solid green;\r\n                margin: 15px 0px 0px 30px;\r\n                height: 50px;\r\n                width: 500px;\r\n                display: grid;\r\n                grid-template-columns: 100px 400px;\r\n                #badge-icon {\r\n                    margin-left: 20px;\r\n                    width: 50px;\r\n                    height: 50px;\r\n                    display: flex;\r\n                    justify-content: center;\r\n                    align-items: center;\r\n                    cursor: pointer;\r\n                    &::after{\r\n                        content: \"&\";\r\n                        font-size: 18pt;\r\n                    }\r\n                }\r\n    \r\n                .badge-title {\r\n                    height: 50px;\r\n                    display: flex;\r\n                    align-items: center;\r\n                    color: rgb(0, 0, 0);\r\n                    width: 100%;\r\n                }\r\n            }\r\n            .control-links {\r\n                width: 500px;\r\n                .navigation-bar-wrapper {\r\n                    display: grid;\r\n                    margin: 20px 30px 0px 0px;\r\n                    grid-template-rows: 40px 50px;\r\n    \r\n                    .main-navigation-bar {\r\n                        width: 500px;\r\n                        height: 50px;\r\n                        display: flex;\r\n                        align-items: center;\r\n    \r\n                        ul.navigation-items {\r\n                            margin: 0px;\r\n                            padding: 0px;\r\n                            display: flex;\r\n    \r\n                            li {\r\n                                word-wrap: unset;\r\n                                word-break: keep-all;\r\n                                font-size: 11pt;\r\n                                margin: 0px 30px 5px 30px;\r\n                                list-style: none;\r\n                                border-bottom: 1px solid #00000000;\r\n                                transition: all .4s;\r\n                                a{\r\n                                    text-decoration: none;\r\n                                }\r\n                                &:hover {\r\n                                    cursor: pointer;\r\n                                    border-bottom: 1px solid #000;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            .content-button{\r\n                display: flex;\r\n                justify-content: right;\r\n                align-items: center;\r\n                height: 80px;\r\n                width: 300px;\r\n                border: 1px solid black;\r\n                ns-enroll-button{\r\n                    margin: 0px 30px 0px 0px;\r\n                }\r\n            }\r\n    \r\n        }\r\n    }\r\n   \r\n\r\n}\r\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/reviews.scss":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/reviews.scss ***!
  \*****************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2 */ "./src/ns/design/fonts/WixMadeforTextVF_W_Wght.8022447a.woff2"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "@font-face {\n  font-family: Wixy;\n  src: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ") format(\"woff\");\n}\n/**\n     Common Mixins\n**/\n.review-main-component {\n  font-family: Wixy;\n  margin-bottom: 100px;\n}\n.review-main-component .main-review-container {\n  min-width: 80%;\n  border: solid 1px blue;\n  margin: auto;\n  width: 70%;\n  padding: 7%;\n}\n.review-main-component .main-review-container .split-layout-containers {\n  width: 100%;\n  display: grid;\n  grid-template-columns: 0.5fr 1fr;\n  grid-template-rows: 100%;\n}\n.review-main-component .main-review-container .split-layout-containers .split-container-1 {\n  border: 1px solid green;\n  border-radius: 6%;\n  background-position: center;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-size: contain;\n}\n.review-main-component .main-review-container .split-layout-containers .split-container-1 img {\n  width: 200px;\n  height: 100px;\n  border-radius: 10%;\n}\n.review-main-component .main-review-container .split-layout-containers .split-container-2 h2 {\n  font-size: 32pt;\n  text-align: right;\n}\n.review-main-component .main-review-container .split-layout-containers .split-container-2 .student-quote p {\n  font-size: 23pt;\n  margin: 20px 0 5px 30px;\n  text-align: right;\n}\n.review-main-component .main-review-container .split-layout-containers .split-container-2 .carosell-navigation {\n  margin: 5% 50% 0 50%;\n  display: grid;\n  grid-template-columns: 30px 30px 30px;\n  grid-template-rows: 1fr;\n}\n.review-main-component .main-review-container .split-layout-containers .split-container-2 .carosell-navigation .carosell-1 {\n  width: 20px;\n  height: 20px;\n  border: solid 1px #000;\n  border-radius: 100%;\n  background-color: #000;\n  margin: 0 5px 0 5px;\n}\n.review-main-component .main-review-container .split-layout-containers .split-container-2 .carosell-navigation .carosell-2 {\n  background-color: #fff;\n  border: solid 2px #000;\n}", "",{"version":3,"sources":["webpack://./src/ns/design/Variables.scss","webpack://./src/ns/design/reviews.scss"],"names":[],"mappings":"AAAA;EACI,iBAAA;EACA,2DAAA;ACCJ;ADKA;;EAAA;ACNA;EACI,iBDGc;ECFd,oBAAA;AAMJ;AAJI;EACI,cAAA;EACA,sBAAA;EACA,YAAA;EACA,UAAA;EACA,WAAA;AAMR;AAJQ;EACI,WAAA;EACA,aAAA;EACA,gCAAA;EACA,wBAAA;AAMZ;AAHY;EACI,uBAAA;EACA,iBAAA;EAEA,2BAAA;EACA,4BAAA;EACA,4BAAA;EACA,wBAAA;AAIhB;AAFgB;EACI,YAAA;EACA,aAAA;EACA,kBAAA;AAIpB;AACgB;EACI,eAAA;EACA,iBAAA;AACpB;AAGoB;EACI,eAAA;EACA,uBAAA;EACA,iBAAA;AADxB;AAKgB;EACI,oBAAA;EACA,aAAA;EACA,qCAAA;EACA,uBAAA;AAHpB;AAKoB;EACI,WAAA;EACA,YAAA;EACA,sBAAA;EACA,mBAAA;EACA,sBAAA;EACA,mBAAA;AAHxB;AAMoB;EACI,sBAAA;EACA,sBAAA;AAJxB","sourcesContent":["@font-face {\r\n    font-family: Wixy;\r\n    src: url(\"./fonts/WixMadeforTextVF_W_Wght.8022447a.woff2\") format(\"woff\");\r\n}\r\n\r\n$ns-layout-color : #00a4e0;\r\n$ns-common-font : Wixy;\r\n\r\n/**\r\n     Common Mixins\r\n**/\r\n\r\n@mixin common_btn {\r\n    @include button();\r\n    @include center();\r\n    background-color: $ns-layout-color;\r\n    border: 1px solid $ns-layout-color;\r\n    font-weight: 350;\r\n    color: #fff;\r\n    transition: all .5s;\r\n    &:hover{\r\n        color: #000;\r\n        background-color: unset;\r\n    }\r\n}\r\n\r\n\r\n@mixin center {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n@mixin button {\r\n    height: 50px;\r\n    width: 160px;\r\n    border-radius: 10px;\r\n}\r\n\r\n@mixin flex-box {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\n@mixin flex-grid {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}","@use \"./Variables.scss\" as V;\r\n\r\n.review-main-component {\r\n    font-family: V.$ns-common-font;\r\n    margin-bottom: 100px;\r\n\r\n    .main-review-container {\r\n        min-width: 80%;\r\n        border: solid 1px blue;\r\n        margin: auto;\r\n        width: 70%;\r\n        padding: 7%;\r\n\r\n        .split-layout-containers {\r\n            width: 100%;\r\n            display: grid;\r\n            grid-template-columns: 0.5fr 1fr;\r\n            grid-template-rows: 100%;\r\n            \r\n\r\n            .split-container-1 {\r\n                border: 1px solid green;\r\n                border-radius: 6%;\r\n                //background-image: url('../design/Imgs/martin-shreder-5Xwaj9gaR0g-unsplash.jpg');\r\n                background-position: center;\r\n                background-repeat: no-repeat;\r\n                background-attachment: fixed;\r\n                background-size: contain;\r\n\r\n                img {\r\n                    width: 200px;\r\n                    height: 100px;\r\n                    border-radius: 10%;\r\n                }\r\n            }\r\n\r\n            .split-container-2 {\r\n                h2 {\r\n                    font-size: 32pt;\r\n                    text-align: right;\r\n                }\r\n\r\n                .student-quote {\r\n                    p {\r\n                        font-size: 23pt;\r\n                        margin: 20px 0 5px 30px;\r\n                        text-align: right;\r\n                    }\r\n                }\r\n\r\n                .carosell-navigation {\r\n                    margin: 5% 50% 0 50%;\r\n                    display: grid;\r\n                    grid-template-columns: 30px 30px 30px;\r\n                    grid-template-rows: 1fr;\r\n\r\n                    .carosell-1 {\r\n                        width: 20px;\r\n                        height: 20px;\r\n                        border: solid 1px #000;\r\n                        border-radius: 100%;\r\n                        background-color: #000;\r\n                        margin: 0 5px 0 5px;\r\n                    }\r\n\r\n                    .carosell-2 {\r\n                        background-color: #fff;\r\n                        border: solid 2px #000;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/viewHomeMediaQueries.scss":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/viewHomeMediaQueries.scss ***!
  \******************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "/*\n    Banner BreakPoints\n*/\n@media (max-width: 832px) {\n  ns-x-banner .ponaco-splitview-1 .wx-component-user-section .welcome-note-section .note-1 {\n    font-size: 40pt;\n  }\n  ns-x-banner .ponaco-splitview-1 .wx-component-user-section .welcome-note-section .note-2 {\n    font-size: 14pt;\n  }\n  ns-x-banner .ponaco-splitview-1 .wx-component-user-section .welcome-note-section ns-enroll-button > div {\n    font-size: 11pt;\n  }\n}\n@media (max-width: 651px) {\n  ns-x-banner .ponaco-splitview-1 .wx-component-user-section .welcome-note-section .note-1 {\n    font-size: 30pt;\n    width: 400px;\n  }\n  ns-x-banner .ponaco-splitview-1 .wx-component-user-section .welcome-note-section .note-2 {\n    font-size: 12pt;\n  }\n  ns-x-banner .ponaco-splitview-1 .wx-component-user-section .welcome-note-section ns-enroll-button > div {\n    font-size: 10pt;\n  }\n}\n@media (max-width: 515px) {\n  ns-x-banner .ponaco-splitview-1 .wx-component-user-section .welcome-note-section {\n    margin-left: 36px;\n  }\n  ns-x-banner .ponaco-splitview-1 .wx-component-user-section .welcome-note-section .note-1 {\n    font-size: 20pt;\n    width: 300px;\n  }\n  ns-x-banner .ponaco-splitview-1 .wx-component-user-section .welcome-note-section .note-2 {\n    font-size: 11pt;\n  }\n  ns-x-banner .ponaco-splitview-1 .wx-component-user-section .welcome-note-section ns-enroll-button > div {\n    font-size: 9pt;\n    height: 40px;\n    width: 140px;\n  }\n}\n/*\n\n    Pride,Benefit Snap Point : 620px\n*/\n@media (max-width: 690px) {\n  ns-x-pride .ponaco-splitview-2 .wrapper {\n    display: block;\n  }\n  ns-x-pride .ponaco-splitview-2 .wrapper .grid-x-box .content-box {\n    margin-top: 80px;\n  }\n  ns-x-pride .ponaco-splitview-2 .wrapper .grid-x-box .content-box .content-image-item {\n    width: 100%;\n    font-size: 35pt;\n  }\n\n  ns-x-benefits .ponaco-splitview-3 .wx-component-3 .splitview {\n    display: block;\n  }\n  ns-x-benefits .ponaco-splitview-3 .wx-component-3 .splitview .splitview2 .split-view-contents {\n    margin-top: 20px;\n  }\n  ns-x-benefits .ponaco-splitview-3 .wx-component-3 .splitview .splitview2 .major-content .content-redirect {\n    height: 40px;\n    width: 140px;\n  }\n}\n@media (max-width: 853px) {\n  ns-x-insights .ponaco-splitview-5 .vw-1 .vw-content-2-cards .vw-content-cards-wrapper .wrapper-2 {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n  ns-x-insights .ponaco-splitview-5 .vw-1 .vw-content-2-cards .vw-content-cards-wrapper .wrapper-2 .vw-card {\n    margin: 20px 0px 20px 0px;\n    width: 90%;\n  }\n}\n/*\nSnap points for the font size, Pride,benefits and insights\n*/\n@media (max-width: 925px) {\n  ns-x-pride {\n    --ns-pride-title-font-size: 20pt;\n    --ns-grid-title-font-size: 1.3rem;\n    --ns-grid-description-font-size: 11pt;\n    --ns-icon-size: 25pt;\n  }\n\n  ns-x-benefits {\n    --ns-maintitle-font-size: 20pt;\n    --ns-description-font-size: 11pt;\n    --ns-viewmore-font-size: 11pt;\n  }\n\n  ns-x-insights {\n    --ns-insights-majorTitle-Fontsize: 20pt;\n    --ns-insights-subcontent-Fontsize: 15pt;\n    --ns-insight-viewmore-Fontsize: 11pt;\n    --ns-vw-card-title-fontsize: 15pt;\n    --ns-vw-card-description-fontsize: 13pt;\n    --ns-vw-card-insight-like: 11pt;\n  }\n}\n/*\nSnap Points for the Quote\n*/\n@media (max-width: 976px) {\n  ns-x-quote {\n    --ns-major-Fontsize: 65pt;\n    --ns-minor-Fontsize: 14pt;\n  }\n}\n@media (max-width: 863px) {\n  ns-x-quote {\n    --ns-major-Fontsize: 55pt;\n    --ns-minor-Fontsize: 14pt;\n  }\n}\n@media (max-width: 667px) {\n  ns-x-quote {\n    --ns-major-Fontsize: 45pt;\n    --ns-minor-Fontsize: 14pt;\n    --ns-content-size: 487px;\n  }\n}", "",{"version":3,"sources":["webpack://./src/ns/design/viewHomeMediaQueries.scss"],"names":[],"mappings":"AAAA;;CAAA;AAKA;EAKgB;IACI,eAAA;EALlB;EAQc;IACI,eAAA;EANlB;EASc;IACI,eAAA;EAPlB;AACF;AAcA;EAKgB;IACI,eAAA;IACA,YAAA;EAhBlB;EAmBc;IACI,eAAA;EAjBlB;EAoBc;IACI,eAAA;EAlBlB;AACF;AAyBA;EAIY;IACI,iBAAA;EA1Bd;EA4Bc;IACI,eAAA;IACA,YAAA;EA1BlB;EA6Bc;IACI,eAAA;EA3BlB;EA8Bc;IACI,cAAA;IACA,YAAA;IACA,YAAA;EA5BlB;AACF;AAoCA;;;CAAA;AAKA;EAGQ;IACI,cAAA;EArCV;EAyCc;IACI,gBAAA;EAvClB;EAyCkB;IACI,WAAA;IACA,eAAA;EAvCtB;;EAiDU;IACI,cAAA;EA9Cd;EAiDkB;IACI,gBAAA;EA/CtB;EAmDsB;IACI,YAAA;IACA,YAAA;EAjD1B;AACF;AA8DA;EAQoB;IACI,aAAA;IACA,sBAAA;IACA,mBAAA;EAnEtB;EAqEsB;IACI,yBAAA;IACA,UAAA;EAnE1B;AACF;AA6EA;;CAAA;AAIA;EAEI;IACI,gCAAA;IACA,iCAAA;IACA,qCAAA;IACA,oBAAA;EA7EN;;EAgFE;IACI,8BAAA;IACA,gCAAA;IACA,6BAAA;EA7EN;;EAgFE;IACI,uCAAA;IACA,uCAAA;IACA,oCAAA;IAEA,iCAAA;IACA,uCAAA;IACA,+BAAA;EA9EN;AACF;AAmFA;;CAAA;AAIA;EACI;IACI,yBAAA;IACA,yBAAA;EAlFN;AACF;AAqFA;EACI;IACI,yBAAA;IACA,yBAAA;EAnFN;AACF;AAuFA;EACI;IACI,yBAAA;IACA,yBAAA;IACA,wBAAA;EArFN;AACF","sourcesContent":["/*\r\n    Banner BreakPoints\r\n*/\r\n//Banner BreakPoint_1\r\n//window.innerWidth <= 752px\r\n@media (max-width: 832px) {\r\n\r\n    ns-x-banner .ponaco-splitview-1 {\r\n        .wx-component-user-section {\r\n            .welcome-note-section {\r\n                .note-1 {\r\n                    font-size: 40pt;\r\n                }\r\n\r\n                .note-2 {\r\n                    font-size: 14pt;\r\n                }\r\n\r\n                ns-enroll-button>div {\r\n                    font-size: 11pt;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n//Banner BreakPoint_2\r\n@media (max-width: 651px) {\r\n\r\n    ns-x-banner .ponaco-splitview-1 {\r\n        .wx-component-user-section {\r\n            .welcome-note-section {\r\n                .note-1 {\r\n                    font-size: 30pt;\r\n                    width: 400px;\r\n                }\r\n\r\n                .note-2 {\r\n                    font-size: 12pt;\r\n                }\r\n\r\n                ns-enroll-button>div {\r\n                    font-size: 10pt;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n//Banner BreakPoint_3\r\n@media (max-width: 515px) {\r\n\r\n    ns-x-banner .ponaco-splitview-1 {\r\n        .wx-component-user-section {\r\n            .welcome-note-section {\r\n                margin-left: 36px;\r\n\r\n                .note-1 {\r\n                    font-size: 20pt;\r\n                    width: 300px;\r\n                }\r\n\r\n                .note-2 {\r\n                    font-size: 11pt;\r\n                }\r\n\r\n                ns-enroll-button>div {\r\n                    font-size: 9pt;\r\n                    height: 40px;\r\n                    width: 140px;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n/*\r\n\r\n    Pride,Benefit Snap Point : 620px\r\n*/\r\n// window.innerWidth <= 640px\r\n@media (max-width : 690px) {\r\n\r\n    ns-x-pride .ponaco-splitview-2 {\r\n        .wrapper {\r\n            display: block;\r\n\r\n            .grid-x-box {\r\n\r\n                .content-box {\r\n                    margin-top: 80px;\r\n\r\n                    .content-image-item {\r\n                        width: 100%;\r\n                        font-size: 35pt;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    ns-x-benefits .ponaco-splitview-3 {\r\n        .wx-component-3 {\r\n            .splitview {\r\n                display: block;\r\n\r\n                .splitview2 {\r\n                    .split-view-contents {\r\n                        margin-top: 20px;\r\n                    }\r\n\r\n                    .major-content {\r\n                        .content-redirect {\r\n                            height: 40px;\r\n                            width: 140px;\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n@media (max-width : 853px) {\r\n    ns-x-insights .ponaco-splitview-5 {\r\n        .vw-1 {\r\n\r\n            .vw-content-2-cards {\r\n\r\n                .vw-content-cards-wrapper {\r\n\r\n                    .wrapper-2 {\r\n                        display: flex;\r\n                        flex-direction: column;\r\n                        align-items: center;\r\n\r\n                        .vw-card {\r\n                            margin: 20px 0px 20px 0px;\r\n                            width: 90%;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n/*\r\nSnap points for the font size, Pride,benefits and insights\r\n*/\r\n\r\n@media (max-width : 925px) {\r\n\r\n    ns-x-pride {\r\n        --ns-pride-title-font-size: 20pt;\r\n        --ns-grid-title-font-size: 1.3rem;\r\n        --ns-grid-description-font-size: 11pt;\r\n        --ns-icon-size: 25pt;\r\n    }\r\n\r\n    ns-x-benefits {\r\n        --ns-maintitle-font-size: 20pt;\r\n        --ns-description-font-size: 11pt;\r\n        --ns-viewmore-font-size: 11pt;\r\n    }\r\n\r\n    ns-x-insights {\r\n        --ns-insights-majorTitle-Fontsize: 20pt;\r\n        --ns-insights-subcontent-Fontsize: 15pt;\r\n        --ns-insight-viewmore-Fontsize: 11pt;\r\n\r\n        --ns-vw-card-title-fontsize: 15pt;\r\n        --ns-vw-card-description-fontsize: 13pt;\r\n        --ns-vw-card-insight-like: 11pt;\r\n    }\r\n\r\n\r\n}\r\n\r\n/*\r\nSnap Points for the Quote\r\n*/\r\n\r\n@media (max-width : 976px) {\r\n    ns-x-quote {\r\n        --ns-major-Fontsize: 65pt;\r\n        --ns-minor-Fontsize: 14pt;\r\n    }\r\n}\r\n\r\n@media (max-width : 863px) {\r\n    ns-x-quote {\r\n        --ns-major-Fontsize: 55pt;\r\n        --ns-minor-Fontsize: 14pt;\r\n\r\n    }\r\n}\r\n\r\n@media (max-width:667px) {\r\n    ns-x-quote {\r\n        --ns-major-Fontsize: 45pt;\r\n        --ns-minor-Fontsize: 14pt;\r\n        --ns-content-size: 487px;\r\n\r\n    }\r\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {



/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";

      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }

      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }

      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }

      content += cssWithMappingToString(item);

      if (needLayer) {
        content += "}";
      }

      if (item[2]) {
        content += "}";
      }

      if (item[4]) {
        content += "}";
      }

      return content;
    }).join("");
  }; // import a list of modules into the list


  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }

      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }

      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }

      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }

      list.push(item);
    }
  };

  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/getUrl.js":
/*!********************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/getUrl.js ***!
  \********************************************************/
/***/ ((module) => {



module.exports = function (url, options) {
  if (!options) {
    options = {};
  }

  if (!url) {
    return url;
  }

  url = String(url.__esModule ? url.default : url); // If url is already wrapped in quotes, remove them

  if (/^['"].*['"]$/.test(url)) {
    url = url.slice(1, -1);
  }

  if (options.hash) {
    url += options.hash;
  } // Should url be wrapped?
  // See https://drafts.csswg.org/css-values-3/#urls


  if (/["'() \t\n]|(%20)/.test(url) || options.needQuotes) {
    return "\"".concat(url.replace(/"/g, '\\"').replace(/\n/g, "\\n"), "\"");
  }

  return url;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
/***/ ((module) => {



module.exports = function (item) {
  var content = item[1];
  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (typeof btoa === "function") {
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot || "").concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join("\n");
  }

  return [content].join("\n");
};

/***/ }),

/***/ "./src/ns/design/BImage.scss":
/*!***********************************!*\
  !*** ./src/ns/design/BImage.scss ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_BImage_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./BImage.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/BImage.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_BImage_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_BImage_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_BImage_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_BImage_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/ns/design/Banner.scss":
/*!***********************************!*\
  !*** ./src/ns/design/Banner.scss ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Banner_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./Banner.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/Banner.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Banner_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Banner_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Banner_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Banner_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/ns/design/Enrollbtn.scss":
/*!**************************************!*\
  !*** ./src/ns/design/Enrollbtn.scss ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Enrollbtn_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./Enrollbtn.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/Enrollbtn.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Enrollbtn_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Enrollbtn_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Enrollbtn_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Enrollbtn_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/ns/design/Faq.scss":
/*!********************************!*\
  !*** ./src/ns/design/Faq.scss ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Faq_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./Faq.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/Faq.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Faq_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Faq_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Faq_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Faq_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/ns/design/Footer.scss":
/*!***********************************!*\
  !*** ./src/ns/design/Footer.scss ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Footer_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./Footer.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/Footer.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Footer_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Footer_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Footer_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Footer_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/ns/design/Glance.scss":
/*!***********************************!*\
  !*** ./src/ns/design/Glance.scss ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Glance_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./Glance.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/Glance.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Glance_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Glance_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Glance_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Glance_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/ns/design/Global.scss":
/*!***********************************!*\
  !*** ./src/ns/design/Global.scss ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Global_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./Global.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/Global.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Global_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Global_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Global_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Global_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/ns/design/Goals.scss":
/*!**********************************!*\
  !*** ./src/ns/design/Goals.scss ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Goals_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./Goals.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/Goals.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Goals_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Goals_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Goals_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Goals_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/ns/design/Header.scss":
/*!***********************************!*\
  !*** ./src/ns/design/Header.scss ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Header_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./Header.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/Header.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Header_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Header_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Header_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Header_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/ns/design/Insights.scss":
/*!*************************************!*\
  !*** ./src/ns/design/Insights.scss ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Insights_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./Insights.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/Insights.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Insights_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Insights_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Insights_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Insights_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/ns/design/Pride.scss":
/*!**********************************!*\
  !*** ./src/ns/design/Pride.scss ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Pride_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./Pride.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/Pride.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Pride_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Pride_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Pride_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Pride_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/ns/design/Quote.scss":
/*!**********************************!*\
  !*** ./src/ns/design/Quote.scss ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Quote_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./Quote.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/Quote.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Quote_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Quote_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Quote_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Quote_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/ns/design/StaffView.Member.scss":
/*!*********************************************!*\
  !*** ./src/ns/design/StaffView.Member.scss ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_StaffView_Member_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./StaffView.Member.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/StaffView.Member.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_StaffView_Member_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_StaffView_Member_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_StaffView_Member_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_StaffView_Member_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/ns/design/StaffView.dialog.scss":
/*!*********************************************!*\
  !*** ./src/ns/design/StaffView.dialog.scss ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_StaffView_dialog_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./StaffView.dialog.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/StaffView.dialog.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_StaffView_dialog_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_StaffView_dialog_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_StaffView_dialog_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_StaffView_dialog_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/ns/design/StaffView.main.scss":
/*!*******************************************!*\
  !*** ./src/ns/design/StaffView.main.scss ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_StaffView_main_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./StaffView.main.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/StaffView.main.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_StaffView_main_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_StaffView_main_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_StaffView_main_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_StaffView_main_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/ns/design/WelcomeNote.scss":
/*!****************************************!*\
  !*** ./src/ns/design/WelcomeNote.scss ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_WelcomeNote_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./WelcomeNote.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/WelcomeNote.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_WelcomeNote_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_WelcomeNote_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_WelcomeNote_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_WelcomeNote_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/ns/design/Xgoal.scss":
/*!**********************************!*\
  !*** ./src/ns/design/Xgoal.scss ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Xgoal_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./Xgoal.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/Xgoal.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Xgoal_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Xgoal_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Xgoal_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_Xgoal_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/ns/design/corevalues.scss":
/*!***************************************!*\
  !*** ./src/ns/design/corevalues.scss ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_corevalues_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./corevalues.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/corevalues.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_corevalues_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_corevalues_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_corevalues_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_corevalues_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/ns/design/dialogHost.scss":
/*!***************************************!*\
  !*** ./src/ns/design/dialogHost.scss ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_dialogHost_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./dialogHost.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/dialogHost.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_dialogHost_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_dialogHost_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_dialogHost_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_dialogHost_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/ns/design/edu.scss":
/*!********************************!*\
  !*** ./src/ns/design/edu.scss ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_edu_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./edu.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/edu.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_edu_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_edu_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_edu_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_edu_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/ns/design/history.scss":
/*!************************************!*\
  !*** ./src/ns/design/history.scss ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_history_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./history.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/history.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_history_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_history_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_history_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_history_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/ns/design/mission.scss":
/*!************************************!*\
  !*** ./src/ns/design/mission.scss ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_mission_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./mission.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/mission.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_mission_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_mission_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_mission_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_mission_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/ns/design/overflowNav.scss":
/*!****************************************!*\
  !*** ./src/ns/design/overflowNav.scss ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_overflowNav_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./overflowNav.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/overflowNav.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_overflowNav_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_overflowNav_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_overflowNav_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_overflowNav_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/ns/design/reviews.scss":
/*!************************************!*\
  !*** ./src/ns/design/reviews.scss ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_reviews_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./reviews.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/reviews.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_reviews_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_reviews_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_reviews_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_reviews_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/ns/design/viewHomeMediaQueries.scss":
/*!*************************************************!*\
  !*** ./src/ns/design/viewHomeMediaQueries.scss ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_viewHomeMediaQueries_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./viewHomeMediaQueries.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/ns/design/viewHomeMediaQueries.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_viewHomeMediaQueries_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_viewHomeMediaQueries_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_viewHomeMediaQueries_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_viewHomeMediaQueries_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {



var stylesInDOM = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };

    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);

  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }

      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };

  return updater;
}

module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();

        stylesInDOM.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {



var memo = {};
/* istanbul ignore next  */

function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }

    memo[target] = styleTarget;
  }

  return memo[target];
}
/* istanbul ignore next  */


function insertBySelector(insert, style) {
  var target = getTarget(insert);

  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }

  target.appendChild(style);
}

module.exports = insertBySelector;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {



/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}

module.exports = insertStyleElement;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;

  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}

module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {



/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";

  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }

  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }

  var needLayer = typeof obj.layer !== "undefined";

  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }

  css += obj.css;

  if (needLayer) {
    css += "}";
  }

  if (obj.media) {
    css += "}";
  }

  if (obj.supports) {
    css += "}";
  }

  var sourceMap = obj.sourceMap;

  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  options.styleTagTransform(css, styleElement, options.options);
}

function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }

  styleElement.parentNode.removeChild(styleElement);
}
/* istanbul ignore next  */


function domAPI(options) {
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}

module.exports = domAPI;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {



/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }

    styleElement.appendChild(document.createTextNode(css));
  }
}

module.exports = styleTagTransform;

/***/ }),

/***/ "./src/ns/base/MediaQueries/ScreenControls/Services/footerControl.ts":
/*!***************************************************************************!*\
  !*** ./src/ns/base/MediaQueries/ScreenControls/Services/footerControl.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BreakPoints": () => (/* binding */ BreakPoints),
/* harmony export */   "IFooterScreenControlManager": () => (/* binding */ IFooterScreenControlManager),
/* harmony export */   "footerScreenControl": () => (/* binding */ footerScreenControl)
/* harmony export */ });
/* harmony import */ var ns_base_MediaQueries_mediaQueries__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ns/base/MediaQueries/mediaQueries */ "./src/ns/base/MediaQueries/mediaQueries.ts");
/* harmony import */ var ns_base_dependencyInjection_decoratorServer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ns/base/dependencyInjection/decoratorServer */ "./src/ns/base/dependencyInjection/decoratorServer.ts");
/* harmony import */ var ns_common_lifecycle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ns/common/lifecycle */ "./src/ns/common/lifecycle.ts");



var BreakPoints;
(function (BreakPoints) {
    BreakPoints[BreakPoints["XTR_1"] = 0] = "XTR_1";
    BreakPoints[BreakPoints["XTR_X_1"] = 1] = "XTR_X_1";
    BreakPoints[BreakPoints["XTR_3"] = 4] = "XTR_3";
    BreakPoints[BreakPoints["XTR_X_3"] = 5] = "XTR_X_3";
})(BreakPoints || (BreakPoints = {}));
const IFooterScreenControlManager = (0,ns_base_dependencyInjection_decoratorServer__WEBPACK_IMPORTED_MODULE_1__.createDecorator)("FooterService");
class footerScreenControl {
    constructor() {
        this._breakPoint_1 = 834;
        this._breakPoint_3 = 781;
        this._footerSizeCallback = null;
        this.initScreenControl();
    }
    _registerForLifecycleEvents() {
        ns_common_lifecycle__WEBPACK_IMPORTED_MODULE_2__.LifeCycleEvents.onPhaseDidChange.subscribe(this._listenerForLifecycleEvents.bind(this));
    }
    _unregisterForLifecycleEvents() {
        ns_common_lifecycle__WEBPACK_IMPORTED_MODULE_2__.LifeCycleEvents.onPhaseDidChange.unsubscribe(this._listenerForLifecycleEvents.bind(this));
    }
    _listenerForLifecycleEvents(phase) {
        if (phase == 4 /* Eventually */) {
            this._initFooterControlStartupDimensions({ width: window.innerWidth, height: window.innerHeight });
            this._unregisterForLifecycleEvents();
        }
    }
    footerDidReachBreakPoint(callback) {
        this._footerSizeCallback = callback;
    }
    ;
    initScreenControl() {
        this.registerAndListenForMediaScreenChanges();
        this._registerForLifecycleEvents();
    }
    registerAndListenForMediaScreenChanges() {
        ns_base_MediaQueries_mediaQueries__WEBPACK_IMPORTED_MODULE_0__.MediaScreenManagerControl.mediaWindowScreenDidResize.subscribe(this.listenerForCommonDimensionChanges.bind(this));
    }
    ;
    _invokeFooterChangeCallback(args) {
        if (this._footerSizeCallback) {
            this._footerSizeCallback(args);
        }
    }
    listenForContentSize_1(dimensions) {
        if (dimensions.width <= this._breakPoint_1) {
            this._invokeFooterChangeCallback({
                keyValue: "content-size",
                breakpoint: BreakPoints.XTR_1
            });
        }
        else if (dimensions.width > this._breakPoint_1) {
            this._invokeFooterChangeCallback({
                keyValue: "content-size",
                breakpoint: BreakPoints.XTR_X_1
            });
        }
    }
    listenForContentSize_3(dimensions) {
        if (dimensions.width <= this._breakPoint_3) {
            this._invokeFooterChangeCallback({
                keyValue: "content-size",
                breakpoint: BreakPoints.XTR_3
            });
        }
        else if (dimensions.width > this._breakPoint_3) {
            this._invokeFooterChangeCallback({
                keyValue: "content-size",
                breakpoint: BreakPoints.XTR_X_3
            });
        }
    }
    _initFooterControlStartupDimensions(dimensions) {
        this.listenForContentSize_1(dimensions);
        this.listenForContentSize_3(dimensions);
    }
    listenerForCommonDimensionChanges(dimensions) {
        this.listenForContentSize_1(dimensions);
        this.listenForContentSize_3(dimensions);
    }
}


/***/ }),

/***/ "./src/ns/base/MediaQueries/ScreenControls/Services/headerControl.ts":
/*!***************************************************************************!*\
  !*** ./src/ns/base/MediaQueries/ScreenControls/Services/headerControl.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BreakPoints": () => (/* binding */ BreakPoints),
/* harmony export */   "IHeaderScreenControlManager": () => (/* binding */ IHeaderScreenControlManager),
/* harmony export */   "headerScreenControl": () => (/* binding */ headerScreenControl)
/* harmony export */ });
/* harmony import */ var ns_base_MediaQueries_mediaQueries__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ns/base/MediaQueries/mediaQueries */ "./src/ns/base/MediaQueries/mediaQueries.ts");
/* harmony import */ var ns_base_dependencyInjection_decoratorServer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ns/base/dependencyInjection/decoratorServer */ "./src/ns/base/dependencyInjection/decoratorServer.ts");
/* harmony import */ var ns_common_lifecycle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ns/common/lifecycle */ "./src/ns/common/lifecycle.ts");
/**
 *
 * HeaderControl is favoured because this is element is not loaded within the router
 * its independent and doesn't  follow the lifecycle of the Router,
 *

 * Creating MediaQueries with typescript requires
 * the analogy of using screen breakpoints
 * and using memoize to cache values accordingly
 * this is a common dependency and can be shared thus DI will e used.
 * But this Queries can be shared by different elements
 */



var BreakPoints;
(function (BreakPoints) {
    BreakPoints[BreakPoints["GLOBAL_BREKAPOINT"] = 0] = "GLOBAL_BREKAPOINT";
    BreakPoints[BreakPoints["NAVIGATION_BREAKPOINT"] = 1] = "NAVIGATION_BREAKPOINT";
    BreakPoints[BreakPoints["BADGE_BREAKPOINT_1"] = 2] = "BADGE_BREAKPOINT_1";
    BreakPoints[BreakPoints["BADGE_BREAKPOINT_2"] = 3] = "BADGE_BREAKPOINT_2";
    BreakPoints[BreakPoints["BADGE_BREAKPOINT_3"] = 4] = "BADGE_BREAKPOINT_3";
    //out of breakpoint
    BreakPoints[BreakPoints["GLOBAL_BREKAPOINT_X"] = 5] = "GLOBAL_BREKAPOINT_X";
    BreakPoints[BreakPoints["BADGE_BREAKPOINT_X_1"] = 6] = "BADGE_BREAKPOINT_X_1";
    BreakPoints[BreakPoints["BADGE_BREAKPOINT_X_2"] = 7] = "BADGE_BREAKPOINT_X_2";
    BreakPoints[BreakPoints["BADGE_BREAKPOINT_X_3"] = 8] = "BADGE_BREAKPOINT_X_3";
    BreakPoints[BreakPoints["NAVIGATION_BREAKPOINT_X"] = 9] = "NAVIGATION_BREAKPOINT_X";
})(BreakPoints || (BreakPoints = {}));
const IHeaderScreenControlManager = (0,ns_base_dependencyInjection_decoratorServer__WEBPACK_IMPORTED_MODULE_1__.createDecorator)("HeaderScreenControl");
class headerScreenControl {
    constructor() {
        this._headerSizeCallback = null;
        this._globalContentBreakPoint = 930;
        this._contentNavigationbreakPoint = 832;
        this._badgeWrapperBreakPoints = { "window-break-1": 548, "window-break-2": 513, "window-break-3": 459 };
        this.initScreenControl();
    }
    ;
    _registerForLifecycleEvents() {
        ns_common_lifecycle__WEBPACK_IMPORTED_MODULE_2__.LifeCycleEvents.onPhaseDidChange.subscribe(this._listenerForLifecycleEvents.bind(this));
    }
    ;
    _unregisterForLifecycleEvents() {
        ns_common_lifecycle__WEBPACK_IMPORTED_MODULE_2__.LifeCycleEvents.onPhaseDidChange.unsubscribe(this._listenerForLifecycleEvents.bind(this));
    }
    _listenerForLifecycleEvents(phase) {
        if (phase == 4 /* Eventually */) {
            this._initHeaderControlStartupDimensions({ width: window.innerWidth, height: window.innerHeight });
            this._unregisterForLifecycleEvents();
        }
    }
    headerDidReachBreakPoint(callback) {
        this._headerSizeCallback = callback;
    }
    ;
    initScreenControl() {
        this.registerAndListenForMediaScreenChanges();
        this._registerForLifecycleEvents();
    }
    registerAndListenForMediaScreenChanges() {
        ns_base_MediaQueries_mediaQueries__WEBPACK_IMPORTED_MODULE_0__.MediaScreenManagerControl.mediaWindowScreenDidResize.subscribe(this.listenerForCommonDimensionChanges.bind(this));
    }
    ;
    _invokeHeaderChangeCallback(args) {
        if (this._headerSizeCallback) {
            this._headerSizeCallback(args);
        }
    }
    listenAndCacheForNavigationBar(dimensions) {
        if (dimensions.width <= this._contentNavigationbreakPoint) {
            this._invokeHeaderChangeCallback({
                breakpoint: BreakPoints.NAVIGATION_BREAKPOINT,
                keyValue: "navigationBar"
            });
        }
        else if (dimensions.width > (this._contentNavigationbreakPoint)) {
            this._invokeHeaderChangeCallback({
                breakpoint: BreakPoints.NAVIGATION_BREAKPOINT_X,
                keyValue: "navigationBar"
            });
        }
    }
    ;
    listenAndCacheForGlobal(dimensions) {
        if (dimensions.width == this._globalContentBreakPoint) {
            this._invokeHeaderChangeCallback({
                breakpoint: BreakPoints.GLOBAL_BREKAPOINT,
                keyValue: "global"
            });
        }
        else if (dimensions.width > this._globalContentBreakPoint) {
            this._invokeHeaderChangeCallback({
                breakpoint: BreakPoints.GLOBAL_BREKAPOINT_X,
                keyValue: "global",
            });
        }
    }
    listenAndCacheForBadgeWrapper_1(dimensions) {
        if (dimensions.width <= this._badgeWrapperBreakPoints["window-break-1"]) {
            this._invokeHeaderChangeCallback({
                breakpoint: BreakPoints.BADGE_BREAKPOINT_1,
                keyValue: "badge-wrapper"
            });
        }
        else if (dimensions.width > this._badgeWrapperBreakPoints["window-break-1"]) {
            this._invokeHeaderChangeCallback({
                breakpoint: BreakPoints.BADGE_BREAKPOINT_X_1,
                keyValue: "badge-wrapper"
            });
        }
    }
    listenAndCacheForBadgeWrapper_2(dimensions) {
        if (dimensions.width <= this._badgeWrapperBreakPoints["window-break-2"]) {
            this._invokeHeaderChangeCallback({
                breakpoint: BreakPoints.BADGE_BREAKPOINT_2,
                keyValue: "badge-wrapper"
            });
        }
        else if (dimensions.width > this._badgeWrapperBreakPoints["window-break-2"]) {
            this._invokeHeaderChangeCallback({
                breakpoint: BreakPoints.BADGE_BREAKPOINT_X_2,
                keyValue: "badge-wrapper"
            });
        }
    }
    listenAndCacheForBadgeWrapper_3(dimensions) {
        if (dimensions.width <= this._badgeWrapperBreakPoints["window-break-3"]) {
            this._invokeHeaderChangeCallback({
                breakpoint: BreakPoints.BADGE_BREAKPOINT_3,
                keyValue: "badge-wrapper"
            });
        }
        else if (dimensions.width > this._badgeWrapperBreakPoints["window-break-3"]) {
            this._invokeHeaderChangeCallback({
                breakpoint: BreakPoints.BADGE_BREAKPOINT_X_3,
                keyValue: "badge-wrapper"
            });
        }
    }
    _initHeaderControlStartupDimensions(dimensions) {
        this.listenAndCacheForNavigationBar(dimensions);
        this.listenAndCacheForGlobal(dimensions);
        this.listenAndCacheForBadgeWrapper_1(dimensions);
        this.listenAndCacheForBadgeWrapper_2(dimensions);
        this.listenAndCacheForBadgeWrapper_3(dimensions);
    }
    listenerForCommonDimensionChanges(dimensions) {
        this.listenAndCacheForNavigationBar(dimensions);
        this.listenAndCacheForGlobal(dimensions);
        this.listenAndCacheForBadgeWrapper_1(dimensions);
        this.listenAndCacheForBadgeWrapper_2(dimensions);
        this.listenAndCacheForBadgeWrapper_3(dimensions);
    }
}
;


/***/ }),

/***/ "./src/ns/base/MediaQueries/ScreenControls/controlInitializerEvent.ts":
/*!****************************************************************************!*\
  !*** ./src/ns/base/MediaQueries/ScreenControls/controlInitializerEvent.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ControlIntializerInstance": () => (/* binding */ ControlIntializerInstance)
/* harmony export */ });
/* harmony import */ var ns_common_events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ns/common/events */ "./src/ns/common/events.ts");
/* harmony import */ var ns_base_instanceCreators_instanceCreators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ns/base/instanceCreators/instanceCreators */ "./src/ns/base/instanceCreators/instanceCreators.ts");


class ControlIntializer {
    constructor() {
        this._didInitializeHeaderControl = false;
        this._didInitializeFooterControl = false;
        this.CIEventControl = null;
        this._didInitiateControlsCallback = null;
        this._connectMajorEventListener();
        this._registerCIEventListener();
    }
    _connectMajorEventListener() {
        this.CIEventControl = (0,ns_base_instanceCreators_instanceCreators__WEBPACK_IMPORTED_MODULE_1__.createInstance)(ns_common_events__WEBPACK_IMPORTED_MODULE_0__.commonEvents);
    }
    _registerCIEventListener() {
        if (this.CIEventControl) {
            this.CIEventControl.addListener("ConnectedBreakPointCallback", this._listenForControlBreakPointInitialization.bind(this));
        }
    }
    ;
    _listenForControlBreakPointInitialization(args) {
        if (args == "__FooterControl__") {
            this._didInitializeFooterControl = true;
            this._tryAndCheckCurrentState();
        }
        else {
            this._didInitializeHeaderControl = true;
            this._tryAndCheckCurrentState();
        }
    }
    ;
    _tryAndCheckCurrentState() {
        if (this._didInitializeHeaderControl && this._didInitializeFooterControl) {
            if (this._didInitiateControlsCallback) {
                this._didInitiateControlsCallback();
            }
        }
    }
    ;
    didInitiateAllSurfaceControls(callback) {
        this._didInitiateControlsCallback = callback;
    }
    ;
}
const ControlIntializerInstance = (0,ns_base_instanceCreators_instanceCreators__WEBPACK_IMPORTED_MODULE_1__.createInstance)(ControlIntializer);


/***/ }),

/***/ "./src/ns/base/MediaQueries/mediaQueries.ts":
/*!**************************************************!*\
  !*** ./src/ns/base/MediaQueries/mediaQueries.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MediaScreenManager": () => (/* binding */ MediaScreenManager),
/* harmony export */   "MediaScreenManagerControl": () => (/* binding */ MediaScreenManagerControl)
/* harmony export */ });
/* harmony import */ var ns_common_domListener__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ns/common/domListener */ "./src/ns/common/domListener.ts");
/* harmony import */ var ns_common_events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ns/common/events */ "./src/ns/common/events.ts");
/* harmony import */ var ns_base_instanceCreators_instanceCreators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ns/base/instanceCreators/instanceCreators */ "./src/ns/base/instanceCreators/instanceCreators.ts");
/**
 * Media Queries can easily be handled very well using Typescript
 * than using me
 *
 * Using A Typescript Trick Called Memoize to store values
 */



class MediaScreenManager {
    constructor() {
        this.mediaWindowScreenDidResize = new ns_common_events__WEBPACK_IMPORTED_MODULE_1__.globalEventEmitter();
        this.mediaWindowScreenDidScroll = new ns_common_events__WEBPACK_IMPORTED_MODULE_1__.globalEventEmitter();
        this._registerEventListenerForScreenChange();
    }
    ;
    _registerEventListenerForScreenChange() {
        (0,ns_common_domListener__WEBPACK_IMPORTED_MODULE_0__.addDisposableEventListener)(window, "scroll", (e) => {
            const positions = {
                X: window.scrollX,
                Y: window.scrollY
            };
            setTimeout(() => {
                this.mediaWindowScreenDidScroll.raiseEvent(positions);
            }, 9);
        });
        (0,ns_common_domListener__WEBPACK_IMPORTED_MODULE_0__.addDisposableEventListener)(window, "resize", (e) => {
            const dimensions = {
                width: window.innerWidth,
                height: window.innerHeight,
            };
            //throttle event to prevent lagging of website;
            setTimeout(() => {
                this.mediaWindowScreenDidResize.raiseEvent(dimensions);
            }, 9);
        });
    }
    ;
}
;
const MediaScreenManagerControl = (0,ns_base_instanceCreators_instanceCreators__WEBPACK_IMPORTED_MODULE_2__.createInstance)(MediaScreenManager);


/***/ }),

/***/ "./src/ns/base/Router/Route.ts":
/*!*************************************!*\
  !*** ./src/ns/base/Router/Route.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Route": () => (/* binding */ Route)
/* harmony export */ });
/**
 * The Route Defines a location and a view component attribute
 */
;
class Route {
    constructor(RouteOptions) {
        this._sourceLocation = RouteOptions.viewlocation;
        this._viewAttribute = RouteOptions.viewAttribute;
    }
    ;
    get routeLocation() {
        return this._sourceLocation;
    }
    ;
    get routeViewAttribute() {
        return this._viewAttribute;
    }
}
;


/***/ }),

/***/ "./src/ns/base/Router/Router.ts":
/*!**************************************!*\
  !*** ./src/ns/base/Router/Router.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NSRouter": () => (/* binding */ NSRouter)
/* harmony export */ });
/* harmony import */ var ns_common_events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ns/common/events */ "./src/ns/common/events.ts");
/* harmony import */ var ns_common_lifecycle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ns/common/lifecycle */ "./src/ns/common/lifecycle.ts");


;
;
class NSRouterView {
    constructor() {
        this._nsExchangeState = 0;
        this._nsRouteViewEvents = new ns_common_events__WEBPACK_IMPORTED_MODULE_0__.commonEvents();
        this._nsRouteViewExchangeCallback = null;
    }
    ;
    listenForExchangeViewCallbackEvents(callback) {
        this._nsRouteViewEvents.addListener("didFireRegisteredExchange", callback);
    }
    registerRouteViewExchangeCallback(callback) {
        this._nsRouteViewExchangeCallback = callback;
    }
    ;
    invokeRouteViewExchanageCallback() {
        if (this._nsRouteViewExchangeCallback) {
            this._nsRouteViewExchangeCallback();
            this._nsRouteViewEvents.emit("didFireRegisteredExchange", this._nsExchangeState);
        }
    }
    getViewComponent(attribute) {
        let _component = document.querySelector(`[ns-view=${attribute}]`);
        return _component;
    }
    ;
    getActiveRouteComponent() {
        let _activeComponent = document.querySelector(`[ns-route=active]`);
        return _activeComponent;
    }
    ;
    toggleRouteExchange(component, initialLoad) {
        if (initialLoad) {
            this.invokeRouteViewExchanageCallback();
            component.setAttribute("ns-route", "active");
            this.invokeRouteViewExchanageCallback();
        }
        else {
            let activeRouteComponent = this.getActiveRouteComponent();
            if (activeRouteComponent) {
                this.invokeRouteViewExchanageCallback();
                activeRouteComponent.setAttribute("ns-route", "inactive");
                this.invokeRouteViewExchanageCallback();
                component.setAttribute("ns-route", "active");
            }
            else {
                this.invokeRouteViewExchanageCallback();
                this.invokeRouteViewExchanageCallback();
                component.setAttribute("ns-route", "active");
            }
        }
    }
}
;
class NSRouter extends NSRouterView {
    constructor(ROutes) {
        super();
        this._nsStack = { backwardStack: [], forwardStack: [] };
        this._nsCurrrentRoute = "home";
        this._nsRouteNavigationState = "static";
        this._nsRouterAfterNavigationCallback = null;
        this._nsRouterBeforeNavigationCallback = null;
        this._nsSnychronousOptions = null;
        this._nsRouteErrorHandler = null;
        this._nsRouterLifeCycle = 0 /* Initializing */;
        this._nsRouteNavigationHooks = new Map();
        this._nsRouteStorage = new Map();
        this._nsRoutesArray = ROutes;
        this.registerForLifecyclEvents();
    }
    ;
    registerForLifecyclEvents() {
        ns_common_lifecycle__WEBPACK_IMPORTED_MODULE_1__.LifeCycleEvents.onPhaseDidChange.subscribe(this._listenerForLifecyclEvents.bind(this));
    }
    ;
    _listenerForLifecyclEvents(phase) {
        if (phase == 3 /* Restored */) {
            this.nsRouteInitialization();
        }
    }
    nsRouteInitialization() {
        this._createStorageFoundationForAllRoutes();
        this.listenerForNsExchangeEvent();
        this._nsRouterLifeCycle = 1 /* Loading */;
        this._loadContentOFPage();
        this._nsRouterLifeCycle = 2 /* Restored */;
        this._registerEventListenerForHashDidChange();
        ns_common_lifecycle__WEBPACK_IMPORTED_MODULE_1__.LifeCycleEvents.phase = 2 /* Ready */;
    }
    BeforeRouteNavigationEvent(callback) {
        if (this._nsRouterBeforeNavigationCallback == null) {
            this._nsRouterBeforeNavigationCallback = callback;
        }
    }
    AfterRouteNavigationEvent(callback) {
        if (this._nsRouterAfterNavigationCallback == null) {
            this._nsRouterAfterNavigationCallback = callback;
        }
        this.callNavigationHooks();
    }
    RouterNavigationHook(RouteId, callback) {
        if (!this._nsRouteNavigationHooks.has(RouteId)) {
            this._nsRouteNavigationHooks.set(RouteId, callback);
        }
    }
    NavigateToRoute(RouteId, data) {
        if (this.isHashPresent(RouteId)) {
            this._writeSynchronousRouterOptions(RouteId, data);
            this._setLocationHash(RouteId);
            this._nsCurrrentRoute = RouteId;
        }
    }
    ;
    pushToStack(RouteID, stack) {
        if (stack == "backwardStack") {
            this._nsStack.backwardStack.push(RouteID);
        }
        else {
            this._nsStack.forwardStack.push(RouteID);
        }
    }
    ;
    disposeFromStack(RouteID, stack) {
        if (stack == "backwardStack") {
            let _index = this._nsStack.backwardStack.indexOf(RouteID);
            this._nsStack.backwardStack.splice(_index, 1);
        }
        else {
            let _index = this._nsStack.forwardStack.indexOf(RouteID);
            this._nsStack.forwardStack.splice(_index, 1);
        }
    }
    callNavigationHooks() {
        if (this._nsRouteNavigationHooks.has(this._nsCurrrentRoute)) {
            this._nsRouteNavigationHooks.get(this._nsCurrrentRoute)({ data: this._nsSnychronousOptions.data, navigationState: "towards" });
            this._disposeSynchronousRouterOptions();
        }
    }
    RouteErrorHandler(callback) {
        throw new Error("Method not implemented.");
    }
    ;
    listenerForNsExchangeEvent() {
        //Initial Load;
        this.reCreateNavigationExchangeCall("Before");
        this.listenForExchangeViewCallbackEvents((args) => {
            if (args == 0) {
                this.reCreateNavigationExchangeCall("After");
            }
        });
    }
    reCreateNavigationExchangeCall(state) {
        if (state == "Before") {
            this.registerRouteViewExchangeCallback(this.BeforeRouteNavigationEvent.bind(this));
        }
        else if (state == "After" && this._nsRouterAfterNavigationCallback) {
            this.registerRouteViewExchangeCallback(this.AfterRouteNavigationEvent.bind(this));
        }
    }
    _disposeSynchronousRouterOptions() {
        if (this._nsSnychronousOptions) {
            delete this._nsSnychronousOptions["data"];
        }
    }
    _writeSynchronousRouterOptions(routeID, data) {
        if (this._nsSnychronousOptions) {
            if (this._nsSnychronousOptions["RouteId"] == undefined) {
                this._nsSnychronousOptions["RouteId"] = routeID;
                this._nsSnychronousOptions["data"] = data;
            }
        }
    }
    _setLocationHash(routeid) {
        window.location.hash = routeid;
    }
    _registerEventListenerForHashDidChange() {
        window.addEventListener("hashchange", this.listenerForHashDidChange.bind(this));
    }
    ;
    listenerForHashDidChange(ev) {
        this._loadContentOFPage();
    }
    _readCurrentAvailablHash() {
        let _hash = window.location.hash;
        return _hash.substring(1);
    }
    ;
    _loadContentOFPage() {
        let _currentHashTitle = this._readCurrentAvailablHash();
        if (_currentHashTitle == "") {
            let _viewAttribute = this.getViewAttriubte("home");
            this.toggleRouteExchange(this.getViewComponent(_viewAttribute), true);
        }
        else {
            if (this.isHashPresent(_currentHashTitle)) {
                let _viewAttribute = this.getViewAttriubte(_currentHashTitle);
                this.toggleRouteExchange(this.getViewComponent(_viewAttribute), false);
            }
        }
    }
    getViewAttriubte(hashTitle) {
        let __hash__ = "/" + hashTitle;
        return this._nsRouteStorage.get(__hash__);
    }
    isHashPresent(hash) {
        let __hash__ = "/" + hash;
        if (this._nsRouteStorage.has(__hash__)) {
            return true;
        }
        else {
            return false;
        }
    }
    _createStorageFoundationForAllRoutes() {
        for (let i = 0; i < this._nsRoutesArray.length; i++) {
            if (!this._nsRouteStorage.has(this._nsRoutesArray[i].routeLocation)) {
                this._nsRouteStorage.set(this._nsRoutesArray[i].routeLocation, this._nsRoutesArray[i].routeViewAttribute);
            }
        }
    }
}
;


/***/ }),

/***/ "./src/ns/base/Web/web.main.ts":
/*!*************************************!*\
  !*** ./src/ns/base/Web/web.main.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WebMain": () => (/* binding */ WebMain)
/* harmony export */ });
/* harmony import */ var ns_base_MediaQueries_ScreenControls_Services_headerControl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ns/base/MediaQueries/ScreenControls/Services/headerControl */ "./src/ns/base/MediaQueries/ScreenControls/Services/headerControl.ts");
/* harmony import */ var ns_base_dependencyInjection_serviceCollectionManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ns/base/dependencyInjection/serviceCollectionManager */ "./src/ns/base/dependencyInjection/serviceCollectionManager.ts");
/* harmony import */ var ns_base_dependencyInjection_injector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ns/base/dependencyInjection/injector */ "./src/ns/base/dependencyInjection/injector.ts");
/* harmony import */ var ns_dom_Interface_HeaderIntefaceManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ns/dom/Interface/HeaderIntefaceManager */ "./src/ns/dom/Interface/HeaderIntefaceManager.ts");
/* harmony import */ var ns_dom_Interface_FooterInterfaceManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ns/dom/Interface/FooterInterfaceManager */ "./src/ns/dom/Interface/FooterInterfaceManager.ts");
/* harmony import */ var ns_base_MediaQueries_ScreenControls_Services_footerControl__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ns/base/MediaQueries/ScreenControls/Services/footerControl */ "./src/ns/base/MediaQueries/ScreenControls/Services/footerControl.ts");
/* harmony import */ var ns_base_Router_Router__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ns/base/Router/Router */ "./src/ns/base/Router/Router.ts");
/* harmony import */ var ns_base_Router_Route__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ns/base/Router/Route */ "./src/ns/base/Router/Route.ts");
/* harmony import */ var _MediaQueries_ScreenControls_controlInitializerEvent__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../MediaQueries/ScreenControls/controlInitializerEvent */ "./src/ns/base/MediaQueries/ScreenControls/controlInitializerEvent.ts");
/* harmony import */ var ns_common_lifecycle__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ns/common/lifecycle */ "./src/ns/common/lifecycle.ts");
/**
 * This is startin point the whole website
 */










class WebMain {
    constructor() {
        this._didInitializeResources = false;
        this._WebRouter = null;
        this._WebRoutes = null;
        this.initResources();
    }
    ;
    async initResources() {
        this.attachDependenciesGraph();
        this.listenAndResolveInterfaceControlDimensions();
        this.createRouterNavigationMechanism();
        this._didInitializeResources = true;
    }
    ;
    get FrameRouter() {
        return this._WebRouter;
    }
    listenAndResolveInterfaceControlDimensions() {
        _MediaQueries_ScreenControls_controlInitializerEvent__WEBPACK_IMPORTED_MODULE_8__.ControlIntializerInstance.didInitiateAllSurfaceControls(() => {
            ns_common_lifecycle__WEBPACK_IMPORTED_MODULE_9__.LifeCycleEvents.phase = 4 /* Eventually */;
        });
    }
    createRouterNavigationMechanism() {
        this._WebRoutes = [
            new ns_base_Router_Route__WEBPACK_IMPORTED_MODULE_7__.Route({ viewlocation: "/home", viewAttribute: "home-view" }),
            new ns_base_Router_Route__WEBPACK_IMPORTED_MODULE_7__.Route({ viewlocation: "/about", viewAttribute: "about-view" }),
            new ns_base_Router_Route__WEBPACK_IMPORTED_MODULE_7__.Route({ viewlocation: "/blog", viewAttribute: "blog-view" }),
            new ns_base_Router_Route__WEBPACK_IMPORTED_MODULE_7__.Route({ viewlocation: "/academics", viewAttribute: "academics-view" }),
        ];
        this._WebRouter = new ns_base_Router_Router__WEBPACK_IMPORTED_MODULE_6__.NSRouter(this._WebRoutes);
    }
    ;
    attachDependenciesGraph() {
        const InitializeDIInjectionService = this.createMainServiceInjectorControl();
        InitializeDIInjectionService.createInstance(ns_dom_Interface_HeaderIntefaceManager__WEBPACK_IMPORTED_MODULE_3__.headerInterfaceManager);
        InitializeDIInjectionService.createInstance(ns_dom_Interface_FooterInterfaceManager__WEBPACK_IMPORTED_MODULE_4__.footerInterfaceManager);
    }
    createMainServiceInjectorControl() {
        let ServiceCollectionManager = new ns_base_dependencyInjection_serviceCollectionManager__WEBPACK_IMPORTED_MODULE_1__.ServiceCollection();
        ServiceCollectionManager.set(ns_base_MediaQueries_ScreenControls_Services_headerControl__WEBPACK_IMPORTED_MODULE_0__.IHeaderScreenControlManager, new ns_base_MediaQueries_ScreenControls_Services_headerControl__WEBPACK_IMPORTED_MODULE_0__.headerScreenControl());
        ServiceCollectionManager.set(ns_base_MediaQueries_ScreenControls_Services_footerControl__WEBPACK_IMPORTED_MODULE_5__.IFooterScreenControlManager, new ns_base_MediaQueries_ScreenControls_Services_footerControl__WEBPACK_IMPORTED_MODULE_5__.footerScreenControl());
        return new ns_base_dependencyInjection_injector__WEBPACK_IMPORTED_MODULE_2__.Injector(ServiceCollectionManager);
    }
}
;


/***/ }),

/***/ "./src/ns/base/dependencyInjection/decoratorServer.ts":
/*!************************************************************!*\
  !*** ./src/ns/base/dependencyInjection/decoratorServer.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createDecorator": () => (/* binding */ createDecorator),
/* harmony export */   "util": () => (/* binding */ util)
/* harmony export */ });
/**
 * The Decorator Server creates a interface decorator that stores the dependency according to a key
 * using a decorator hence getting full metadata about the dependency
 */
var util;
(function (util) {
    util.serviceIds = new Map();
    util.DI_TARGET = "$di#target";
    util.DI_DEPENDENCIES = "$di$dependencies";
    function getServiceDepenencies(ctor) {
        return ctor[util.DI_DEPENDENCIES] || [];
    }
    util.getServiceDepenencies = getServiceDepenencies;
})(util || (util = {}));
;
function storeServiceDependency(id, target, index) {
    if (target[util.DI_TARGET] === target) {
        target[util.DI_DEPENDENCIES].push({ id, index });
    }
    else {
        target[util.DI_DEPENDENCIES] = [{ id, index }];
        target[util.DI_TARGET] = target;
    }
}
function createDecorator(serviceId) {
    if (util.serviceIds.has(serviceId)) {
        //@ts-ignore;
        return util.serviceIds.get(serviceId);
    }
    ;
    const id = function (target, key, index) {
        if (arguments.length !== 3) {
            throw new Error("Service Decorator should be used to decorate a parameter");
        }
        storeServiceDependency(id, target, index);
    };
    id.toString = () => serviceId;
    util.serviceIds.set(serviceId, id);
    return id;
}


/***/ }),

/***/ "./src/ns/base/dependencyInjection/injector.ts":
/*!*****************************************************!*\
  !*** ./src/ns/base/dependencyInjection/injector.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Injector": () => (/* binding */ Injector)
/* harmony export */ });
/* harmony import */ var _decoratorServer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./decoratorServer */ "./src/ns/base/dependencyInjection/decoratorServer.ts");

/**
 * This is the Main Injector that injects all dependencies at runtime
 * and places them in;
 *
 * The Injector takes a service collection(map) containing all required dependencies and colorates them
 * to the write module enabling the website depend on one dependency for all its lifetime;
 */
class Injector {
    constructor(services) {
        this._services = services;
    }
    getOrCreateServiceInstance(id) {
        let _instanceDesc = this._services.get(id);
        return _instanceDesc;
    }
    createInstance(ctor) {
        //organise dependencies relative to their position in the parameters
        let _serviceDependencies = _decoratorServer__WEBPACK_IMPORTED_MODULE_0__.util.getServiceDepenencies(ctor).sort((a, b) => a.index - b.index);
        let _servieArgs = [];
        for (const dependency of _serviceDependencies) {
            let service = this.getOrCreateServiceInstance(dependency.id);
            if (!service) {
                throw new Error("Unknown Service");
            }
            ;
            _servieArgs.push(service);
        }
        ;
        return new ctor(..._servieArgs);
    }
    ;
}
;


/***/ }),

/***/ "./src/ns/base/dependencyInjection/serviceCollectionManager.ts":
/*!*********************************************************************!*\
  !*** ./src/ns/base/dependencyInjection/serviceCollectionManager.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ServiceCollection": () => (/* binding */ ServiceCollection)
/* harmony export */ });
/**
 * The Service collection is a collection of created instances ;
 */
class ServiceCollection {
    constructor() {
        this._entries = new Map();
    }
    set(id, instance) {
        if (!this._entries.has(id)) {
            this._entries.set(id, instance);
        }
    }
    ;
    has(id) {
        return this._entries.has(id);
    }
    ;
    get(id) {
        return this._entries.get(id);
    }
}
;


/***/ }),

/***/ "./src/ns/base/instanceCreators/instanceCreators.ts":
/*!**********************************************************!*\
  !*** ./src/ns/base/instanceCreators/instanceCreators.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createInstance": () => (/* binding */ createInstance)
/* harmony export */ });
;
function createInstance(constructor) {
    return new constructor();
}
;


/***/ }),

/***/ "./src/ns/common/Animations.ts":
/*!*************************************!*\
  !*** ./src/ns/common/Animations.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AnimationProvider": () => (/* binding */ AnimationProvider),
/* harmony export */   "AnimationsRun": () => (/* binding */ AnimationsRun)
/* harmony export */ });
/* harmony import */ var ns_base_instanceCreators_instanceCreators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ns/base/instanceCreators/instanceCreators */ "./src/ns/base/instanceCreators/instanceCreators.ts");
/* harmony import */ var animejs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! animejs */ "./node_modules/animejs/lib/anime.es.js");

//@ts-ignore

;
class AnimationsRun {
    constructor() { }
    ;
    //welcome not animation
    __welcomeComponentAnimationResource() {
        (0,animejs__WEBPACK_IMPORTED_MODULE_1__["default"])({
            targets: ".welcome-note-section",
            opacity: [0, 1],
            translateX: [-100, 0],
            duration: 3,
            easing: 'easeInOutSine'
        });
    }
    ;
    //Pride Component Animation
    __prideComponentAnimationResource() {
        (0,animejs__WEBPACK_IMPORTED_MODULE_1__["default"])({
            targets: ".pride-x-component .container",
            opacity: [0, 1],
            translateY: [100, 0],
            duration: 1,
        });
    }
    ;
    //benefits content manager.
    _benefitsComponentAnimationResource() {
        (0,animejs__WEBPACK_IMPORTED_MODULE_1__["default"])({
            targets: ".benefits-content-holder",
            opacity: [0, 1],
            translateY: [100, 0],
            duration: 3,
            easing: 'easeInOutSine'
        });
    }
    //INSIGHTS CARD
    __insightsCardAnimation() {
        (0,animejs__WEBPACK_IMPORTED_MODULE_1__["default"])({
            targets: ".card-x-component",
            opacity: [0, 1],
            translateY: [100, 0],
            duration: 3.5,
            easing: 'easeInOutSine'
        });
    }
    //FAQ
    __faqSlideAnimation() {
        (0,animejs__WEBPACK_IMPORTED_MODULE_1__["default"])({
            targets: ".info-slider-1",
            opacity: [0, 1],
            translateY: [100, 0],
            duration: 1,
            easing: 'easeInOutSine'
        });
    }
    ;
    //EDU
    _eduSlideAnimation() {
        (0,animejs__WEBPACK_IMPORTED_MODULE_1__["default"])({
            targets: ".ponaco-component-edu .wrappe",
            opacity: [0, 1],
            translateY: [100, 0],
            duration: 3.5,
            delay: animejs__WEBPACK_IMPORTED_MODULE_1__["default"].stagger(100),
            easing: 'easeInOutSine'
        });
    }
    executeInterfaceAnimation(interfaceComponent) {
        switch (interfaceComponent) {
            case "WELCOME_COMPONENT":
                this.__welcomeComponentAnimationResource();
                break;
            case "BENEFITS_COMPONENT":
                this._benefitsComponentAnimationResource();
                break;
            case "INSIGHTS_COMPONENT":
                this.__insightsCardAnimation();
                break;
            case "EDU_COMPONENT":
                this._eduSlideAnimation();
                break;
            case "PRIDE_COMPONENT":
                this.__prideComponentAnimationResource();
                break;
            case "FAQ_COMPONENT":
                this.__faqSlideAnimation();
                break;
            default:
                break;
        }
    }
    ;
}
const AnimationProvider = (0,ns_base_instanceCreators_instanceCreators__WEBPACK_IMPORTED_MODULE_0__.createInstance)(AnimationsRun);


/***/ }),

/***/ "./src/ns/common/domListener.ts":
/*!**************************************!*\
  !*** ./src/ns/common/domListener.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$": () => (/* binding */ $),
/* harmony export */   "addDisposableEventListener": () => (/* binding */ addDisposableEventListener),
/* harmony export */   "domListener": () => (/* binding */ domListener)
/* harmony export */ });
/**
 * This is a type of event that can be added and easiy removed using
 * the dispose method without  neccessity of calling remove event Listener Function
 */
class domListener {
    constructor(element, event, callbackFunction) {
        this._element = element;
        this._event = event;
        this._callbackFunction = callbackFunction;
        this.init();
    }
    ;
    //Begin by attaching the event listener;
    init() {
        if (this._element && this._event && this._callbackFunction) {
            this._element.addEventListener(this._event, this._callbackFunction);
        }
    }
    ;
    //then dispose this event listener 
    dispose() {
        if (this._element && this._event && this._callbackFunction) {
            this._element.removeEventListener(this._event, this._callbackFunction);
        }
        //clear all other resources without neccessity
        this._element = null;
        this._event = null;
        this._callbackFunction = null;
    }
}
;
//use this method to remove and attach the disposable event listener
function addDisposableEventListener(element, event, listener) {
    return new domListener(element, event, listener);
}
function $(e) {
    return document.querySelector(e);
}
;


/***/ }),

/***/ "./src/ns/common/events.ts":
/*!*********************************!*\
  !*** ./src/ns/common/events.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "commonEvents": () => (/* binding */ commonEvents),
/* harmony export */   "globalEventEmitter": () => (/* binding */ globalEventEmitter)
/* harmony export */ });
/**
 * The Common Event Listener, once created creates events that elements that subscribe to it can listen to
 */
class commonEvents {
    constructor() {
        this._EventStorage = new Map();
    }
    ;
    addListener(event, callbackFunction) {
        this._EventStorage.set(event, callbackFunction);
    }
    ;
    removeListener(event, callbackFunction) {
        if (this._EventStorage.has(event)) {
            this._EventStorage.delete(event);
        }
    }
    emit(event, ...args) {
        if (this._EventStorage.has(event)) {
            this._EventStorage.get(event).apply(null, args);
        }
    }
}
;
;
class globalEventEmitter {
    constructor() {
        this._eventListeners = [];
        this.didFireHandler = null;
    }
    raiseEvent(...args) {
        if (this._eventListeners != null && this._eventListeners.length > 0) {
            this._executeSubscribersWithArgs(args);
        }
        else {
            console.warn(`Raising Event With No Subscribers ${this}`);
        }
    }
    ;
    _executeSubscribersWithArgs(args) {
        let _indicator = this._eventListeners.length;
        for (let i = 0; i < this._eventListeners.length; i++) {
            this._eventListeners[i].apply(null, args);
            _indicator--;
            if (_indicator == 0) {
                this._invokeDidFireHandler();
            }
        }
    }
    _invokeDidFireHandler() {
        if (this.didFireHandler != null) {
            this.didFireHandler();
        }
    }
    _isRecorded(handler) {
        if (this._eventListeners.indexOf(handler) == -1) {
            return false;
        }
        else {
            return true;
        }
    }
    ;
    _deleteHandler(handler) {
        if (this._isRecorded(handler)) {
            let i = this._eventListeners.indexOf(handler);
            this._eventListeners.splice(i, 1);
        }
    }
    subscribe(handler) {
        if (!this._isRecorded(handler)) {
            this._eventListeners.push(handler);
        }
    }
    ;
    unsubscribe(handler) {
        this._deleteHandler(handler);
    }
    dispose() {
        this._eventListeners = null;
    }
}


/***/ }),

/***/ "./src/ns/common/lifecycle.ts":
/*!************************************!*\
  !*** ./src/ns/common/lifecycle.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LifeCycleEvents": () => (/* binding */ LifeCycleEvents)
/* harmony export */ });
/* harmony import */ var ns_common_events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ns/common/events */ "./src/ns/common/events.ts");
/* harmony import */ var ns_base_instanceCreators_instanceCreators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ns/base/instanceCreators/instanceCreators */ "./src/ns/base/instanceCreators/instanceCreators.ts");


;
class LifeCycleManager {
    constructor() {
        this._phase = 0 /* Initializing */;
        this.onPhaseDidChange = new ns_common_events__WEBPACK_IMPORTED_MODULE_0__.globalEventEmitter();
    }
    ;
    set phase(phase) {
        this._phase = phase;
        this.onPhaseDidChange.raiseEvent(phase);
    }
}
;
const LifeCycleEvents = (0,ns_base_instanceCreators_instanceCreators__WEBPACK_IMPORTED_MODULE_1__.createInstance)(LifeCycleManager);


/***/ }),

/***/ "./src/ns/components/common/Enroll Button/enrollbtn.ts":
/*!*************************************************************!*\
  !*** ./src/ns/components/common/Enroll Button/enrollbtn.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EnrollButtonComponent": () => (/* binding */ EnrollButtonComponent)
/* harmony export */ });
/* harmony import */ var ns_common_domListener__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ns/common/domListener */ "./src/ns/common/domListener.ts");

class EnrollButtonComponent extends HTMLElement {
    constructor() {
        super();
        this.innerHTML = `
        <div class="enroll-ns-button">
            Enroll Now
        </div>
        `;
        this._enrollBtn = this.querySelector(".enroll-ns-button");
    }
    connectedCallback() {
        this.init();
    }
    init() {
        this.atttachEventListenerToButton();
    }
    atttachEventListenerToButton() {
        (0,ns_common_domListener__WEBPACK_IMPORTED_MODULE_0__.addDisposableEventListener)(this._enrollBtn, "click", this.invokeEnrollDialog.bind(this));
    }
    invokeEnrollDialog() {
        //invoke dialog;
    }
}
;
customElements.define("ns-enroll-button", EnrollButtonComponent);


/***/ }),

/***/ "./src/ns/components/common/Footer/footer.ts":
/*!***************************************************!*\
  !*** ./src/ns/components/common/Footer/footer.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FooterComponent": () => (/* binding */ FooterComponent)
/* harmony export */ });
/* harmony import */ var ns_common_lifecycle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ns/common/lifecycle */ "./src/ns/common/lifecycle.ts");
/* harmony import */ var ns_common_domListener__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ns/common/domListener */ "./src/ns/common/domListener.ts");
/* harmony import */ var ns_components_common_Header_header__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ns/components/common/Header/header */ "./src/ns/components/common/Header/header.ts");



const Template_ = document.createElement("template");
Template_.innerHTML = `
<div class="ponaco-footer">
    <div class="ponaco-main-component">
        <div class="tab-section-1">
            <h2>Ndejje Senior Secondary School</h2>
            <p>No pains no gains</p>
        </div>
        <hr>

        <div class="content-splitview">
            <div class="splitview-1">
                <h2>Quick Links</h2>
                <p>Academic resources</p>
                <p>How to apply</p>
                <p>FAQ</p>
            </div>
            <div class="splitview-1">
                <h2>Academic</h2>
                <p>Admissions</p>
                <p>Academic Affairs</p>
                <p>Staff Directory</p>
            </div>
            <div class="splitview-1">
                <h2>Get in touch</h2>
                <p>Contact Ndejje</p>
                <p>Maps and directions</p>
                <p>Jobs</p>
            </div>
            <div class="splitview-2">
                <div class="accord-options">
                <div class="control-options">
                    <div class="facebook-link" title="Join us On Facebook">
                        <i class="fa-brands fa-facebook"></i>
                    </div>
    
                    <div class="instagram-link" title="Follow us on Instagram">
                        <i class="fa-brands fa-instagram"></i>
                    </div>
    
                    <div class="twitter-link" title="Follow us on Twitter">
                        <i class="fa-brands fa-twitter"></i>
                    </div>
                </div>
                </div>
            </div>
        </div>

        <div class="copyrighted">&copy Ndejje Senior Secondary School</div>
    </div>

</div>
`;
class FooterComponent extends HTMLElement {
    constructor() {
        super();
        this._schBadgeTitle = null;
        this._schFaceBookLink = null;
        this._schInstagramLink = null;
        this._schControlComponent = null;
        this.appendChild(Template_.content.cloneNode(true));
    }
    ;
    connectedCallback() {
        this.init();
    }
    ;
    init() {
        this.attachResourcesAndEventHandlers();
        this.attachEventListeners();
        ns_common_lifecycle__WEBPACK_IMPORTED_MODULE_0__.LifeCycleEvents.phase = 3 /* Restored */;
    }
    attachResourcesAndEventHandlers() {
        this._schBadgeTitle = this.querySelector(".school-badge-title");
        this._schFaceBookLink = this.querySelector(".x-fl-facebook");
        this._schInstagramLink = this.querySelector(".x-fl-instagram");
        this._schControlComponent = this.querySelector(".control-component");
    }
    attachEventListeners() {
        if (this._schBadgeTitle && this._schFaceBookLink && this._schInstagramLink && this._schControlComponent) {
            (0,ns_common_domListener__WEBPACK_IMPORTED_MODULE_1__.addDisposableEventListener)(this._schBadgeTitle, "click", ns_components_common_Header_header__WEBPACK_IMPORTED_MODULE_2__._navigateToBasePage);
            (0,ns_common_domListener__WEBPACK_IMPORTED_MODULE_1__.addDisposableEventListener)(this._schFaceBookLink, "click", this._linkToFaceBookHandle.bind(this));
            (0,ns_common_domListener__WEBPACK_IMPORTED_MODULE_1__.addDisposableEventListener)(this._schInstagramLink, "click", this._linkToInstagramHandle.bind(this));
            (0,ns_common_domListener__WEBPACK_IMPORTED_MODULE_1__.addDisposableEventListener)(this._schControlComponent, "click", this._scrollToTopLevel.bind(this));
        }
    }
    _linkToFaceBookHandle() {
    }
    ;
    _linkToInstagramHandle() {
    }
    _scrollToTopLevel() {
        window.scrollTo({
            top: 0,
            left: 0,
            behavior: "smooth"
        });
    }
}
customElements.define("ns-footer", FooterComponent);


/***/ }),

/***/ "./src/ns/components/common/Header/header.ts":
/*!***************************************************!*\
  !*** ./src/ns/components/common/Header/header.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HeaderComponent": () => (/* binding */ HeaderComponent),
/* harmony export */   "_navigateToBasePage": () => (/* binding */ _navigateToBasePage)
/* harmony export */ });
/* harmony import */ var ns_common_domListener__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ns/common/domListener */ "./src/ns/common/domListener.ts");
/* harmony import */ var ns_components_root_root__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ns/components/root/root */ "./src/ns/components/root/root.ts");
/* harmony import */ var ns_base_MediaQueries_mediaQueries__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ns/base/MediaQueries/mediaQueries */ "./src/ns/base/MediaQueries/mediaQueries.ts");
/* harmony import */ var ns_dom_links_linksManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ns/dom/links/linksManager */ "./src/ns/dom/links/linksManager.ts");




function _navigateToBasePage() {
    const __activeRouteLink = document.querySelector(".active-link");
    __activeRouteLink.classList.remove("active-link");
    const __incomingRouterLink = document.querySelector("#Home-nav-control a");
    __incomingRouterLink.classList.add("active-link");
    ns_components_root_root__WEBPACK_IMPORTED_MODULE_1__.WebMainInstance.FrameRouter.NavigateToRoute("home", { data: "" });
}
const BagdeSvgContent = `
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="624" height="487" viewBox="0 0 624 487">
<image id="Final_export_1" data-name="Final export#1" x="139" y="39" width="340" height="423" xlink:href="data:img/png;base64,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"/>
</svg>
`;
const Template_ = document.createElement('template');
Template_.innerHTML = `

    
<div class="wx-component-header-section" role="heading">
    <div class="wx-header-component-area">
        <div class="wx-badge-wrapper">
            <div id="badge-icon">
                
            </div>
            <div class="badge-title">Ndejje Senior Secondary School</div>
        </div>

        <div class="wx-navigation-bar-half-area">
            <div class="navigation-bar-wrapper">
                <div class="main-navigation-bar">
                    <ul class="navigation-items">
                        <li id="Home-nav-control">
                            <a class="active-link" href-"#">Home</a>
                        </li>
                        <li id="blog-nav-control">
                            <a href-"#">Blog</a>
                        </li>
                        <li id="about-nav-control">
                            <a href-"#">About us</a>
                        </li>
                        <li id="academics-nav-control">
                            <a href-"#">Academics</a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="accord-options">
            <div class="control-options">
                <div class="facebook-link" title="Join us On Facebook">
                    <i class="fa-brands fa-facebook"></i>
                </div>

                <div class="instagram-link" title="Follow us on Instagram">
                    <i class="fa-brands fa-instagram"></i>
                </div>

                <div class="twitter-link" title="Follow us on Twitter">
                    <i class="fa-brands fa-twitter"></i>
                </div>
                <div class="theme-manager" title="Change theme">
                    <i class="fa-solid fa-lightbulb"></i>
                </div>
        </div>
    </div>
   
</div>





</div>


`;
class HeaderComponent extends HTMLElement {
    constructor() {
        super();
        /**
         * Get neccessary elements
         */
        this._HeaderComponent = null;
        this._badgeIcon = null;
        //links
        this._homeNavControl = null;
        this._blogNavControl = null;
        this._aboutNavControl = null;
        this._academicsNavControl = null;
        //control options
        this._facebook_link = null;
        this._instagram_link = null;
        this._twitter_link = null;
        this._themeChanger_link = null;
        this.appendChild(Template_.content.cloneNode(true));
    }
    ;
    connectedCallback() {
        this.initializeHeaderComponent();
    }
    initializeHeaderComponent() {
        this.attachNeccessaryElementHandles();
        this.attachEventListenersToElements();
        // this._listenForScrollAction()
        this._attachSocialLinkksSystem();
    }
    attachNeccessaryElementHandles() {
        this._badgeIcon = this.getElement("badge-icon");
        this._homeNavControl = this.getElement("Home-nav-control");
        this._blogNavControl = this.getElement("blog-nav-control");
        this._aboutNavControl = this.getElement("about-nav-control");
        this._academicsNavControl = this.getElement("academics-nav-control");
        this._HeaderComponent = this.querySelector(".wx-component-header-section");
        this._facebook_link = this.querySelector(".facebook-link");
        this._instagram_link = this.querySelector(".instagram-link");
        this._twitter_link = this.querySelector(".twitter-link");
        this._themeChanger_link = this.querySelector(".theme-manager");
    }
    ;
    attachEventListenersToElements() {
        if (this._badgeIcon && this._homeNavControl && this._blogNavControl && this._aboutNavControl && this._academicsNavControl) {
            (0,ns_common_domListener__WEBPACK_IMPORTED_MODULE_0__.addDisposableEventListener)(this._badgeIcon, "click", _navigateToBasePage);
            (0,ns_common_domListener__WEBPACK_IMPORTED_MODULE_0__.addDisposableEventListener)(this._homeNavControl, "click", _navigateToBasePage);
            (0,ns_common_domListener__WEBPACK_IMPORTED_MODULE_0__.addDisposableEventListener)(this._blogNavControl, "click", this._navigateToBlogView.bind(this));
            (0,ns_common_domListener__WEBPACK_IMPORTED_MODULE_0__.addDisposableEventListener)(this._aboutNavControl, "click", this._navigateToAboutView.bind(this));
            (0,ns_common_domListener__WEBPACK_IMPORTED_MODULE_0__.addDisposableEventListener)(this._academicsNavControl, "click", this._navigateToAcademicsView.bind(this));
        }
    }
    ;
    _attachSocialLinkksSystem() {
        if (this._facebook_link && this._instagram_link && this._twitter_link) {
            (0,ns_common_domListener__WEBPACK_IMPORTED_MODULE_0__.addDisposableEventListener)(this._facebook_link, "click", this.__linkFaceBook.bind(this));
            (0,ns_common_domListener__WEBPACK_IMPORTED_MODULE_0__.addDisposableEventListener)(this._instagram_link, "click", this.__linkInstagram.bind(this));
            (0,ns_common_domListener__WEBPACK_IMPORTED_MODULE_0__.addDisposableEventListener)(this._twitter_link, "click", this.__linkTwitter.bind(this));
        }
    }
    ;
    __linkFaceBook() {
        ns_dom_links_linksManager__WEBPACK_IMPORTED_MODULE_3__.LinksManagerSystem.LinkToFaceBook();
    }
    __linkInstagram() {
        ns_dom_links_linksManager__WEBPACK_IMPORTED_MODULE_3__.LinksManagerSystem.LinkToInstagram();
    }
    __linkTwitter() {
        ns_dom_links_linksManager__WEBPACK_IMPORTED_MODULE_3__.LinksManagerSystem.LinkToTwitter();
    }
    _fixTheNavigationHeaderComponent(_fix) {
        if (_fix) {
            if (this._HeaderComponent) {
                this._HeaderComponent.style.position = "fixed";
            }
        }
        else {
            if (this._HeaderComponent) {
                this._HeaderComponent.style.position = "";
            }
        }
    }
    _listenForScrollAction() {
        ns_base_MediaQueries_mediaQueries__WEBPACK_IMPORTED_MODULE_2__.MediaScreenManagerControl.mediaWindowScreenDidScroll.subscribe((_positions_) => {
            if (_positions_.Y >= 300) {
                this._fixTheNavigationHeaderComponent(true);
            }
            else if (_positions_.Y == 0) {
                this._fixTheNavigationHeaderComponent(false);
            }
        });
    }
    _navigateToBlogView() {
        this._removeAndReplaceActivityState("blog");
        ns_components_root_root__WEBPACK_IMPORTED_MODULE_1__.WebMainInstance.FrameRouter.NavigateToRoute("blog", { data: "" });
    }
    ;
    _navigateToAboutView() {
        this._removeAndReplaceActivityState("about");
        ns_components_root_root__WEBPACK_IMPORTED_MODULE_1__.WebMainInstance.FrameRouter.NavigateToRoute("about", { data: "" });
    }
    ;
    _navigateToAcademicsView() {
        this._removeAndReplaceActivityState("academics");
        ns_components_root_root__WEBPACK_IMPORTED_MODULE_1__.WebMainInstance.FrameRouter.NavigateToRoute("academics", { data: "" });
    }
    ;
    _setActive(route) {
        switch (route) {
            case "about":
                this._aboutNavControl.querySelector("a").classList.add("active-link");
                break;
            case "home":
                this._homeNavControl.querySelector("a").classList.add("active-link");
                break;
            case "academics":
                this._academicsNavControl.querySelector("a").classList.add("active-link");
                break;
            case "blog":
                this._blogNavControl.querySelector("a").classList.add("active-link");
                break;
        }
    }
    _removeAndReplaceActivityState(newRoute) {
        const __activeRouteLink = this.querySelector(".active-link");
        __activeRouteLink.classList.remove("active-link");
        this._setActive(newRoute);
    }
    getElement(_string) {
        return this.querySelector(`#${_string}`);
    }
}
customElements.define("ns-header", HeaderComponent);


/***/ }),

/***/ "./src/ns/components/root/root.ts":
/*!****************************************!*\
  !*** ./src/ns/components/root/root.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UIRoot": () => (/* binding */ UIRoot),
/* harmony export */   "WebMainInstance": () => (/* binding */ WebMainInstance)
/* harmony export */ });
/* harmony import */ var ns_common_lifecycle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ns/common/lifecycle */ "./src/ns/common/lifecycle.ts");
/* harmony import */ var ns_base_Web_web_main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ns/base/Web/web.main */ "./src/ns/base/Web/web.main.ts");


const Template_ = document.createElement("template");
Template_.innerHTML = `
<div id="main-content">
    <ns-header></ns-header>
        <div id="basic-page">
            <div class="home-view page-view" ns-route="inactive" ns-view="home-view">
                <ns-home-view></ns-home-view>
            </div>
            <div class="about-view page-view" ns-route="inactive" ns-view="about-view">
                <ns-about-view></ns-about-view>
            </div>
            <div class="blog-view page-view" ns-route="inactive" ns-view="blog-view">
                <ns-blog-view></ns-blog-view>
            </div>
            <div class="academics-view page-view" ns-route="inactive" ns-view="academics-view">
                <ns-academics-view></ns-academics-view>
            </div>
        </div>
    <ns-footer></ns-footer>
    <div class="ns-sub-components">
        <div class="dialog-host">
            <ns-d-staffdialog></ns-d-staffdialog>
        </div>
    </div>
</div>
`;
const WebMainInstance = new ns_base_Web_web_main__WEBPACK_IMPORTED_MODULE_1__.WebMain();
class UIRoot extends HTMLElement {
    constructor() {
        super();
        this.appendChild(Template_.content.cloneNode(true));
    }
    connectedCallback() {
        ns_common_lifecycle__WEBPACK_IMPORTED_MODULE_0__.LifeCycleEvents.phase = 1 /* Started */;
        /**
         * We Can Connect WebMain
         */
        //Create Instance To Have It stay for a longtime;
        WebMainInstance.initResources();
    }
    ;
}
customElements.define("ns-root", UIRoot);


/***/ }),

/***/ "./src/ns/components/views/About/Core Values/corevalues.ts":
/*!*****************************************************************!*\
  !*** ./src/ns/components/views/About/Core Values/corevalues.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CoreValuesSectionComponent": () => (/* binding */ CoreValuesSectionComponent)
/* harmony export */ });
class CoreValuesSectionComponent extends HTMLElement {
    constructor() {
        super();
        this._coreValuesSection = null;
        this.innerHTML = `
        <div class="corevalues-main-section-component">
        <div class="intro-section">
        <h2>Our Core Values</h2>
        <p>The core values are the guiding principles that dictate the 
            behavior and action of the Ndejje S.S.S community. Living those
            core values helps us to determine whether we are on the right 
            path and fulfilling our goals as a school. The core values 
            make us a community and a people with a difference, 
            a distinct culture, behavior and personality
        </p>
        </div>
        <div class="main-content-container">
            <div class="split-section-1">
                <div class="title-holder">
                    <h2>Excellence</h2>
                    <div class="arithmetic"><h2>01</h2></div>
                </div>
    
                <p>Inculcation of a culture of always demanding the very best in all spheres that govern the school. All key Stakeholders should strive for high strive for high standards and quality performance, whatever the circumstances.
                </p>
            </div>
            <div class="split-section-1">
                <div class="title-holder">
                    <h2>Integrity and Time management</h2>
                    <div class="arithmetic"><h2>02</h2></div>
                </div>
    
                <p>Conducting ourselves in an irreproachable manner and utilizing limited time efficiently</p>
            </div>
            <div class="split-section-1">
                <div class="title-holder">
                    <h2>Innovativeness</h2>
                    <div class="arithmetic"><h2>03</h2></div>
                </div>
    
                <p>We embraced a dynamic technology-based culture that constantly questions the status quo and welcomes changes to improve and value to existing programs.
                </p>
            </div>
            <div class="split-section-1">
                <div class="title-holder">
                    <h2>Godliness</h2>
                    <div class="arithmetic"><h2>04</h2></div>
                </div>
    
                <p>Leading a life of faith in God and understanding the importance of living a virtuous and reverent life, which is rooted in the Bible.
                </p>
            </div>
            <div class="split-section-1">
                <div class="title-holder">
                    <h2>Patriotism</h2>
                    <div class="arithmetic"><h2>05</h2></div>
                </div>
    
                <p>Attaching ourselves to the country, driven by a national pride to accommodate the communityâs diversities.
                </p>
            </div>
            <div class="split-section-1">
                <div class="title-holder">
                    <h2>Hard Work</h2>
                    <div class="arithmetic"><h2>06</h2></div>
                </div>
    
                <p>Make every effort to fulfill our potential to the best. Be productive even when faced with challenges.</p>
            </div>
        </div>
    </div>
    `;
    }
    ;
    connectedCallback() {
    }
    ;
}
customElements.define("ns-x-corevalues", CoreValuesSectionComponent);


/***/ }),

/***/ "./src/ns/components/views/About/Glance/glance.ts":
/*!********************************************************!*\
  !*** ./src/ns/components/views/About/Glance/glance.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
const Template_ = document.createElement("template");
Template_.innerHTML = `
<div class="xb-glance-component">
    <div class="xb-wrapper">
        <div class="tr-split-view">
            <div class="tr-view-1">
                <div class="tr-view-1-wrapper">
                    <div class="tr-data-cpr">
                        <div class="cpr-wrapper">
                            <div class="cl-title">
                                <div class="cl-title-wrapper">1963</div>
                            </div>
                            <div class="cl-figure">
                                <div class="cl-figure-wrapper">The Year Ndejje was Established</div>
                            </div>
                        </div>
                    </div>
                    <div class="tr-data-cpr">
                        <div class="cpr-wrapper">
                            <div class="cl-title">
                                <div class="cl-title-wrapper">162</div>
                            </div>
                            <div class="cl-figure">
                                <div class="cl-figure-wrapper">A Large Number of Staff Members</div>
                            </div>
                        </div>
                    </div>
                    <div class="tr-data-cpr">
                        <div class="cpr-wrapper">
                            <div class="cl-title">
                                <div class="cl-title-wrapper">2100</div>
                            </div>
                            <div class="cl-figure">
                                <div class="cl-figure-wrapper">With A Vast Number of Students</div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
            <div class="tr-view-2">
                <div class="tr-view-2-wrapper">
                    <div class="cl-title-area">Ndejje At A Glance</div>
                    <div class="cl-picture-container">__image__</div>
                </div>
            </div>
        </div>
    </div>
</div>
`;
class Glance extends HTMLElement {
    constructor() {
        super();
        this.appendChild(Template_.content.cloneNode(true));
    }
    connectedCallback() {
    }
}
customElements.define("ns-x-glance", Glance);



/***/ }),

/***/ "./src/ns/components/views/About/History/history.ts":
/*!**********************************************************!*\
  !*** ./src/ns/components/views/About/History/history.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HistorySectionComponent": () => (/* binding */ HistorySectionComponent)
/* harmony export */ });
class HistorySectionComponent extends HTMLElement {
    constructor() {
        super();
        this._historySection = null;
        this.innerHTML = `
        <div class="historyComponent">
        <div class="main-historysection-container">
            <div class="split-layout-divider">
                <div class="section-content-1">
                    <h2>History Of the School</h2>
                    <p>View the history of the school</p>
                    <button>Read more</button>
                </div>
    
                <div class="section-content-2">
                    <div class="mini-divider">
                        <div class="content-class-a">
                            <p>1987</p>
                        </div>

                        <div class="content-class-b">
                            Lorem ipsum dolor, sit amet
                            suscipit quam praesentium ab mollitia aspernatur dicta.
                        </div>
                        <div class="content-class-x">
                            <p>1985</p>
                        </div>
                        <div class="content-class-y">
                            Lorem ipsum dolor, sit amet
                            suscipit quam praesentium ab mollitia aspernatur dicta.
                        </div>
                        <div class="content-class-a">
                            <p>1987</p>
                        </div>
                        <div class="content-class-b">
                            Lorem ipsum dolor, sit amet
                            suscipit quam praesentium ab mollitia aspernatur dicta.
                        </div>
                        <div class="content-class-x">
                            <p>1987</p>
                        </div>
                        <div class="content-class-y">
                            Lorem ipsum dolor, sit amet
                            suscipit quam praesentium ab mollitia aspernatur dicta.
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    `;
    }
    ;
    connectedCallback() {
    }
    ;
}
customElements.define("ns-x-history", HistorySectionComponent);


/***/ }),

/***/ "./src/ns/components/views/About/StaffView/staffDialog/staffDialog.ts":
/*!****************************************************************************!*\
  !*** ./src/ns/components/views/About/StaffView/staffDialog/staffDialog.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
const Template_ = document.createElement("template");
Template_.innerHTML = `
<div class="xb-dialog-component">
    <div class="cb-dashboard-control">
        <div class="title-area">
            <div class="title-area-wrapper">More of Our Staff Members</div>
        </div>
        <div class="close-control-wrapper">
            <div class="close-control">&times;</div>
        </div>
    </div>
    <div class="cb-dashboard-content">
        <div class="cb-dashboard-content-wrapper">
            <ns-x-member></ns-x-member>
            <ns-x-member></ns-x-member>
            <ns-x-member></ns-x-member>
            <ns-x-member></ns-x-member>
            <ns-x-member></ns-x-member>
            <ns-x-member></ns-x-member>
            <ns-x-member></ns-x-member>
            <ns-x-member></ns-x-member>
            <ns-x-member></ns-x-member>
            <ns-x-member></ns-x-member>
            <ns-x-member></ns-x-member>
            <ns-x-member></ns-x-member>
        </div>
    </div>
</div>


`;
class StaffDialog extends HTMLElement {
    constructor() {
        super();
        this.appendChild(Template_.content.cloneNode(true));
    }
    connectedCallback() {
    }
}
customElements.define("ns-d-staffdialog", StaffDialog);



/***/ }),

/***/ "./src/ns/components/views/About/StaffView/staffview.ts":
/*!**************************************************************!*\
  !*** ./src/ns/components/views/About/StaffView/staffview.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
const Template_ = document.createElement("template");
Template_.innerHTML = `
<div class="xb-staffview">
    <div class="xb-wrapper">
        <div class="tr-title-area-wrapper">
            <div class="tr-title-container">Staff Members</div>
        </div>
        <div class="tr-container-elements">
            <div class="tr-container-wrapper">
                <div class="tr-view-1">
                    <div class="tr-view-1-wrapper">
                        <div class="cl-view-1">
                            <div class="cl-picture-container">_image_</div>
                        </div>
                        <div class="cl-view-2">
                            <div class="cl-content-text-holder">
                                <div class="ty-1">Meet Our HeadTeacher</div>
                                <div class="ty-2">On behalf of the School Administration, I welcome you all to this platform in the name of our Lord Jesus Christ and Saviour. Ndejje Senior Secondary School is one of the top Church of Uganda schools whose success is a result of the visionary leadership it has had for the last thirty years.</div>
                                <div class="ty-3">Ndejje has distinguished itself in providing holistic Education that brings up a balanced person empowered with relevant knowledge, skills and values to be a successful National and Global citizen.</div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="tr-view-2">
                    <div class="tr-view-2-wrapper">
                        <div class="tr-content">
                            <div class="tr-content-wrapper">
                                <div class="tr-members-wrapper">
                                    <ns-x-member></ns-x-member>
                                    <ns-x-member></ns-x-member>
                                    <ns-x-member></ns-x-member>
                                    <ns-x-member></ns-x-member>
                                    <ns-x-member></ns-x-member>
                                    <ns-x-member></ns-x-member>
                                    <ns-x-member></ns-x-member>
                                    <ns-x-member></ns-x-member>
                                </div>
                            </div>
                        </div>
                        <div class="tr-content-2">
                            <div class="selective-btn">View More</div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>
`;
class StaffView extends HTMLElement {
    constructor() {
        super();
        this.appendChild(Template_.content.cloneNode(true));
    }
    connectedCallback() {
    }
}
customElements.define("ns-x-staffview", StaffView);



/***/ }),

/***/ "./src/ns/components/views/About/StaffView/sub-components/memeber.item.ts":
/*!********************************************************************************!*\
  !*** ./src/ns/components/views/About/StaffView/sub-components/memeber.item.ts ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
const Template_ = document.createElement("template");
Template_.innerHTML = `
<div class="xb-cl-memeber">
    <div class="xb-cl-wrapper">
        <div class="xb-picture-container">
            <div class="xb-picture-container-wrapper">__image__</div>
        </div>
        <div class="xb-content">
            <div class="xb-content-wrapper">
                <div class="xb-ct-1 xb-name xb-text">Kalema Pius</div>
                <div class="xb-ct-2 xb-post xb-text">Publiciy Secretary ICT club</div>
                <div class="xb-ct-3 xb-link xb-text">@Kalema Pius</div>
            </div>
        </div>
    </div>
</div>`;
class MemberElement extends HTMLElement {
    constructor() {
        super();
        this.appendChild(Template_.content.cloneNode(true));
    }
    connectedCallback() {
    }
}
customElements.define("ns-x-member", MemberElement);



/***/ }),

/***/ "./src/ns/components/views/About/VidInterview/VidInterview.ts":
/*!********************************************************************!*\
  !*** ./src/ns/components/views/About/VidInterview/VidInterview.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
const Template_ = document.createElement("template");
Template_.innerHTML = `
<div class="xb-vid-interview">
    <div class="xb-wrapper">
        <div class="xb-content-container">
            <div class="vid-cover-poster">
                <div class="wrapper">
                    <div class="xty-image-control">
                        <div class="xty-ctrl"></div>
                    </div>
                    <div class="xty-video-control">
                        <video src="" controls></video>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

`;
class VidInterview extends HTMLElement {
    constructor() {
        super();
        this.appendChild(Template_.content.cloneNode(true));
    }
    connectedCallback() {
    }
}
customElements.define("ns-x-vidinterview", VidInterview);



/***/ }),

/***/ "./src/ns/components/views/About/WelcomeNote/welcomeNote.ts":
/*!******************************************************************!*\
  !*** ./src/ns/components/views/About/WelcomeNote/welcomeNote.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
const Template_ = document.createElement("template");
Template_.innerHTML = `
<div class="xb-about-component">
    <div class="xb-wrapper">
        <div class="tr-title">
            <div class="wrapper">About Us</div>
        </div>
        <div class="tr-x-line"></div>
        <div class="tr-x-description">Get To Know About Ndejje In a deeper Aspect</div>
    </div>
</div>
`;
class WelcomeNote extends HTMLElement {
    constructor() {
        super();
        this.appendChild(Template_.content.cloneNode(true));
    }
    connectedCallback() {
    }
}
customElements.define("ns-x-welcomenote", WelcomeNote);



/***/ }),

/***/ "./src/ns/components/views/About/XGoal/xgoal.ts":
/*!******************************************************!*\
  !*** ./src/ns/components/views/About/XGoal/xgoal.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
const Template_ = document.createElement("template");
Template_.innerHTML = `
<div class="xb-goal-component">
    <div class="xb-wrapper">
        <div class="tr-title-area-wrapper">
            <div class="tr-title-container">Our Vision</div>
        </div>
        <div class="tr-description-wrapper">
            <div class="tr-description-container">A Christ â centered school nurturing holistically component citizens for development and prosperity.</div>
        </div>
    </div>
</div>

`;
class OurGoal extends HTMLElement {
    constructor() {
        super();
        this.appendChild(Template_.content.cloneNode(true));
    }
    connectedCallback() {
    }
}
customElements.define("ns-x-xgoal", OurGoal);



/***/ }),

/***/ "./src/ns/components/views/About/view.about.ts":
/*!*****************************************************!*\
  !*** ./src/ns/components/views/About/view.about.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AboutView": () => (/* binding */ AboutView)
/* harmony export */ });
class AboutView extends HTMLElement {
    constructor() {
        super();
        this.innerHTML = `
        <ns-x-welcomenote></ns-x-welcomenote>
        <ns-x-glance></ns-x-glance>
        <ns-x-xgoal></ns-x-xgoal>
        <ns-x-staffview></ns-x-staffview>
        <ns-x-corevalues></ns-x-corevalues>
        <ns-x-vidinterview></ns-x-vidinterview>
        <ns-x-history></ns-x-history>
        `;
    }
    connectedCallback() {
        this._initResourcesOfViewHome();
    }
    ;
    _initResourcesOfViewHome() {
    }
}
customElements.define("ns-about-view", AboutView);


/***/ }),

/***/ "./src/ns/components/views/Home/Banner Area/banner.ts":
/*!************************************************************!*\
  !*** ./src/ns/components/views/Home/Banner Area/banner.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BannerAreaComponent": () => (/* binding */ BannerAreaComponent)
/* harmony export */ });
/* harmony import */ var ns_common_Animations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ns/common/Animations */ "./src/ns/common/Animations.ts");

class BannerAreaComponent extends HTMLElement {
    constructor() {
        super();
        this._commonWelcomeComponentSection = null;
        this.innerHTML = `
            <div class="ponaco-splitview-1">
                <div class="wx-component-user-section">
                    <div class="welcome-note-section">
                        <div class="note-1">Ndejje Senior Secondary School</div>
                        <div class="note-2">Sharing And Educating Humanity.</div>
                        <ns-enroll-button></ns-enroll-button>
                    </div>
                </div>
            </div>
        `;
    }
    ;
    connectedCallback() {
        this.init();
    }
    ;
    init() {
        this.createComponentAttachment();
        this.createFlowAnimation();
    }
    createComponentAttachment() {
        this._commonWelcomeComponentSection = this.querySelector(".welcome-note-section");
    }
    ;
    createFlowAnimation() {
        if (this._commonWelcomeComponentSection) {
            setTimeout(() => {
                ns_common_Animations__WEBPACK_IMPORTED_MODULE_0__.AnimationProvider.executeInterfaceAnimation("WELCOME_COMPONENT");
            }, 500);
        }
    }
}
customElements.define("ns-x-banner", BannerAreaComponent);


/***/ }),

/***/ "./src/ns/components/views/Home/FAQ Section/FAQ.ts":
/*!*********************************************************!*\
  !*** ./src/ns/components/views/Home/FAQ Section/FAQ.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FaqComponent": () => (/* binding */ FaqComponent)
/* harmony export */ });
class FaqComponent extends HTMLElement {
    constructor() {
        super();
        this._frequentlyAskedQuestions = null;
        this.innerHTML = `
        <div class="main-faqcomponent">
        <div class="main-content-layout">
            <h2>Frequently Asked Questions</h2>
    
            <div class="content-slider">
                <div class="info-slider-1">
                    <div class="initial-display-1">
                        <p>Where can I find the headquaters of Ndejje SSS?</p>
                    </div>
                    <div class="slider-expand-section">
                        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Iste assumenda facilis,
                            pariatur soluta libero consequuntur modi autem velit quibusdam harum quod ipsam? 
                           </p>
                    </div>
                </div>
                <div class="info-slider-1">
                    <div class="initial-display-1">
                        <p>What is the school fees per term?</p>
                    </div>
    
                    <div class="slider-expand-section">
                        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Iste assumenda facilis,
                            pariatur soluta libero consequuntur modi autem velit quibusdam harum quod ipsam? 
                        </p>
                    </div>
                </div>
                <div class="info-slider-1">
                    <div class="initial-display-1">
                        <p>How can I contact the school for any queries?</p>
                    </div>
                    <div class="slider-expand-section">
                        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Iste assumenda facilis,
                            pariatur soluta libero consequuntur modi autem velit quibusdam harum quod ipsam? 
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>        
    `;
    }
    ;
    connectedCallback() {
        this.init();
    }
    ;
    init() {
        this.createClickAnimation();
    }
    createClickAnimation() {
        this._frequentlyAskedQuestions = this.querySelector("FAQ");
    }
}
customElements.define("ns-x-faq", FaqComponent);


/***/ }),

/***/ "./src/ns/components/views/Home/Goals And Benefits/goalsB.ts":
/*!*******************************************************************!*\
  !*** ./src/ns/components/views/Home/Goals And Benefits/goalsB.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GoalsBenefitsComponent": () => (/* binding */ GoalsBenefitsComponent)
/* harmony export */ });
/* harmony import */ var ns_common_domListener__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ns/common/domListener */ "./src/ns/common/domListener.ts");

const Template_ = document.createElement("template");
Template_.innerHTML = `
<div class="ponaco-splitview-3">
    <div class="wx-component-3">
        <div class="split-view">
            <div class="ctr-component-container">
                <div class="ctr-component-wrapper rx-component">
                    <div class="conic-section-1">
                        <div class="ctx-pictures-wrapper">
                            <div class="ctx-pic-1 cn-pic-box">
                                <div class="cn-picture-container">__image__</div>
                                <div class="cn-info-container">
                                    <div class="cn-info-wrapper">
                                        <div class="cn-short-title">Practice</div>
                                        <div class="cn-short-title-2">Technology</div>
                                    </div>
                                </div>
                            </div>
                            <div class="ctx-additive-pics">
                                <div class="ctx-pic-2 cn-pic-box">
                                    <div class="cn-picture-container">__image__</div>
                                    <div class="cn-info-container">
                                        <div class="cn-info-wrapper">
                                            <div class="cn-short-title">Practice</div>
                                            <div class="cn-short-title-2">Technology</div>
                                        </div>
                                    </div>
                                </div>
                                <div class="ctx-pic-3 cn-pic-box">
                                    <div class="cn-picture-container">__image__</div>
                                    <div class="cn-info-container">
                                        <div class="cn-info-wrapper">
                                            <div class="cn-short-title">Practice</div>
                                            <div class="cn-short-title-2">Technology</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="conic-section-2">
                        <div class="wrapper">
                        <div class="content-wrapper benefits-content-holder">
                            <div class="cr-title">Building Effective Students</div>
                            <div class="cr-description">

                            Our faculty lead students to reach further, to achieve their goals and to effect change in the professions and passions they pursue.

                            </div>
                            <div class="cr-xmore">Read More</div>
                        </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>

`;
class GoalsBenefitsComponent extends HTMLElement {
    constructor() {
        super();
        this._contentRedirect = null;
        this.appendChild(Template_.content.cloneNode(true));
    }
    ;
    connectedCallback() {
        this.init();
    }
    ;
    init() {
        this.createElementHandles();
        this.registerEventListener();
    }
    createElementHandles() {
        this._contentRedirect = this.querySelector(".content-redirect");
    }
    ;
    registerEventListener() {
        if (this._contentRedirect) {
            (0,ns_common_domListener__WEBPACK_IMPORTED_MODULE_0__.addDisposableEventListener)(this._contentRedirect, "click", this._redirectContent.bind(this));
        }
    }
    ;
    _redirectContent() {
    }
}
;
customElements.define("ns-x-benefits", GoalsBenefitsComponent);


/***/ }),

/***/ "./src/ns/components/views/Home/Insights/Insights.strings.ts":
/*!*******************************************************************!*\
  !*** ./src/ns/components/views/Home/Insights/Insights.strings.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InsightsStrings": () => (/* binding */ InsightsStrings)
/* harmony export */ });
const InsightsStrings = [
    {
        title: "ICT Club",
        componentPictureSrc: "",
        shortDescription: "Lorem ipsum dolor sit, amet consectetur adipisicing elit. Impedit nobis aspernatur ipsum odio! Aperiam magnam quaerat alias cul",
        onClickCallback: () => {
        },
    },
    {
        title: "Sports Club",
        componentPictureSrc: "",
        shortDescription: "Lorem ipsum dolor sit, amet consectetur adipisicing elit. Impedit nobis aspernatur ipsum odio! Aperiam magnam quaerat alias cul",
        onClickCallback: () => {
        },
    },
    {
        title: "Wildlife Club",
        componentPictureSrc: "",
        shortDescription: "Lorem ipsum dolor sit, amet consectetur adipisicing elit. Impedit nobis aspernatur ipsum odio! Aperiam magnam quaerat alias cul",
        onClickCallback: () => {
        },
    },
    {
        title: "Bussiness Club",
        componentPictureSrc: "",
        shortDescription: "",
        onClickCallback: () => {
        },
    }
];


/***/ }),

/***/ "./src/ns/components/views/Home/Insights/Insights.ts":
/*!***********************************************************!*\
  !*** ./src/ns/components/views/Home/Insights/Insights.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InsightsComponent": () => (/* binding */ InsightsComponent)
/* harmony export */ });
const Template_ = document.createElement("template");
Template_.innerHTML = `
<div class="ponaco-splitview-5">
    <div class="wx-insights-component">
        <div class="main-wrapper">
            <div class="content-title">
                <div class="content-title-wrapper">
                    Uniqueness of Ndejje  S.S.S
                </div>
            </div>
            <div class="cards-container">
                <div class="card-wrapper-1">
                    <div class="card-wrapper-2">
                        <div class="card-x-component">
                            <div class="card-content">
                                <div class="card-content-wrapper">
                                    <div class="card-content-image">__image__</div>
                                    <div class="card-content-info">
                                        <div class="x-title-1 ctrinfo">Relating And Knowing Other Students</div>
                                        <div class="x-title-2 ctrinfo">Many Students have suffered a social boundary
                                            because of the
                                            great wall of school which destroys there social life.</div>
                                        <div class="x-title-btn">
                                            <div class="x-btn-wrapper ctrinfo">
                                                <div class="sl-button">&RightArrow;</div>
                                                <div class="sl-text">Read More From Interact Club.</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card-x-component">
                            <div class="card-content">
                                <div class="card-content-wrapper">
                                    <div class="card-content-image">__image__</div>
                                    <div class="card-content-info">
                                        <div class="x-title-1 ctrinfo">Relating And Knowing Other Students</div>
                                        <div class="x-title-2 ctrinfo">Many Students have suffered a social boundary
                                            because of the
                                            great wall of school which destroys there social life.</div>
                                        <div class="x-title-btn">
                                            <div class="x-btn-wrapper ctrinfo">
                                                <div class="sl-button">&RightArrow;</div>
                                                <div class="sl-text">Read More From Interact Club.</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card-x-component">
                            <div class="card-content">
                                <div class="card-content-wrapper">
                                    <div class="card-content-image">__image__</div>
                                    <div class="card-content-info">
                                        <div class="x-title-1 ctrinfo">Relating And Knowing Other Students</div>
                                        <div class="x-title-2 ctrinfo">Many Students have suffered a social boundary
                                            because of the
                                            great wall of school which destroys there social life.</div>
                                        <div class="x-title-btn">
                                            <div class="x-btn-wrapper ctrinfo">
                                                <div class="sl-button">&RightArrow;</div>
                                                <div class="sl-text">Read More From Interact Club.</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card-x-component">
                            <div class="card-content">
                                <div class="card-content-wrapper">
                                    <div class="card-content-image">__image__</div>
                                    <div class="card-content-info">
                                        <div class="x-title-1 ctrinfo">Relating And Knowing Other Students</div>
                                        <div class="x-title-2 ctrinfo">Many Students have suffered a social boundary
                                            because of the
                                            great wall of school which destroys there social life.</div>
                                        <div class="x-title-btn">
                                            <div class="x-btn-wrapper ctrinfo">
                                                <div class="sl-button">&RightArrow;</div>
                                                <div class="sl-text">Read More From Interact Club.</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

`;
class InsightsComponent extends HTMLElement {
    constructor() {
        super();
        this.appendChild(Template_.content.cloneNode(true));
    }
    connectedCallback() {
    }
}
customElements.define("ns-x-insights", InsightsComponent);


/***/ }),

/***/ "./src/ns/components/views/Home/Joy And Pride/pride.ts":
/*!*************************************************************!*\
  !*** ./src/ns/components/views/Home/Joy And Pride/pride.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PrideComponent": () => (/* binding */ PrideComponent)
/* harmony export */ });
const _svgDataContent = `
<svg 
 xmlns="http://www.w3.org/2000/svg"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 width="11.875in" height="1.611in">
<text kerning="auto" font-family="Myriad Pro" fill="rgb(0, 0, 0)" font-size="141.667px" x="0px" y="100.7px"><tspan font-size="141.667px" font-family="Montserrat Alternates" fill="#00A4E0">Ndejje&#32;S&#46;S&#46;S</tspan></text>
</svg>
`;
const Template_ = document.createElement("template");
Template_.innerHTML = `
    <div class="pride-x-component">
    <div class="container">
    <div class="welcome-text">
        <div class="welcome-text-wrapper">
            No Pains No Gains
        </div>
    </div>
    <div class="welcome-text-2 svg-container">
        <div class="svg-container-wrapper">Ndejje S.S.S</div>
    </div>
    <div class="control-button-container">
        <div class="expl-button-container">Explore</div>
    </div>
    </div>
</div>

`;
class PrideComponent extends HTMLElement {
    constructor() {
        super();
        this.appendChild(Template_.content.cloneNode(true));
    }
    connectedCallback() {
        this.init();
    }
    init() {
        this._createFlowAnimation();
    }
    _createFlowAnimation() {
    }
}
customElements.define("ns-x-pride", PrideComponent);


/***/ }),

/***/ "./src/ns/components/views/Home/Quote/quote.ts":
/*!*****************************************************!*\
  !*** ./src/ns/components/views/Home/Quote/quote.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "QuoteComponent": () => (/* binding */ QuoteComponent)
/* harmony export */ });
class QuoteComponent extends HTMLElement {
    constructor() {
        super();
        this._mainContentHolder = null;
        this.innerHTML = `
        <div class="ponaco-splitview-6">
            <div class="wx-component-6">
                <div class="main-content-holder">
                    <div class="x-content-1">Time has a wonderful way of showing us what matters</div>
                    <div class="x-content-2">Dr. Charles Kahigiriza</div>
                </div>
            </div>
        </div>
        `;
    }
    connectedCallback() {
        this.init();
    }
    createElementHandle() {
        this._mainContentHolder = this.querySelector(".main-content-holder");
    }
    scrollIntoView(arg) {
        if (arg) {
            this.createFlowAnimation();
        }
    }
    createFlowAnimation() {
    }
    init() {
        this.createElementHandle();
    }
}
customElements.define("ns-x-quote", QuoteComponent);


/***/ }),

/***/ "./src/ns/components/views/Home/Reviews/review.ts":
/*!********************************************************!*\
  !*** ./src/ns/components/views/Home/Reviews/review.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ReviewSection": () => (/* binding */ ReviewSection)
/* harmony export */ });
class ReviewSection extends HTMLElement {
    constructor() {
        super();
        this._reviews = null;
        this.innerHTML = `   
        <div class="review-main-component">
        <div class="main-review-container">
            <div class="split-layout-containers">
                <div class="split-container-1">
                    
                </div>
                <div class="split-container-2">
                    <h2> -Student Reviews</h2>
    
                    <div class="student-quote">
                        <p>"Lorem ipsum dolor sit amet consectetur adipisicing elit. 
                            Beatae obcaecati, alias at ut vel quaerat amet minima velit minus iusto
                            quisquam pariatur perspiciatis natus nostrum vitae officia possimus 
                            nulla suscipit".
                        </p>
                    </div>
    
                    <div class="carosell-navigation">
                        <div class="carosell-1"></div>
                        <div class="carosell-1 carosell-2"></div>
                        <div class="carosell-1 carosell-2"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>  
    `;
    }
    ;
    connectedCallback() {
        this.init();
    }
    ;
    init() {
        this.createClickAnimation();
    }
    createClickAnimation() {
        this._reviews = this.querySelector("Review");
    }
}
customElements.define("ns-x-reviews", ReviewSection);


/***/ }),

/***/ "./src/ns/components/views/Home/edu/edu.ts":
/*!*************************************************!*\
  !*** ./src/ns/components/views/Home/edu/edu.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EduComponent": () => (/* binding */ EduComponent)
/* harmony export */ });
const Template_ = document.createElement("template");
Template_.innerHTML = `
<div class="ponaco-component-edu">
    <div class="wrapper">
        <div class="info">Education  the Key.</div>
    </div>
</div>
`;
class EduComponent extends HTMLElement {
    constructor() {
        super();
        this.appendChild(Template_.content.cloneNode(true));
    }
    connectedCallback() {
    }
    ;
}
customElements.define("ns-x-edu", EduComponent);


/***/ }),

/***/ "./src/ns/components/views/Home/view.home.ts":
/*!***************************************************!*\
  !*** ./src/ns/components/views/Home/view.home.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HomeView": () => (/* binding */ HomeView)
/* harmony export */ });
/* harmony import */ var ns_dom_sizeManagers_BannerImageSize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ns/dom/sizeManagers/BannerImageSize */ "./src/ns/dom/sizeManagers/BannerImageSize.ts");
/* harmony import */ var ns_base_instanceCreators_instanceCreators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ns/base/instanceCreators/instanceCreators */ "./src/ns/base/instanceCreators/instanceCreators.ts");


class HomeView extends HTMLElement {
    constructor() {
        super();
        this.innerHTML = `
            <ns-x-banner></ns-x-banner>
            <ns-x-pride></ns-x-pride>
            <ns-x-benefits></ns-x-benefits>
            <div class="ponaco-x-component misson-container">
                <div class="content-wrapper">
                    <div class="title-area">
                        <div class="sr1">Mission</div>
                    </div>
                    <div class="description-area">
                        <div class="sr2">From rigorous academics to the beautiful greens of our tree-filled campus to the activity of student life, Ndejje has it all. Switch between Live and Learn to explore everything Ndejje has to offer</div>
                    </div>
                </div>
            </div>
            <ns-x-insights></ns-x-insights>
            <ns-x-quote></ns-x-quote>
            <ns-x-reviews></ns-x-reviews>
            <ns-x-edu></ns-x-edu>
            <ns-x-Faq></ns-x-Faq>

        `;
    }
    connectedCallback() {
        this._initResourcesOfViewHome();
    }
    ;
    _initResourcesOfViewHome() {
        (0,ns_base_instanceCreators_instanceCreators__WEBPACK_IMPORTED_MODULE_1__.createInstance)(ns_dom_sizeManagers_BannerImageSize__WEBPACK_IMPORTED_MODULE_0__.BannerImageSizer);
    }
}
customElements.define("ns-home-view", HomeView);


/***/ }),

/***/ "./src/ns/dom/Interface/FooterInterfaceManager.ts":
/*!********************************************************!*\
  !*** ./src/ns/dom/Interface/FooterInterfaceManager.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "footerInterfaceManager": () => (/* binding */ footerInterfaceManager)
/* harmony export */ });
/* harmony import */ var ns_base_MediaQueries_ScreenControls_controlInitializerEvent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ns/base/MediaQueries/ScreenControls/controlInitializerEvent */ "./src/ns/base/MediaQueries/ScreenControls/controlInitializerEvent.ts");
/* harmony import */ var ns_base_MediaQueries_ScreenControls_Services_footerControl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ns/base/MediaQueries/ScreenControls/Services/footerControl */ "./src/ns/base/MediaQueries/ScreenControls/Services/footerControl.ts");
/* harmony import */ var ns_common_lifecycle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ns/common/lifecycle */ "./src/ns/common/lifecycle.ts");
/* harmony import */ var ns_common_domListener__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ns/common/domListener */ "./src/ns/common/domListener.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};




/**
 * Since the breakpoint are minimal global variables are instead used;
 */
let footerInterfaceManager = class footerInterfaceManager {
    constructor(FooterScreenControl) {
        this.FooterScreenControl = FooterScreenControl;
        this._nsCommonFooterWrapper = null;
        this._registerForLifeCycleEvents();
    }
    ;
    _registerForLifeCycleEvents() {
        ns_common_lifecycle__WEBPACK_IMPORTED_MODULE_2__.LifeCycleEvents.onPhaseDidChange.subscribe(this._listenerForLifecycleEvents.bind(this));
    }
    ;
    _unregisterForLifeCyleEvents() {
        ns_common_lifecycle__WEBPACK_IMPORTED_MODULE_2__.LifeCycleEvents.onPhaseDidChange.unsubscribe(this._listenerForLifecycleEvents.bind(this));
    }
    _listenerForLifecycleEvents(phase) {
        if (phase == 3 /* Restored */) {
            this.initInterface();
            this._unregisterForLifeCyleEvents();
        }
    }
    ;
    initInterface() {
        console.log("Footer Interface started");
        this._attachDomElement();
        this._contentManagementListenerSystem();
    }
    ;
    _attachDomElement() {
        this._nsCommonFooterWrapper = (0,ns_common_domListener__WEBPACK_IMPORTED_MODULE_3__.$)(".component-footer-wrapper");
        console.log(this._nsCommonFooterWrapper);
    }
    _contentManagementListenerSystem() {
        this.FooterScreenControl.footerDidReachBreakPoint(this._listenerForAllChanges.bind(this));
        ns_base_MediaQueries_ScreenControls_controlInitializerEvent__WEBPACK_IMPORTED_MODULE_0__.ControlIntializerInstance.CIEventControl.emit("ConnectedBreakPointCallback", "__FooterControl__");
    }
    _listenerForAllChanges(args) {
        //content_size breakpoint
        if (args.breakpoint == ns_base_MediaQueries_ScreenControls_Services_footerControl__WEBPACK_IMPORTED_MODULE_1__.BreakPoints.XTR_3 && args.keyValue == "content-font") {
            this._reduceFooterFontSize(true);
        }
        else if (args.breakpoint == ns_base_MediaQueries_ScreenControls_Services_footerControl__WEBPACK_IMPORTED_MODULE_1__.BreakPoints.XTR_X_3 && args.keyValue == "content-font") {
            this._reduceFooterFontSize(false);
        }
        if (args.breakpoint == ns_base_MediaQueries_ScreenControls_Services_footerControl__WEBPACK_IMPORTED_MODULE_1__.BreakPoints.XTR_1 && args.keyValue == "content-size") {
            this._snapTheFooter(true);
        }
        else if (args.breakpoint == ns_base_MediaQueries_ScreenControls_Services_footerControl__WEBPACK_IMPORTED_MODULE_1__.BreakPoints.XTR_X_1 && args.keyValue == "content-size") {
            this._snapTheFooter(false);
        }
    }
    _snapTheFooter(shouldSnap) {
        if (shouldSnap) {
            if (this._nsCommonFooterWrapper) {
                //@ts-ignore
                this._nsCommonFooterWrapper.style.setProperty("--ns-footer-display", "block");
            }
        }
        else {
            if (this._nsCommonFooterWrapper) {
                //@ts-ignore
                this._nsCommonFooterWrapper.style.setProperty("--ns-footer-display", "grid");
            }
        }
    }
    _reduceFooterFontSize(shouldReduce) {
        if (shouldReduce) {
            if (this._nsCommonFooterWrapper) {
                //@ts-ignore
                this._nsCommonFooterWrapper.style.setProperty("--ns-footer-Biggest-font-size", "30pt");
            }
        }
        else {
            if (this._nsCommonFooterWrapper) {
                //@ts-ignore
                this._nsCommonFooterWrapper.style.setProperty("--ns-footer-Biggest-font-size", "40pt");
            }
        }
    }
};
footerInterfaceManager = __decorate([
    __param(0, ns_base_MediaQueries_ScreenControls_Services_footerControl__WEBPACK_IMPORTED_MODULE_1__.IFooterScreenControlManager)
], footerInterfaceManager);

;


/***/ }),

/***/ "./src/ns/dom/Interface/HeaderIntefaceManager.ts":
/*!*******************************************************!*\
  !*** ./src/ns/dom/Interface/HeaderIntefaceManager.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "headerInterfaceManager": () => (/* binding */ headerInterfaceManager)
/* harmony export */ });
/* harmony import */ var ns_base_MediaQueries_ScreenControls_controlInitializerEvent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ns/base/MediaQueries/ScreenControls/controlInitializerEvent */ "./src/ns/base/MediaQueries/ScreenControls/controlInitializerEvent.ts");
/* harmony import */ var ns_base_MediaQueries_ScreenControls_Services_headerControl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ns/base/MediaQueries/ScreenControls/Services/headerControl */ "./src/ns/base/MediaQueries/ScreenControls/Services/headerControl.ts");
/* harmony import */ var ns_common_lifecycle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ns/common/lifecycle */ "./src/ns/common/lifecycle.ts");
/* harmony import */ var ns_common_domListener__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ns/common/domListener */ "./src/ns/common/domListener.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};




let headerInterfaceManager = class headerInterfaceManager {
    constructor(HeaderScreenControl) {
        this.HeaderScreenControl = HeaderScreenControl;
        this._navigationbarHost = null;
        this._navigationBarScreenMemoize = "outOfRange";
        this._badgeWrapper = null;
        this._badgeWrapperTitle = null;
        this._badgeWrapperBadge = null;
        this._enrollBtn = null;
        this._navigationBarComponent = null;
        this._wxBars = null;
        this._registerForLifeCycleEvents();
    }
    ;
    _registerForLifeCycleEvents() {
        ns_common_lifecycle__WEBPACK_IMPORTED_MODULE_2__.LifeCycleEvents.onPhaseDidChange.subscribe(this._listenerForLifecycleEvents.bind(this));
    }
    ;
    _unregisterForLifeCyleEvents() {
        ns_common_lifecycle__WEBPACK_IMPORTED_MODULE_2__.LifeCycleEvents.onPhaseDidChange.unsubscribe(this._listenerForLifecycleEvents.bind(this));
    }
    _listenerForLifecycleEvents(phase) {
        if (phase == 3 /* Restored */) {
            this.initInterface();
            this._unregisterForLifeCyleEvents();
        }
    }
    ;
    initInterface() {
        this._attachDomElements();
        this._contentManagementListenerSystem();
    }
    _attachDomElements() {
        this._badgeWrapper = (0,ns_common_domListener__WEBPACK_IMPORTED_MODULE_3__.$)(".wx-badge-wrapper");
        this._badgeWrapperTitle = (0,ns_common_domListener__WEBPACK_IMPORTED_MODULE_3__.$)(".wx-badge-wrapper .badge-title");
        this._badgeWrapperBadge = (0,ns_common_domListener__WEBPACK_IMPORTED_MODULE_3__.$)(".wx-badge-wrapper .badge-icon");
        this._enrollBtn = (0,ns_common_domListener__WEBPACK_IMPORTED_MODULE_3__.$)(".wx-header-component-area ns-enroll-button");
        this._navigationBarComponent = (0,ns_common_domListener__WEBPACK_IMPORTED_MODULE_3__.$)(".wx-navigation-bar-half-area");
        this._wxBars = (0,ns_common_domListener__WEBPACK_IMPORTED_MODULE_3__.$)(".wx-bars");
        this._navigationbarHost = (0,ns_common_domListener__WEBPACK_IMPORTED_MODULE_3__.$)(".wx-component-header-section");
    }
    _contentManagementListenerSystem() {
        this.HeaderScreenControl.headerDidReachBreakPoint(this._listenerForAllChanges.bind(this));
        ns_base_MediaQueries_ScreenControls_controlInitializerEvent__WEBPACK_IMPORTED_MODULE_0__.ControlIntializerInstance.CIEventControl.emit("ConnectedBreakPointCallback", "__HeaderControl__");
    }
    ;
    _listenerForAllChanges(args) {
        //ensure to be specific with the breakpoint and the keyvalue
        if (args.breakpoint == ns_base_MediaQueries_ScreenControls_Services_headerControl__WEBPACK_IMPORTED_MODULE_1__.BreakPoints.NAVIGATION_BREAKPOINT && args.keyValue == "navigationBar") {
            this._$hideOrShowNavigationBarAndEnrollButton(false);
        }
        else if (args.breakpoint == ns_base_MediaQueries_ScreenControls_Services_headerControl__WEBPACK_IMPORTED_MODULE_1__.BreakPoints.NAVIGATION_BREAKPOINT_X && args.keyValue == "navigationBar") {
            this._$hideOrShowNavigationBarAndEnrollButton(true);
        }
        //First Initial BreakPoints for The BadgeWrapper;
        if (args.breakpoint == ns_base_MediaQueries_ScreenControls_Services_headerControl__WEBPACK_IMPORTED_MODULE_1__.BreakPoints.BADGE_BREAKPOINT_1 && args.keyValue == "badge-wrapper") {
            this._removeInitialbadgeWrapperMargin(true);
        }
        else if (args.breakpoint == ns_base_MediaQueries_ScreenControls_Services_headerControl__WEBPACK_IMPORTED_MODULE_1__.BreakPoints.BADGE_BREAKPOINT_2 && args.keyValue == "badge-wrapper") {
            this._reduceBadgeWrapperTitleFontSize(true);
        }
        else if (args.breakpoint == ns_base_MediaQueries_ScreenControls_Services_headerControl__WEBPACK_IMPORTED_MODULE_1__.BreakPoints.BADGE_BREAKPOINT_3 && args.keyValue == "badge-wrapper") {
            this._hideOrDisplaybadgeTitle(true);
        }
        //Second Initial breakPoints For the badgeWrapper
        if (args.breakpoint == ns_base_MediaQueries_ScreenControls_Services_headerControl__WEBPACK_IMPORTED_MODULE_1__.BreakPoints.BADGE_BREAKPOINT_X_1 && args.keyValue == "badge-wrapper") {
            this._removeInitialbadgeWrapperMargin(false);
        }
        else if (args.breakpoint == ns_base_MediaQueries_ScreenControls_Services_headerControl__WEBPACK_IMPORTED_MODULE_1__.BreakPoints.BADGE_BREAKPOINT_X_2 && args.keyValue == "badge-wrapper") {
            this._reduceBadgeWrapperTitleFontSize(false);
        }
        else if (args.breakpoint == ns_base_MediaQueries_ScreenControls_Services_headerControl__WEBPACK_IMPORTED_MODULE_1__.BreakPoints.BADGE_BREAKPOINT_X_3 && args.keyValue == "badge-wrapper") {
            this._hideOrDisplaybadgeTitle(false);
        }
    }
    ;
    //badge Wrapper Managers
    _hideOrDisplaybadgeTitle(shouldHide) {
        if (shouldHide) {
            if (this._badgeWrapperTitle) {
                this._badgeWrapperTitle.style.display = "none";
            }
        }
        else {
            if (this._badgeWrapperTitle) {
                this._badgeWrapperTitle.style.display = "flex";
            }
        }
    }
    _reduceBadgeWrapperTitleFontSize(shouldReduce) {
        if (shouldReduce) {
            if (this._badgeWrapperTitle) {
                this._badgeWrapperTitle.style.fontSize = "9pt";
            }
        }
        else {
            if (this._badgeWrapperTitle) {
                this._badgeWrapperTitle.style.fontSize = "10pt";
            }
        }
    }
    _removeInitialbadgeWrapperMargin(shouldRemove) {
        if (shouldRemove) {
            if (this._badgeWrapper) {
                this._badgeWrapper.style.marginLeft = "0px";
            }
        }
        else {
            if (this._badgeWrapper) {
                this._badgeWrapper.style.marginLeft = "30px";
            }
        }
    }
    //Navigationbar Managers
    __displayMinifiedNavigationHost(display) {
        if (display) {
            if (this._navigationbarHost) {
                this._navigationbarHost.style.height = "70px";
            }
        }
        else {
            if (this._navigationbarHost) {
                this._navigationbarHost.style.height = "130px";
            }
        }
    }
    __displayOrHideNavigationbars(display) {
        if (display) {
            if (this._wxBars) {
                this._wxBars.style.display = "flex";
            }
        }
        else {
            if (this._wxBars) {
                this._wxBars.style.display = "none";
            }
        }
    }
    __displayNavigationBar() {
        //cache context to prevent properties from being  set multiple times
        if (this._navigationBarScreenMemoize == "hidden" || this._navigationBarScreenMemoize == "outOfRange") {
            if (this._navigationBarComponent && this._enrollBtn) {
                this._navigationBarComponent.style.display = "flex";
                this._enrollBtn.style.display = "block";
            }
            this.__displayOrHideNavigationbars(false);
            this.__displayMinifiedNavigationHost(false);
            //store current state;
            this._navigationBarScreenMemoize = "visible";
        }
    }
    ;
    __hideNavigationBar() {
        //cache context to prevent properties from being  set multiple times
        if (this._navigationBarScreenMemoize == "visible" || this._navigationBarScreenMemoize == "outOfRange") {
            if (this._navigationBarComponent && this._enrollBtn) {
                this._navigationBarComponent.style.display = "none";
                this._enrollBtn.style.display = "none";
            }
            ;
            this.__displayOrHideNavigationbars(true);
            this.__displayMinifiedNavigationHost(true);
            //store current state
            this._navigationBarScreenMemoize = "hidden";
        }
    }
    //commonaction
    _$hideOrShowNavigationBarAndEnrollButton(visible) {
        if (visible) {
            this.__displayNavigationBar();
        }
        else {
            this.__hideNavigationBar();
        }
    }
};
headerInterfaceManager = __decorate([
    __param(0, ns_base_MediaQueries_ScreenControls_Services_headerControl__WEBPACK_IMPORTED_MODULE_1__.IHeaderScreenControlManager)
], headerInterfaceManager);

;


/***/ }),

/***/ "./src/ns/dom/NavigationHooks/NavigationHooks.ts":
/*!*******************************************************!*\
  !*** ./src/ns/dom/NavigationHooks/NavigationHooks.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NavigationHooksManager": () => (/* binding */ NavigationHooksManager),
/* harmony export */   "NavigationHooksManagerControl": () => (/* binding */ NavigationHooksManagerControl)
/* harmony export */ });
/* harmony import */ var ns_components_root_root__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ns/components/root/root */ "./src/ns/components/root/root.ts");
/* harmony import */ var ns_base_instanceCreators_instanceCreators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ns/base/instanceCreators/instanceCreators */ "./src/ns/base/instanceCreators/instanceCreators.ts");
/* harmony import */ var ns_common_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ns/common/events */ "./src/ns/common/events.ts");



class NavigationHooksManager {
    constructor() {
        this.didLocateToHomeRoute = new ns_common_events__WEBPACK_IMPORTED_MODULE_2__.globalEventEmitter();
        this.didLocateToBlogRoute = new ns_common_events__WEBPACK_IMPORTED_MODULE_2__.globalEventEmitter();
        this.didLocateToAcademicsRoute = new ns_common_events__WEBPACK_IMPORTED_MODULE_2__.globalEventEmitter();
        this.didLocateToAboutRoute = new ns_common_events__WEBPACK_IMPORTED_MODULE_2__.globalEventEmitter();
        this.registerCommonListeners();
    }
    registerCommonListeners() {
        ns_components_root_root__WEBPACK_IMPORTED_MODULE_0__.WebMainInstance.FrameRouter.RouterNavigationHook("home", (args) => {
            this.didLocateToHomeRoute.raiseEvent({ data: args.data });
        });
        ns_components_root_root__WEBPACK_IMPORTED_MODULE_0__.WebMainInstance.FrameRouter.RouterNavigationHook("about", (args) => {
            this.didLocateToAboutRoute.raiseEvent({ data: args.data });
        });
        ns_components_root_root__WEBPACK_IMPORTED_MODULE_0__.WebMainInstance.FrameRouter.RouterNavigationHook("academics", (args) => {
            this.didLocateToAcademicsRoute.raiseEvent({ data: args.data });
        });
        ns_components_root_root__WEBPACK_IMPORTED_MODULE_0__.WebMainInstance.FrameRouter.RouterNavigationHook("blog", (args) => {
            this.didLocateToBlogRoute.raiseEvent({ data: args.data });
        });
    }
}
const NavigationHooksManagerControl = (0,ns_base_instanceCreators_instanceCreators__WEBPACK_IMPORTED_MODULE_1__.createInstance)(NavigationHooksManager);


/***/ }),

/***/ "./src/ns/dom/links/linksManager.ts":
/*!******************************************!*\
  !*** ./src/ns/dom/links/linksManager.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LinkManager": () => (/* binding */ LinkManager),
/* harmony export */   "LinksManagerSystem": () => (/* binding */ LinksManagerSystem)
/* harmony export */ });
/* harmony import */ var ns_base_instanceCreators_instanceCreators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ns/base/instanceCreators/instanceCreators */ "./src/ns/base/instanceCreators/instanceCreators.ts");

class LinkManager {
    constructor() {
        this.DOM = document;
    }
    ;
    LinkToFaceBook() {
        window.open("https://web.facebook.com/NdejjeSSS/", "", "");
    }
    LinkToInstagram() {
        window.open("https://www.instagram.com/ndejjesss/", "", "");
    }
    LinkToTwitter() {
        window.open("https://twitter.com/ndejjess", "", "");
    }
}
const LinksManagerSystem = (0,ns_base_instanceCreators_instanceCreators__WEBPACK_IMPORTED_MODULE_0__.createInstance)(LinkManager);


/***/ }),

/***/ "./src/ns/dom/sizeManagers/BannerImageSize.ts":
/*!****************************************************!*\
  !*** ./src/ns/dom/sizeManagers/BannerImageSize.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BannerImageSizer": () => (/* binding */ BannerImageSizer)
/* harmony export */ });
/* harmony import */ var ns_base_MediaQueries_mediaQueries__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ns/base/MediaQueries/mediaQueries */ "./src/ns/base/MediaQueries/mediaQueries.ts");
/* harmony import */ var ns_common_domListener__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ns/common/domListener */ "./src/ns/common/domListener.ts");
/**
 * The Banner Image size Manager
 */


class BannerImageSizer {
    constructor() {
        this._bannerImagerElement = null;
        this._initializeBannerImageSizer();
    }
    ;
    _attachHostDomElement() {
        this._bannerImagerElement = (0,ns_common_domListener__WEBPACK_IMPORTED_MODULE_1__.$)(".banner-image");
    }
    _startupInitialDefaultSize() {
        if (this._bannerImagerElement) {
            this._bannerImagerElement.style.width = `${window.innerWidth}px`;
        }
    }
    ;
    _contentInterfaceListener() {
        ns_base_MediaQueries_mediaQueries__WEBPACK_IMPORTED_MODULE_0__.MediaScreenManagerControl.mediaWindowScreenDidResize.subscribe(this._listenerForInterfaceChange.bind(this));
    }
    ;
    _listenerForInterfaceChange(dimensions) {
        if (this._bannerImagerElement) {
            this._bannerImagerElement.style.width = `${dimensions.width}px`;
        }
    }
    _initializeBannerImageSizer() {
        this._attachHostDomElement();
        this._startupInitialDefaultSize();
        this._contentInterfaceListener();
        console.log("DidInitializeBannerImage");
    }
}


/***/ }),

/***/ "./src/ns/workload/workload.base.ts":
/*!******************************************!*\
  !*** ./src/ns/workload/workload.base.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var ns_base_MediaQueries_ScreenControls_Services_headerControl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ns/base/MediaQueries/ScreenControls/Services/headerControl */ "./src/ns/base/MediaQueries/ScreenControls/Services/headerControl.ts");
/* harmony import */ var ns_base_MediaQueries_mediaQueries__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ns/base/MediaQueries/mediaQueries */ "./src/ns/base/MediaQueries/mediaQueries.ts");
/* harmony import */ var ns_base_Router_Route__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ns/base/Router/Route */ "./src/ns/base/Router/Route.ts");
/* harmony import */ var ns_base_Router_Router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ns/base/Router/Router */ "./src/ns/base/Router/Router.ts");
/* harmony import */ var ns_base_dependencyInjection_decoratorServer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ns/base/dependencyInjection/decoratorServer */ "./src/ns/base/dependencyInjection/decoratorServer.ts");
/* harmony import */ var ns_base_dependencyInjection_injector__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ns/base/dependencyInjection/injector */ "./src/ns/base/dependencyInjection/injector.ts");
/* harmony import */ var ns_base_dependencyInjection_serviceCollectionManager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ns/base/dependencyInjection/serviceCollectionManager */ "./src/ns/base/dependencyInjection/serviceCollectionManager.ts");
/* harmony import */ var ns_base_instanceCreators_instanceCreators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ns/base/instanceCreators/instanceCreators */ "./src/ns/base/instanceCreators/instanceCreators.ts");
/* harmony import */ var ns_base_Web_web_main__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ns/base/Web/web.main */ "./src/ns/base/Web/web.main.ts");











/***/ }),

/***/ "./src/ns/workload/workload.common.ts":
/*!********************************************!*\
  !*** ./src/ns/workload/workload.common.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var ns_common_lifecycle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ns/common/lifecycle */ "./src/ns/common/lifecycle.ts");
/* harmony import */ var ns_common_domListener__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ns/common/domListener */ "./src/ns/common/domListener.ts");
/* harmony import */ var ns_common_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ns/common/events */ "./src/ns/common/events.ts");
/* harmony import */ var ns_common_Animations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ns/common/Animations */ "./src/ns/common/Animations.ts");
/**
 * Common Elements;
 */






/***/ }),

/***/ "./src/ns/workload/workload.dom.ts":
/*!*****************************************!*\
  !*** ./src/ns/workload/workload.dom.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var ns_dom_Interface_HeaderIntefaceManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ns/dom/Interface/HeaderIntefaceManager */ "./src/ns/dom/Interface/HeaderIntefaceManager.ts");
/* harmony import */ var ns_dom_Interface_FooterInterfaceManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ns/dom/Interface/FooterInterfaceManager */ "./src/ns/dom/Interface/FooterInterfaceManager.ts");
/* harmony import */ var ns_dom_sizeManagers_BannerImageSize__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ns/dom/sizeManagers/BannerImageSize */ "./src/ns/dom/sizeManagers/BannerImageSize.ts");
/* harmony import */ var ns_dom_links_linksManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ns/dom/links/linksManager */ "./src/ns/dom/links/linksManager.ts");
/* harmony import */ var ns_dom_NavigationHooks_NavigationHooks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ns/dom/NavigationHooks/NavigationHooks */ "./src/ns/dom/NavigationHooks/NavigationHooks.ts");







/***/ }),

/***/ "./src/ns/workload/workload.sass.ts":
/*!******************************************!*\
  !*** ./src/ns/workload/workload.sass.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _design_Global_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @design/Global.scss */ "./src/ns/design/Global.scss");
/* harmony import */ var _design_Header_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @design/Header.scss */ "./src/ns/design/Header.scss");
/* harmony import */ var _design_Footer_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @design/Footer.scss */ "./src/ns/design/Footer.scss");
/* harmony import */ var _design_Enrollbtn_scss__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @design/Enrollbtn.scss */ "./src/ns/design/Enrollbtn.scss");
/* harmony import */ var _design_Banner_scss__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @design/Banner.scss */ "./src/ns/design/Banner.scss");
/* harmony import */ var _design_Pride_scss__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @design/Pride.scss */ "./src/ns/design/Pride.scss");
/* harmony import */ var _design_Goals_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @design/Goals.scss */ "./src/ns/design/Goals.scss");
/* harmony import */ var _design_Insights_scss__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @design/Insights.scss */ "./src/ns/design/Insights.scss");
/* harmony import */ var _design_Quote_scss__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @design/Quote.scss */ "./src/ns/design/Quote.scss");
/* harmony import */ var _design_Faq_scss__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @design/Faq.scss */ "./src/ns/design/Faq.scss");
/* harmony import */ var _design_reviews_scss__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @design/reviews.scss */ "./src/ns/design/reviews.scss");
/* harmony import */ var _design_mission_scss__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @design/mission.scss */ "./src/ns/design/mission.scss");
/* harmony import */ var _design_corevalues_scss__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @design/corevalues.scss */ "./src/ns/design/corevalues.scss");
/* harmony import */ var _design_history_scss__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @design/history.scss */ "./src/ns/design/history.scss");
/* harmony import */ var _design_BImage_scss__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @design/BImage.scss */ "./src/ns/design/BImage.scss");
/* harmony import */ var _design_overflowNav_scss__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @design/overflowNav.scss */ "./src/ns/design/overflowNav.scss");
/* harmony import */ var _design_viewHomeMediaQueries_scss__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @design/viewHomeMediaQueries.scss */ "./src/ns/design/viewHomeMediaQueries.scss");
/* harmony import */ var _design_edu_scss__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @design/edu.scss */ "./src/ns/design/edu.scss");
/* harmony import */ var _design_WelcomeNote_scss__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @design/WelcomeNote.scss */ "./src/ns/design/WelcomeNote.scss");
/* harmony import */ var _design_Glance_scss__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @design/Glance.scss */ "./src/ns/design/Glance.scss");
/* harmony import */ var _design_Xgoal_scss__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @design/Xgoal.scss */ "./src/ns/design/Xgoal.scss");
/* harmony import */ var _design_StaffView_main_scss__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @design/StaffView.main.scss */ "./src/ns/design/StaffView.main.scss");
/* harmony import */ var _design_StaffView_Member_scss__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @design/StaffView.Member.scss */ "./src/ns/design/StaffView.Member.scss");
/* harmony import */ var _design_StaffView_dialog_scss__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @design/StaffView.dialog.scss */ "./src/ns/design/StaffView.dialog.scss");
/* harmony import */ var _design_dialogHost_scss__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @design/dialogHost.scss */ "./src/ns/design/dialogHost.scss");
/**
 * Webpack Sass Build File
 */

//Common Components



//View Components










//detached components


//mediaQueries












/***/ }),

/***/ "./src/ns/design/Imgs/aziz-acharki-gXndgCS-CGo-unsplash.jpg":
/*!******************************************************************!*\
  !*** ./src/ns/design/Imgs/aziz-acharki-gXndgCS-CGo-unsplash.jpg ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "f4b881b628862ccf6c21.jpg";

/***/ }),

/***/ "./src/ns/design/Imgs/logo-banner.png":
/*!********************************************!*\
  !*** ./src/ns/design/Imgs/logo-banner.png ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "07329444cf7bbf13e9de.png";

/***/ }),

/***/ "./src/ns/design/fonts/WixMadeforTextVF_W_Wght.8022447a.woff2":
/*!********************************************************************!*\
  !*** ./src/ns/design/fonts/WixMadeforTextVF_W_Wght.8022447a.woff2 ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "52a34ddc7da967a4d217.woff2";

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		__webpack_require__.b = document.baseURI || self.location.href;
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// no jsonp function
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!******************************************!*\
  !*** ./src/ns/workload/workload.main.ts ***!
  \******************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var ns_workload_workload_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ns/workload/workload.common */ "./src/ns/workload/workload.common.ts");
/* harmony import */ var ns_workload_workload_sass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ns/workload/workload.sass */ "./src/ns/workload/workload.sass.ts");
/* harmony import */ var ns_workload_workload_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ns/workload/workload.dom */ "./src/ns/workload/workload.dom.ts");
/* harmony import */ var ns_workload_workload_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ns/workload/workload.base */ "./src/ns/workload/workload.base.ts");
/* harmony import */ var ns_components_common_Enroll_Button_enrollbtn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ns/components/common/Enroll Button/enrollbtn */ "./src/ns/components/common/Enroll Button/enrollbtn.ts");
/* harmony import */ var ns_components_common_Header_header__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ns/components/common/Header/header */ "./src/ns/components/common/Header/header.ts");
/* harmony import */ var ns_components_common_Footer_footer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ns/components/common/Footer/footer */ "./src/ns/components/common/Footer/footer.ts");
/* harmony import */ var ns_components_views_Home_Banner_Area_banner__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ns/components/views/Home/Banner Area/banner */ "./src/ns/components/views/Home/Banner Area/banner.ts");
/* harmony import */ var ns_components_views_Home_Joy_And_Pride_pride__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ns/components/views/Home/Joy And Pride/pride */ "./src/ns/components/views/Home/Joy And Pride/pride.ts");
/* harmony import */ var ns_components_views_Home_Goals_And_Benefits_goalsB__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ns/components/views/Home/Goals And Benefits/goalsB */ "./src/ns/components/views/Home/Goals And Benefits/goalsB.ts");
/* harmony import */ var ns_components_views_Home_Insights_Insights_strings__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ns/components/views/Home/Insights/Insights.strings */ "./src/ns/components/views/Home/Insights/Insights.strings.ts");
/* harmony import */ var ns_components_views_Home_Insights_Insights__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ns/components/views/Home/Insights/Insights */ "./src/ns/components/views/Home/Insights/Insights.ts");
/* harmony import */ var ns_components_views_Home_Quote_quote__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ns/components/views/Home/Quote/quote */ "./src/ns/components/views/Home/Quote/quote.ts");
/* harmony import */ var ns_components_views_Home_Reviews_review__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ns/components/views/Home/Reviews/review */ "./src/ns/components/views/Home/Reviews/review.ts");
/* harmony import */ var ns_components_views_Home_edu_edu__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ns/components/views/Home/edu/edu */ "./src/ns/components/views/Home/edu/edu.ts");
/* harmony import */ var ns_components_views_Home_FAQ_Section_FAQ__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ns/components/views/Home/FAQ Section/FAQ */ "./src/ns/components/views/Home/FAQ Section/FAQ.ts");
/* harmony import */ var ns_components_views_Home_view_home__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ns/components/views/Home/view.home */ "./src/ns/components/views/Home/view.home.ts");
/* harmony import */ var ns_components_views_About_WelcomeNote_welcomeNote__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ns/components/views/About/WelcomeNote/welcomeNote */ "./src/ns/components/views/About/WelcomeNote/welcomeNote.ts");
/* harmony import */ var ns_components_views_About_Glance_glance__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ns/components/views/About/Glance/glance */ "./src/ns/components/views/About/Glance/glance.ts");
/* harmony import */ var ns_components_views_About_XGoal_xgoal__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ns/components/views/About/XGoal/xgoal */ "./src/ns/components/views/About/XGoal/xgoal.ts");
/* harmony import */ var ns_components_views_About_StaffView_staffview__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ns/components/views/About/StaffView/staffview */ "./src/ns/components/views/About/StaffView/staffview.ts");
/* harmony import */ var ns_components_views_About_StaffView_sub_components_memeber_item__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ns/components/views/About/StaffView/sub-components/memeber.item */ "./src/ns/components/views/About/StaffView/sub-components/memeber.item.ts");
/* harmony import */ var ns_components_views_About_StaffView_staffDialog_staffDialog__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ns/components/views/About/StaffView/staffDialog/staffDialog */ "./src/ns/components/views/About/StaffView/staffDialog/staffDialog.ts");
/* harmony import */ var ns_components_views_About_Core_Values_corevalues__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ns/components/views/About/Core Values/corevalues */ "./src/ns/components/views/About/Core Values/corevalues.ts");
/* harmony import */ var ns_components_views_About_VidInterview_VidInterview__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ns/components/views/About/VidInterview/VidInterview */ "./src/ns/components/views/About/VidInterview/VidInterview.ts");
/* harmony import */ var ns_components_views_About_History_history__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ns/components/views/About/History/history */ "./src/ns/components/views/About/History/history.ts");
/* harmony import */ var ns_components_views_About_view_about__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ns/components/views/About/view.about */ "./src/ns/components/views/About/view.about.ts");
/* harmony import */ var ns_components_root_root__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ns/components/root/root */ "./src/ns/components/root/root.ts");
/**
 * Common Isolate Dependencies
 */

/**
 * Sass Style Dependencies
 */

/**
 * Dom dependencies
 */

/**
 * Base Dependencies
 */

/**
 * Common Base Components
 */



/**
 * View Components
 */
//Home View










//AboutView










/**
 * Provider comes last
 */


})();

/******/ })()
;
<<<<<<< HEAD
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
=======
<<<<<<< HEAD
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
=======
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
>>>>>>> 4d1b90a54965c2345ee76d17a96d3191f2a35158
>>>>>>> 70dcf9df28ddc36b7256028032bbec2516a4d038
